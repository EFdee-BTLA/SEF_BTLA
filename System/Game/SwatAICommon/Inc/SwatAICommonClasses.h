/*===========================================================================
	  C++ class	definitions	exported from UnrealScript.
	  This is automatically	generated by the tools.
	  DO NOT modify	this manually! Edit	the	corresponding .uc files	instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef SWATAICOMMON_API
#define SWATAICOMMON_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern SWATAICOMMON_API	FName SWATAICOMMON_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AimAtActor)
AUTOGENERATE_NAME(AimAtPoint)
AUTOGENERATE_NAME(AimToRotation)
AUTOGENERATE_NAME(AnimAreAimingChannelsMuted)
AUTOGENERATE_NAME(AnimCanAimAtDesiredActor)
AUTOGENERATE_NAME(AnimCanAimAtDesiredPoint)
AUTOGENERATE_NAME(AnimCanAimAtDesiredRotation)
AUTOGENERATE_NAME(AnimGetAimOrigin)
AUTOGENERATE_NAME(AnimGetQuickHitChannel)
AUTOGENERATE_NAME(AnimGetSpecialChannel)
AUTOGENERATE_NAME(AnimIsAimedAtDesired)
AUTOGENERATE_NAME(AnimIsWeaponAimSet)
AUTOGENERATE_NAME(AnimPlayEquipment)
AUTOGENERATE_NAME(AnimPlayQuickHit)
AUTOGENERATE_NAME(AnimSetIdle)
AUTOGENERATE_NAME(AnimSnapBaseToAim)
AUTOGENERATE_NAME(AnimStopEquipment)
AUTOGENERATE_NAME(AnimStopQuickHit)
AUTOGENERATE_NAME(AnimStopSpecial)
AUTOGENERATE_NAME(AssignOfficer)
AUTOGENERATE_NAME(BecomeAThreat)
AUTOGENERATE_NAME(CanAssignOfficerToTarget)
AUTOGENERATE_NAME(CanBangAndClear)
AUTOGENERATE_NAME(CanBeUsedNow)
AUTOGENERATE_NAME(CanBreachAndClear)
AUTOGENERATE_NAME(CanBreachAndClearLockedDoor)
AUTOGENERATE_NAME(CanBreachBangAndClear)
AUTOGENERATE_NAME(CanBreachGasAndClear)
AUTOGENERATE_NAME(CanBreachLeaderThrowAndClear)
AUTOGENERATE_NAME(CanBreachStingAndClear)
AUTOGENERATE_NAME(CanDeployC2)
AUTOGENERATE_NAME(CanDeployGrenadeLauncher)
AUTOGENERATE_NAME(CanDeployLessLethalShotgun)
AUTOGENERATE_NAME(CanDeployLightstick)
AUTOGENERATE_NAME(CanDeployPepperBallGun)
AUTOGENERATE_NAME(CanDeployPepperSpray)
AUTOGENERATE_NAME(CanDeployShotgun)
AUTOGENERATE_NAME(CanDeployTaser)
AUTOGENERATE_NAME(CanDeployThrownItem)
AUTOGENERATE_NAME(CanDeployWedge)
AUTOGENERATE_NAME(CanDisable)
AUTOGENERATE_NAME(CanGasAndClear)
AUTOGENERATE_NAME(CanIssueComplianceTo)
AUTOGENERATE_NAME(CanLeaderThrowAndClear)
AUTOGENERATE_NAME(CanMirror)
AUTOGENERATE_NAME(CanPawnUseLowReady)
AUTOGENERATE_NAME(CanPickLock)
AUTOGENERATE_NAME(CanStingAndClear)
AUTOGENERATE_NAME(ChooseIdle)
AUTOGENERATE_NAME(ClearFormation)
AUTOGENERATE_NAME(ClearOfficerEngagements)
AUTOGENERATE_NAME(ClearPendingDoor)
AUTOGENERATE_NAME(DisableAim)
AUTOGENERATE_NAME(DisableAwareness)
AUTOGENERATE_NAME(DisableFavorCoveredPath)
AUTOGENERATE_NAME(DisableFavorLowThreatPath)
AUTOGENERATE_NAME(DisableHearing)
AUTOGENERATE_NAME(DisableRagdoll)
AUTOGENERATE_NAME(DisableVision)
AUTOGENERATE_NAME(DoesTeamHaveSufficientBreachingEquipment)
AUTOGENERATE_NAME(DropActiveWeapon)
AUTOGENERATE_NAME(DropAllEvidence)
AUTOGENERATE_NAME(DropAllWeapons)
AUTOGENERATE_NAME(EnableFavorCoveredPath)
AUTOGENERATE_NAME(EnableFavorLowThreatPath)
AUTOGENERATE_NAME(EnableHearing)
AUTOGENERATE_NAME(EnableVision)
AUTOGENERATE_NAME(EnteredFleeSafeguard)
AUTOGENERATE_NAME(FindAllOfNavigationPointClass)
AUTOGENERATE_NAME(FindClosestOfNavigationPointClass)
AUTOGENERATE_NAME(FindNearbyWeaponModel)
AUTOGENERATE_NAME(FindRunToPoint)
AUTOGENERATE_NAME(FireWhereAiming)
AUTOGENERATE_NAME(GetAimOrientation)
AUTOGENERATE_NAME(GetAimRotation)
AUTOGENERATE_NAME(GetAnimBaseYaw)
AUTOGENERATE_NAME(GetArrester)
AUTOGENERATE_NAME(GetAwareness)
AUTOGENERATE_NAME(GetBackupWeapon)
AUTOGENERATE_NAME(GetCommanderAction)
AUTOGENERATE_NAME(GetCoverFinder)
AUTOGENERATE_NAME(GetCurrentFormation)
AUTOGENERATE_NAME(GetCurrentState)
AUTOGENERATE_NAME(GetDefaultAIFireModeForWeapon)
AUTOGENERATE_NAME(GetEnemyCommanderAction)
AUTOGENERATE_NAME(GetEnemySkill)
AUTOGENERATE_NAME(GetEnemySpeechManagerAction)
AUTOGENERATE_NAME(GetFBAffectedAnimation)
AUTOGENERATE_NAME(GetFBReactionAnimation)
AUTOGENERATE_NAME(GetFBRecoveryAnimation)
AUTOGENERATE_NAME(GetFlinchAnimation)
AUTOGENERATE_NAME(GetGasAffectedAnimation)
AUTOGENERATE_NAME(GetGasReactionAnimation)
AUTOGENERATE_NAME(GetGasRecoveryAnimation)
AUTOGENERATE_NAME(GetIdleCategory)
AUTOGENERATE_NAME(GetIgnoreDoorBlocking)
AUTOGENERATE_NAME(GetInitialMorale)
AUTOGENERATE_NAME(GetItemAtSlot)
AUTOGENERATE_NAME(GetKnowledge)
AUTOGENERATE_NAME(GetLauncherWhichFires)
AUTOGENERATE_NAME(GetLockAim)
AUTOGENERATE_NAME(GetMovementUpperBodyAimBehavior)
AUTOGENERATE_NAME(GetNewNavigationPointList)
AUTOGENERATE_NAME(GetNumTouchingStaircaseAimVolumes)
AUTOGENERATE_NAME(GetOfficerCommanderAction)
AUTOGENERATE_NAME(GetOfficerSpeechManagerAction)
AUTOGENERATE_NAME(GetPrimaryWeapon)
AUTOGENERATE_NAME(GetRagdollSimulationTimeout)
AUTOGENERATE_NAME(GetRestrainedHandcuffs)
AUTOGENERATE_NAME(GetRoomNavigationPointsOfType)
AUTOGENERATE_NAME(GetSpeechManagerAction)
AUTOGENERATE_NAME(GetSquadAI)
AUTOGENERATE_NAME(GetStungAffectedAnimation)
AUTOGENERATE_NAME(GetStungReactionAnimation)
AUTOGENERATE_NAME(GetStungRecoveryAnimation)
AUTOGENERATE_NAME(GetTasedAffectedAnimation)
AUTOGENERATE_NAME(GetTasedReactionAnimation)
AUTOGENERATE_NAME(GetTasedRecoveryAnimation)
AUTOGENERATE_NAME(GetThrowAngle)
AUTOGENERATE_NAME(GetThrowOrigin)
AUTOGENERATE_NAME(GetThrowOriginOffset)
AUTOGENERATE_NAME(GetThrownWeapon)
AUTOGENERATE_NAME(GetTimeToWaitBeforeFiring)
AUTOGENERATE_NAME(GetTimeToWaitBetweenFiring)
AUTOGENERATE_NAME(GetTouchingStaircaseAimVolumeAtIndex)
AUTOGENERATE_NAME(GetUpperBodyAnimBehavior)
AUTOGENERATE_NAME(GetUpperBodyBone)
AUTOGENERATE_NAME(GetViewDirection)
AUTOGENERATE_NAME(GetViewPoint)
AUTOGENERATE_NAME(HasA)
AUTOGENERATE_NAME(HasEvidence)
AUTOGENERATE_NAME(HasFiredWeaponEquipped)
AUTOGENERATE_NAME(HasLauncherWhichFires)
AUTOGENERATE_NAME(HasTaser)
AUTOGENERATE_NAME(HasUsableWeapon)
AUTOGENERATE_NAME(IAmThreat)
AUTOGENERATE_NAME(InstantReEquipFiredWeapon)
AUTOGENERATE_NAME(IsAThreat)
AUTOGENERATE_NAME(IsAggressive)
AUTOGENERATE_NAME(IsArrested)
AUTOGENERATE_NAME(IsBlueTeam)
AUTOGENERATE_NAME(IsCompliant)
AUTOGENERATE_NAME(IsDisabled)
AUTOGENERATE_NAME(IsHoldingCommand)
AUTOGENERATE_NAME(IsIdleCurrent)
AUTOGENERATE_NAME(IsIntenseInjury)
AUTOGENERATE_NAME(IsOfficerOne)
AUTOGENERATE_NAME(IsOfficerTwo)
AUTOGENERATE_NAME(IsOtherActorAThreat)
AUTOGENERATE_NAME(IsRedTeam)
AUTOGENERATE_NAME(IsRelevantToPlayerOrOfficers)
AUTOGENERATE_NAME(IsTurning)
AUTOGENERATE_NAME(IsUnderhandThrow)
AUTOGENERATE_NAME(IsUnderhandThrowTo)
AUTOGENERATE_NAME(IsUnobservedByOfficers)
AUTOGENERATE_NAME(IssueComplianceTo)
AUTOGENERATE_NAME(LatentAITriggerEffectEvent)
AUTOGENERATE_NAME(LockAim)
AUTOGENERATE_NAME(NotifyBecameCompliant)
AUTOGENERATE_NAME(OnTouchedStaircaseAimVolume)
AUTOGENERATE_NAME(OnUntouchedStaircaseAimVolume)
AUTOGENERATE_NAME(PickUpWeaponModel)
AUTOGENERATE_NAME(PlayTurnAwayAnimation)
AUTOGENERATE_NAME(ReEquipFiredWeapon)
AUTOGENERATE_NAME(RegisterHearingNotification)
AUTOGENERATE_NAME(RegisterVisionNotification)
AUTOGENERATE_NAME(ReleaseNavigationPointList)
AUTOGENERATE_NAME(RemoveGivenEquipment)
AUTOGENERATE_NAME(RollBarricade)
AUTOGENERATE_NAME(RollInvestigate)
AUTOGENERATE_NAME(SetAimUrgency)
AUTOGENERATE_NAME(SetCurrentFormation)
AUTOGENERATE_NAME(SetCurrentState)
AUTOGENERATE_NAME(SetDebugBlackboardInfo)
AUTOGENERATE_NAME(SetDebugMoraleHistoryInfo)
AUTOGENERATE_NAME(SetDoorToBlowC2On)
AUTOGENERATE_NAME(SetGrenadeTargetLocation)
AUTOGENERATE_NAME(SetIdleCategory)
AUTOGENERATE_NAME(SetIgnoreDoorBlocking)
AUTOGENERATE_NAME(SetIsCompliant)
AUTOGENERATE_NAME(SetLockAim)
AUTOGENERATE_NAME(SetMovement)
AUTOGENERATE_NAME(SetPendingDoor)
AUTOGENERATE_NAME(SetThrowSide)
AUTOGENERATE_NAME(SetUpperBodyAnimBehavior)
AUTOGENERATE_NAME(SetWeaponTarget)
AUTOGENERATE_NAME(SetWeaponTargetLocation)
AUTOGENERATE_NAME(ShouldDropWeaponInstantly)
AUTOGENERATE_NAME(ShouldForceOpenLockedDoors)
AUTOGENERATE_NAME(ShouldPlayFullBodyHitAnimation)
AUTOGENERATE_NAME(ShouldStopMoving)
AUTOGENERATE_NAME(ShouldWalk)
AUTOGENERATE_NAME(SpawnedFromGroup)
AUTOGENERATE_NAME(StartInvestigating)
AUTOGENERATE_NAME(StartSprinting)
AUTOGENERATE_NAME(StopInvestigating)
AUTOGENERATE_NAME(StopSprinting)
AUTOGENERATE_NAME(SwapInCompliantAnimSet)
AUTOGENERATE_NAME(SwapInRestrainedAnimSet)
AUTOGENERATE_NAME(ThrowWeaponDown)
AUTOGENERATE_NAME(UnbecomeAThreat)
AUTOGENERATE_NAME(UnlockAim)
AUTOGENERATE_NAME(UnregisterHearingNotification)
AUTOGENERATE_NAME(UnregisterVisionNotification)
AUTOGENERATE_NAME(UnsetUpperBodyAnimBehavior)
AUTOGENERATE_NAME(isVisible)

#ifndef NAMES_ONLY

// Enum EAICoverLocationSide is declared in "..\SwatAICommon\Classes\AICoverFinder.uc"
enum EAICoverLocationSide
{
	 kAICLS_NotApplicable    =0,
	 kAICLS_Left             =1,
	 kAICLS_Right            =2,
	 kAICLS_MAX              =3,
};
// Enum EAICoverLocationInfo is declared in "..\SwatAICommon\Classes\AICoverFinder.uc"
enum EAICoverLocationInfo
{
	 kAICLI_NotInCover       =0,
	 kAICLI_InLowCover       =1,
	 kAICLI_InCover          =2,
	 kAICLI_MAX              =3,
};
// Enum EAICoverLocationType is declared in "..\SwatAICommon\Classes\AICoverFinder.uc"
enum EAICoverLocationType
{
	 kAICLT_NearestSide      =0,
	 kAICLT_NearestFront     =1,
	 kAICLT_NearFrontCorner  =2,
	 kAICLT_FarFrontCorner   =3,
	 kAICLT_MAX              =4,
};
// Enum EShowCoverInfoDetail is declared in "..\SwatAICommon\Classes\AICoverFinder.uc"
enum EShowCoverInfoDetail
{
	 kSCID_PlaneAndExtrusionIntersection=0,
	 kSCID_IndividualExtrusions=1,
	 kSCID_IndividualInverseExtrusions=2,
	 kSCID_MAX               =3,
};
// Struct FAICoverResult	is declared	in "..\SwatAICommon\Classes\AICoverFinder.uc"
struct SWATAICOMMON_API FAICoverResult
{
    BYTE coverLocationInfo;
    class AActor* coverActor;
    FVector coverLocation;
    BYTE coverSide;
    INT coverYaw;
};



// "event"	function whose parameters correspond to	"struct ASwatAIRepository_eventFindClosestOfNavigationPointClass_Parms"	is declared	in "..\SwatAICommon\Classes\SwatAIRepository.uc"
struct ASwatAIRepository_eventFindClosestOfNavigationPointClass_Parms
{
	  class UClass* ClassType;
	  FVector testLocation;
	  class UNavigationPointList* ExcludeList;
	  class ANavigationPoint* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ASwatAIRepository_eventFindAllOfNavigationPointClass_Parms"	is declared	in "..\SwatAICommon\Classes\SwatAIRepository.uc"
struct ASwatAIRepository_eventFindAllOfNavigationPointClass_Parms
{
	  class UClass* ClassType;
	  class UNavigationPointList* ExcludeList;
	  class UNavigationPointList* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ASwatAIRepository_eventGetNewNavigationPointList_Parms"	is declared	in "..\SwatAICommon\Classes\SwatAIRepository.uc"
struct ASwatAIRepository_eventGetNewNavigationPointList_Parms
{
	  class UNavigationPointList* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ASwatAIRepository_eventReleaseNavigationPointList_Parms"	is declared	in "..\SwatAICommon\Classes\SwatAIRepository.uc"
struct ASwatAIRepository_eventReleaseNavigationPointList_Parms
{
	  class UNavigationPointList* NavPointList;
};
// "event"	function whose parameters correspond to	"struct ASwatAIRepository_eventGetRoomNavigationPointsOfType_Parms"	is declared	in "..\SwatAICommon\Classes\SwatAIRepository.uc"
struct ASwatAIRepository_eventGetRoomNavigationPointsOfType_Parms
{
	  FName RoomName;
	  FName PointClassName;
	  FVector Location;
	  FLOAT MinimumDistanceFromLocation;
	  class UNavigationPointList* ReturnValue;
};












// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanMirror_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanMirror_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanDisable_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanDisable_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanDeployWedge_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanDeployWedge_Parms
{
	  class ADoor* TargetDoor;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanDeployLightstick_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanDeployLightstick_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanDeployPepperBallGun_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanDeployPepperBallGun_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanDeployGrenadeLauncher_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanDeployGrenadeLauncher_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanDeployLessLethalShotgun_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanDeployLessLethalShotgun_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanDeployTaser_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanDeployTaser_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanDeployPepperSpray_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanDeployPepperSpray_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanDeployC2_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanDeployC2_Parms
{
	  class ADoor* TargetDoor;
	  BITFIELD bLeftSide;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanDeployShotgun_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanDeployShotgun_Parms
{
	  class ADoor* TargetDoor;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanDeployThrownItem_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanDeployThrownItem_Parms
{
	  BYTE ThrownItemEquipmentSlot;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanLeaderThrowAndClear_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanLeaderThrowAndClear_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanStingAndClear_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanStingAndClear_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanGasAndClear_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanGasAndClear_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanBangAndClear_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanBangAndClear_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanBreachLeaderThrowAndClear_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanBreachLeaderThrowAndClear_Parms
{
	  BITFIELD bPlayerBelievesDoorLocked;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanBreachStingAndClear_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanBreachStingAndClear_Parms
{
	  BITFIELD bPlayerBelievesDoorLocked;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanBreachGasAndClear_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanBreachGasAndClear_Parms
{
	  BITFIELD bPlayerBelievesDoorLocked;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanBreachBangAndClear_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanBreachBangAndClear_Parms
{
	  BITFIELD bPlayerBelievesDoorLocked;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanBreachAndClear_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanBreachAndClear_Parms
{
	  BITFIELD bPlayerBelievesDoorLocked;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventDoesTeamHaveSufficientBreachingEquipment_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventDoesTeamHaveSufficientBreachingEquipment_Parms
{
	  INT BreachingMethod;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanBreachAndClearLockedDoor_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanBreachAndClearLockedDoor_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventCanPickLock_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventCanPickLock_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventIsHoldingCommand_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventIsHoldingCommand_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AOfficerTeamInfo_eventGetSquadAI_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
struct AOfficerTeamInfo_eventGetSquadAI_Parms
{
	  class UAI_SquadResource* ReturnValue;
};





// Struct FWeightedAssignment	is declared	in "..\SwatAICommon\Classes\Squads\Hive.uc"
struct SWATAICOMMON_API FWeightedAssignment
{
    FLOAT Weight;
    class APawn* Officer;
    class APawn* Assignment;
};

// Constant kRequestEngagePointStaleDelta is declared in "..\SwatAICommon\Classes\Squads\Hive.uc"
#define UCONST_kRequestEngagePointStaleDelta 2.0
// Constant kMaxAwarenessUpdateTime is declared in "..\SwatAICommon\Classes\Squads\Hive.uc"
#define UCONST_kMaxAwarenessUpdateTime 0.666
// Constant kMinAwarenessUpdateTime is declared in "..\SwatAICommon\Classes\Squads\Hive.uc"
#define UCONST_kMinAwarenessUpdateTime 0.333

// "event"	function whose parameters correspond to	"struct UHive_eventClearOfficerEngagements_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\Hive.uc"
struct UHive_eventClearOfficerEngagements_Parms
{
	  class APawn* Officer;
};
// "event"	function whose parameters correspond to	"struct UHive_eventAssignOfficer_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\Hive.uc"
struct UHive_eventAssignOfficer_Parms
{
	  class APawn* Officer;
	  class APawn* Assignment;
};
// "event"	function whose parameters correspond to	"struct UHive_eventCanAssignOfficerToTarget_Parms"	is declared	in "..\SwatAICommon\Classes\Squads\Hive.uc"
struct UHive_eventCanAssignOfficerToTarget_Parms
{
	  class APawn* Officer;
	  class APawn* Target;
	  BITFIELD ReturnValue;
};

// Enum EUpperBodyAnimBehavior is declared in "..\SwatAICommon\Classes\ISwatAI.uc"
enum EUpperBodyAnimBehavior
{
	 kUBAB_FullBody          =0,
	 kUBAB_LowReady          =1,
	 kUBAB_AimWeapon         =2,
	 kUBAB_MAX               =3,
};
// Enum AIThrowSide is declared in "..\SwatAICommon\Classes\ISwatAI.uc"
enum AIThrowSide
{
	 kThrowFromCenter        =0,
	 kThrowFromLeft          =1,
	 kThrowFromRight         =2,
};
// Enum AIDoorCloseSide is declared in "..\SwatAICommon\Classes\ISwatAI.uc"
enum AIDoorCloseSide
{
	 kCloseFromLeft          =0,
	 kCloseFromRight         =1,
};
// Enum AIDoorUsageSide is declared in "..\SwatAICommon\Classes\ISwatAI.uc"
enum AIDoorUsageSide
{
	 kUseDoorFront           =0,
	 kUseDoorBack            =1,
	 kUseDoorCenter          =2,
};

// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetTouchingStaircaseAimVolumeAtIndex_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetTouchingStaircaseAimVolumeAtIndex_Parms
{
	  INT Index;
	  class AStaircaseAimVolume* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetNumTouchingStaircaseAimVolumes_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetNumTouchingStaircaseAimVolumes_Parms
{
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventOnUntouchedStaircaseAimVolume_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_OnUntouchedStaircaseAimVolume_Parms
{
	  class AStaircaseAimVolume* StaircaseAimVolume;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventOnTouchedStaircaseAimVolume_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_OnTouchedStaircaseAimVolume_Parms
{
	  class AStaircaseAimVolume* StaircaseAimVolume;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIsUnobservedByOfficers_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IsUnobservedByOfficers_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIsTurning_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IsTurning_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventCanPawnUseLowReady_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_CanPawnUseLowReady_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimAreAimingChannelsMuted_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimAreAimingChannelsMuted_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimSnapBaseToAim_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimSnapBaseToAim_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetAnimBaseYaw_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetAnimBaseYaw_Parms
{
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetAimOrientation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetAimOrientation_Parms
{
	  FRotator ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimGetAimOrigin_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimGetAimOrigin_Parms
{
	  FVector ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimIsWeaponAimSet_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimIsWeaponAimSet_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimCanAimAtDesiredRotation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimCanAimAtDesiredRotation_Parms
{
	  FRotator Rotation;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimCanAimAtDesiredActor_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimCanAimAtDesiredActor_Parms
{
	  class AActor* Actor;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimCanAimAtDesiredPoint_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimCanAimAtDesiredPoint_Parms
{
	  FVector Point;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimIsAimedAtDesired_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimIsAimedAtDesired_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetMovementUpperBodyAimBehavior_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetMovementUpperBodyAimBehavior_Parms
{
	  BYTE ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetUpperBodyAnimBehavior_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetUpperBodyAnimBehavior_Parms
{
	  BYTE ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventUnsetUpperBodyAnimBehavior_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_UnsetUpperBodyAnimBehavior_Parms
{
	  BYTE clientId;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventSetUpperBodyAnimBehavior_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_SetUpperBodyAnimBehavior_Parms
{
	  BYTE behavior;
	  BYTE clientId;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventFireWhereAiming_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_FireWhereAiming_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventDisableAim_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_DisableAim_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventSetAimUrgency_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_SetAimUrgency_Parms
{
	  BITFIELD Fast;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetAimRotation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetAimRotation_Parms
{
	  FRotator ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventSetLockAim_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_SetLockAim_Parms
{
	  BITFIELD NewValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetLockAim_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetLockAim_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventUnlockAim_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_UnlockAim_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventLockAim_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_LockAim_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAimToRotation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AimToRotation_Parms
{
	  FRotator DesiredRotation;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAimAtActor_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AimAtActor_Parms
{
	  class AActor* Target;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAimAtPoint_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AimAtPoint_Parms
{
	  FVector Point;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventDisableRagdoll_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_DisableRagdoll_Parms
{
	  BITFIELD bKeepHavokPhysics;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetRagdollSimulationTimeout_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetRagdollSimulationTimeout_Parms
{
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIsUnderhandThrowTo_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IsUnderhandThrowTo_Parms
{
	  FVector TargetLocation;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIsUnderhandThrow_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IsUnderhandThrow_Parms
{
	  FVector Origin;
	  FVector TargetLocation;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventSetThrowSide_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_SetThrowSide_Parms
{
	  BYTE inThrowSide;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventSetGrenadeTargetLocation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_SetGrenadeTargetLocation_Parms
{
	  FVector vInGrenadeTargetLocation;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetThrowAngle_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetThrowAngle_Parms
{
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetThrowOrigin_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetThrowOrigin_Parms
{
	  BITFIELD bIsUnderhandThrow;
	  FRotator Orientation;
	  FVector ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetThrowOriginOffset_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetThrowOriginOffset_Parms
{
	  BITFIELD bIsUnderhandThrow;
	  FRotator Orientation;
	  FVector ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventHasFiredWeaponEquipped_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_HasFiredWeaponEquipped_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventHasUsableWeapon_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_HasUsableWeapon_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventSetWeaponTargetLocation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_SetWeaponTargetLocation_Parms
{
	  FVector TargetLocation;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventSetWeaponTarget_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_SetWeaponTarget_Parms
{
	  class AActor* Target;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetFlinchAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetFlinchAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetTasedRecoveryAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetTasedRecoveryAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetTasedAffectedAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetTasedAffectedAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetTasedReactionAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetTasedReactionAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetStungRecoveryAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetStungRecoveryAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetStungAffectedAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetStungAffectedAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetStungReactionAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetStungReactionAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetGasRecoveryAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetGasRecoveryAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetGasAffectedAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetGasAffectedAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetGasReactionAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetGasReactionAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetFBRecoveryAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetFBRecoveryAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetFBAffectedAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetFBAffectedAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetFBReactionAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetFBReactionAnimation_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventSwapInCompliantAnimSet_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_SwapInCompliantAnimSet_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventSwapInRestrainedAnimSet_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_SwapInRestrainedAnimSet_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetTimeToWaitBeforeFiring_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetTimeToWaitBeforeFiring_Parms
{
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetTimeToWaitBetweenFiring_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetTimeToWaitBetweenFiring_Parms
{
	  class AFiredWeapon* Weapon;
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetDefaultAIFireModeForWeapon_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetDefaultAIFireModeForWeapon_Parms
{
	  class AFiredWeapon* Weapon;
	  BYTE ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventLatentAITriggerEffectEvent_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_LatentAITriggerEffectEvent_Parms
{
	  FName EffectEvent;
	  class AActor* Other;
	  class UMaterial* TargetMaterial;
	  FVector HitLocation;
	  FRotator HitNormal;
	  BITFIELD PlayOnOther;
	  BITFIELD MoveMouth;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventShouldPlayFullBodyHitAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_ShouldPlayFullBodyHitAnimation_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimPlayEquipment_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimPlayEquipment_Parms
{
	  BYTE AnimPlayType;
	  FName AnimName;
	  FLOAT TweenTime;
	  FName Bone;
	  FLOAT Rate;
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimPlayQuickHit_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimPlayQuickHit_Parms
{
	  FName AnimName;
	  FLOAT TweenTime;
	  FName Bone;
	  FLOAT Rate;
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimStopQuickHit_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimStopQuickHit_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetUpperBodyBone_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetUpperBodyBone_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimSetIdle_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimSetIdle_Parms
{
	  FName NewIdleAnimation;
	  FLOAT TweenTime;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimStopEquipment_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimStopEquipment_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimStopSpecial_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimStopSpecial_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimGetQuickHitChannel_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimGetQuickHitChannel_Parms
{
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventAnimGetSpecialChannel_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_AnimGetSpecialChannel_Parms
{
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetIdleCategory_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetIdleCategory_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventSetIdleCategory_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_SetIdleCategory_Parms
{
	  FName inIdleCategory;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventChooseIdle_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_ChooseIdle_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIsIdleCurrent_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IsIdleCurrent_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetSpeechManagerAction_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetSpeechManagerAction_Parms
{
	  class UCharacterSpeechManagerAction* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetCommanderAction_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetCommanderAction_Parms
{
	  class UCommanderAction* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIsDisabled_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IsDisabled_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIsRelevantToPlayerOrOfficers_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IsRelevantToPlayerOrOfficers_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventSetIsCompliant_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_SetIsCompliant_Parms
{
	  BITFIELD Status;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIsIntenseInjury_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IsIntenseInjury_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetInitialMorale_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetInitialMorale_Parms
{
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIsAggressive_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IsAggressive_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIsOtherActorAThreat_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IsOtherActorAThreat_Parms
{
	  class AActor* otherActor;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIsArrested_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IsArrested_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIsCompliant_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IsCompliant_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventCanBeUsedNow_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_CanBeUsedNow_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetArrester_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetArrester_Parms
{
	  class APawn* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetRestrainedHandcuffs_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetRestrainedHandcuffs_Parms
{
	  class AHandheldEquipment* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventCanIssueComplianceTo_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_CanIssueComplianceTo_Parms
{
	  class APawn* TargetPawn;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventIssueComplianceTo_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_IssueComplianceTo_Parms
{
	  class APawn* TargetPawn;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventNotifyBecameCompliant_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_NotifyBecameCompliant_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetViewPoint_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetViewPoint_Parms
{
	  FVector ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetViewDirection_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetViewDirection_Parms
{
	  FVector ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventFindRunToPoint_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_FindRunToPoint_Parms
{
	  FVector PointToRunAwayFrom;
	  FLOAT MinDistanceToRunAway;
	  class ANavigationPoint* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventDisableFavorCoveredPath_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_DisableFavorCoveredPath_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventEnableFavorCoveredPath_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_EnableFavorCoveredPath_Parms
{
	  TArray<class APawn*> otherPawnsToCoverFrom;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetCoverFinder_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetCoverFinder_Parms
{
	  class UAICoverFinder* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetKnowledge_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetKnowledge_Parms
{
	  class UAIKnowledge* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventDisableFavorLowThreatPath_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_DisableFavorLowThreatPath_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventEnableFavorLowThreatPath_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_EnableFavorLowThreatPath_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventDisableAwareness_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_DisableAwareness_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventGetAwareness_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_GetAwareness_Parms
{
	  class UAwarenessProxy* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventShouldForceOpenLockedDoors_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_ShouldForceOpenLockedDoors_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventClearPendingDoor_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_ClearPendingDoor_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventSetPendingDoor_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_SetPendingDoor_Parms
{
	  class ADoor* inPendingDoor;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventisVisible_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_isVisible_Parms
{
	  class APawn* TestPawn;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventEnableHearing_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_EnableHearing_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventDisableHearing_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_DisableHearing_Parms
{
	  BITFIELD bDisableHearingPermanently;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventEnableVision_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_EnableVision_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventDisableVision_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_DisableVision_Parms
{
	  BITFIELD bDisableVisionPermanently;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventUnregisterHearingNotification_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_UnregisterHearingNotification_Parms
{
	  class IIHearingNotification* Registrant;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventRegisterHearingNotification_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_RegisterHearingNotification_Parms
{
	  class IIHearingNotification* Registrant;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventUnregisterVisionNotification_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_UnregisterVisionNotification_Parms
{
	  class IIVisionNotification* Registrant;
};
// "event"	function whose parameters correspond to	"struct IISwatAI_eventRegisterVisionNotification_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatAI.uc"
struct IISwatAI_RegisterVisionNotification_Parms
{
	  class IIVisionNotification* Registrant;
};
// Enum EnemyState is declared in "..\SwatAICommon\Classes\ISwatEnemy.uc"
enum EnemyState
{
	 EnemyState_Unaware      =0,
	 EnemyState_Suspicious   =1,
	 EnemyState_Aware        =2,
	 EnemyState_MAX          =3,
};
// Enum EnemySkill is declared in "..\SwatAICommon\Classes\ISwatEnemy.uc"
enum EnemySkill
{
	 EnemySkill_Low          =0,
	 EnemySkill_Medium       =1,
	 EnemySkill_High         =2,
	 EnemySkill_MAX          =3,
};

// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventHasEvidence_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_HasEvidence_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventEnteredFleeSafeguard_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_EnteredFleeSafeguard_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventSpawnedFromGroup_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_SpawnedFromGroup_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventFindNearbyWeaponModel_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_FindNearbyWeaponModel_Parms
{
	  class AHandheldEquipmentModel* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventDropAllEvidence_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_DropAllEvidence_Parms
{
	  BITFIELD bIsDestroying;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventShouldDropWeaponInstantly_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_ShouldDropWeaponInstantly_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventThrowWeaponDown_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_ThrowWeaponDown_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventDropAllWeapons_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_DropAllWeapons_Parms
{
	  FVector WeaponSpaceDropDirection;
	  FLOAT DropImpulseMagnitude;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventDropActiveWeapon_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_DropActiveWeapon_Parms
{
	  FVector WeaponSpaceDropDirection;
	  FLOAT DropImpulseMagnitude;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventPickUpWeaponModel_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_PickUpWeaponModel_Parms
{
	  class AHandheldEquipmentModel* HHEModel;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventGetBackupWeapon_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_GetBackupWeapon_Parms
{
	  class AFiredWeapon* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventGetPrimaryWeapon_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_GetPrimaryWeapon_Parms
{
	  class AFiredWeapon* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventUnbecomeAThreat_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_UnbecomeAThreat_Parms
{
	  BITFIELD UseCooldown;
	  FLOAT CooldownDuration;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventBecomeAThreat_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_BecomeAThreat_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventIAmThreat_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_IAmThreat_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventIsAThreat_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_IsAThreat_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventGetEnemySpeechManagerAction_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_GetEnemySpeechManagerAction_Parms
{
	  class UEnemySpeechManagerAction* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventGetEnemyCommanderAction_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_GetEnemyCommanderAction_Parms
{
	  class UEnemyCommanderAction* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventStopSprinting_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_StopSprinting_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventStartSprinting_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_StartSprinting_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventGetEnemySkill_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_GetEnemySkill_Parms
{
	  BYTE ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventSetCurrentState_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_SetCurrentState_Parms
{
	  BYTE NewState;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventGetCurrentState_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_GetCurrentState_Parms
{
	  BYTE ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventRollBarricade_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_RollBarricade_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventRollInvestigate_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_RollInvestigate_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventStopInvestigating_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_StopInvestigating_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatEnemy_eventStartInvestigating_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatEnemy.uc"
struct IISwatEnemy_StartInvestigating_Parms
{
};

// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventClearFormation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_ClearFormation_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventSetCurrentFormation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_SetCurrentFormation_Parms
{
	  class UFormation* Formation;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventGetCurrentFormation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_GetCurrentFormation_Parms
{
	  class UFormation* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventSetDoorToBlowC2On_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_SetDoorToBlowC2On_Parms
{
	  class ADoor* TargetDoor;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventGetLauncherWhichFires_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_GetLauncherWhichFires_Parms
{
	  BYTE Slot;
	  class AFiredWeapon* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventHasLauncherWhichFires_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_HasLauncherWhichFires_Parms
{
	  BYTE Slot;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventHasTaser_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_HasTaser_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventInstantReEquipFiredWeapon_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_InstantReEquipFiredWeapon_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventReEquipFiredWeapon_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_ReEquipFiredWeapon_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventRemoveGivenEquipment_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_RemoveGivenEquipment_Parms
{
	  class AHandheldEquipment* Equipment;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventHasA_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_HasA_Parms
{
	  FName EquipmentClass;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventGetBackupWeapon_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_GetBackupWeapon_Parms
{
	  class AFiredWeapon* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventGetPrimaryWeapon_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_GetPrimaryWeapon_Parms
{
	  class AFiredWeapon* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventGetItemAtSlot_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_GetItemAtSlot_Parms
{
	  BYTE Slot;
	  class AHandheldEquipment* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventGetThrownWeapon_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_GetThrownWeapon_Parms
{
	  BYTE Slot;
	  class AThrownWeapon* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventGetIgnoreDoorBlocking_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_GetIgnoreDoorBlocking_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventSetIgnoreDoorBlocking_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_SetIgnoreDoorBlocking_Parms
{
	  BITFIELD NewDoorBlocking;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventIsOfficerTwo_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_IsOfficerTwo_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventIsOfficerOne_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_IsOfficerOne_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventIsBlueTeam_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_IsBlueTeam_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventIsRedTeam_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_IsRedTeam_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventPlayTurnAwayAnimation_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_PlayTurnAwayAnimation_Parms
{
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventGetOfficerSpeechManagerAction_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_GetOfficerSpeechManagerAction_Parms
{
	  class UOfficerSpeechManagerAction* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IISwatOfficer_eventGetOfficerCommanderAction_Parms"	is declared	in "..\SwatAICommon\Classes\ISwatOfficer.uc"
struct IISwatOfficer_GetOfficerCommanderAction_Parms
{
	  class UOfficerCommanderAction* ReturnValue;
};
// Struct FPatrolEntry	is declared	in "..\SwatAICommon\Classes\Patrolling\PatrolList.uc"
struct SWATAICOMMON_API FPatrolEntry
{
    FName PatrolPointName;
    FRange IdleTime;
    INT IdleChance;
    FName IdleCategory;
    class APatrolPoint* PatrolPoint;
};




// Struct FMoraleHistoryEntry	is declared	in "..\SwatAICommon\Classes\Actions\CommanderAction.uc"
struct SWATAICOMMON_API FMoraleHistoryEntry
{
    FLOAT ChangeAmount;
    FStringNoInit ReasonForChange;
};

// Constant kMoveAwayFromLocationGoalPriority is declared in "..\SwatAICommon\Classes\Actions\CommanderAction.uc"
#define UCONST_kMoveAwayFromLocationGoalPriority 94

// "event"	function whose parameters correspond to	"struct UCommanderAction_eventSetDebugBlackboardInfo_Parms"	is declared	in "..\SwatAICommon\Classes\Actions\CommanderAction.uc"
struct UCommanderAction_eventSetDebugBlackboardInfo_Parms
{
};
// "event"	function whose parameters correspond to	"struct UCommanderAction_eventSetDebugMoraleHistoryInfo_Parms"	is declared	in "..\SwatAICommon\Classes\Actions\CommanderAction.uc"
struct UCommanderAction_eventSetDebugMoraleHistoryInfo_Parms
{
};
// Constant kRotateToSuspiciousNoisePriority is declared in "..\SwatAICommon\Classes\Actions\EnemyCommanderAction.uc"
#define UCONST_kRotateToSuspiciousNoisePriority 55

// Constant kRunFromGunshotPriority is declared in "..\SwatAICommon\Classes\Actions\HostageCommanderAction.uc"
#define UCONST_kRunFromGunshotPriority 86

// Constant kRotateToFaceNoiseBehaviorPriority is declared in "..\SwatAICommon\Classes\Actions\OfficerCommanderAction.uc"
#define UCONST_kRotateToFaceNoiseBehaviorPriority 55


// Constant kMoveTowardMaxTime is declared in "..\SwatAICommon\Classes\Actions\TakeCoverAndAttackAction.uc"
#define UCONST_kMoveTowardMaxTime 2.0
// Constant kMoveTowardMinTime is declared in "..\SwatAICommon\Classes\Actions\TakeCoverAndAttackAction.uc"
#define UCONST_kMoveTowardMinTime 1.0


// Constant kMovementPointZOffset is declared in "..\SwatAICommon\Classes\Actions\MoveToActionBase.uc"
#define UCONST_kMovementPointZOffset 32.0
// Constant kMovementTimeOutFudge is declared in "..\SwatAICommon\Classes\Actions\MoveToActionBase.uc"
#define UCONST_kMovementTimeOutFudge 2.0

// "event"	function whose parameters correspond to	"struct UMoveToActionBase_eventSetMovement_Parms"	is declared	in "..\SwatAICommon\Classes\Actions\MoveToActionBase.uc"
struct UMoveToActionBase_eventSetMovement_Parms
{
	  BITFIELD bWalkWhileMoving;
	  BITFIELD bCrouchWhileMoving;
};
// "event"	function whose parameters correspond to	"struct UMoveToActionBase_eventShouldWalk_Parms"	is declared	in "..\SwatAICommon\Classes\Actions\MoveToActionBase.uc"
struct UMoveToActionBase_eventShouldWalk_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UMoveToActionBase_eventShouldStopMoving_Parms"	is declared	in "..\SwatAICommon\Classes\Actions\MoveToActionBase.uc"
struct UMoveToActionBase_eventShouldStopMoving_Parms
{
	  BITFIELD ReturnValue;
};
// Constant kHighSkillLevelErrorAngle is declared in "..\SwatAICommon\Classes\Actions\SwatWeaponAction.uc"
#define UCONST_kHighSkillLevelErrorAngle 0.0698
// Constant kMediumSkillLevelErrorAngle is declared in "..\SwatAICommon\Classes\Actions\SwatWeaponAction.uc"
#define UCONST_kMediumSkillLevelErrorAngle 0.1392
// Constant kLowSkillLevelErrorAngle is declared in "..\SwatAICommon\Classes\Actions\SwatWeaponAction.uc"
#define UCONST_kLowSkillLevelErrorAngle 0.2079

// Enum EStaircaseTravelDirection is declared in "..\SwatAICommon\Classes\Actions\AimAroundAction.uc"
enum EStaircaseTravelDirection
{
	 kStaircaseTravelDirectionNone=0,
	 kStaircaseTravelDirectionUp=1,
	 kStaircaseTravelDirectionDown=2,
};
// Enum EAimFov is declared in "..\SwatAICommon\Classes\Actions\AimAroundAction.uc"
enum EAimFov
{
	 kAimFovNone             =0,
	 kAimFovOuter            =1,
	 kAimFovInner            =2,
};
// Constant kAwarenessPointClosePenaltyDistance is declared in "..\SwatAICommon\Classes\Actions\AimAroundAction.uc"
#define UCONST_kAwarenessPointClosePenaltyDistance 192.0
// Constant kMaxFindAndAimAtPointAttempts is declared in "..\SwatAICommon\Classes\Actions\AimAroundAction.uc"
#define UCONST_kMaxFindAndAimAtPointAttempts 10
// Constant kStaircaseTravelDirectionSmallValue is declared in "..\SwatAICommon\Classes\Actions\AimAroundAction.uc"
#define UCONST_kStaircaseTravelDirectionSmallValue 8.0
// Constant kStaircaseAimPointMinZDiff is declared in "..\SwatAICommon\Classes\Actions\AimAroundAction.uc"
#define UCONST_kStaircaseAimPointMinZDiff 64.0




// Class	UAICoverFinder is declared in "..\SwatAICommon\Classes\AICoverFinder.uc"
class SWATAICOMMON_API	UAICoverFinder	: public UObject
{
public:
    class APawn* m_pawn;
	   DECLARE_FUNCTION(execIsLocationInCoverBehindActor);
	   DECLARE_FUNCTION(execIsLocationInCover);
	   DECLARE_FUNCTION(execFindCoverBehindActor);
	   DECLARE_FUNCTION(execFindCover);
	   DECLARE_FUNCTION(execIsCoverAvailable);
	   DECLARE_CLASS(UAICoverFinder,UObject,0,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UAICoverFinder)
};

// Class	ASwatAIRepository is declared in "..\SwatAICommon\Classes\SwatAIRepository.uc"
class SWATAICOMMON_API	ASwatAIRepository	: public AAIRepository
{
public:
    class AIdleActionsList* idleActions;
    class AInitialReactionsList* InitialReactions;
    TMap<FName,class UNavigationPointList*> RoomNavigationPoints;
    class ACharacterTypesList* CharacterTypes;
    class AElementSquadInfo* ElementSquad;
    class ARedSquadInfo* RedSquad;
    class ABlueSquadInfo* BlueSquad;
    class UHive* HiveMind;
    class APawn* CurrentEnemyInHostageConversation;
	   DECLARE_FUNCTION(execGetClosestUncompliantViewableAIInRoom);
	   DECLARE_FUNCTION(execDoesRoomContainAIs);
	   DECLARE_FUNCTION(execFindClosestOfNavigationPointClass);
	   DECLARE_FUNCTION(execFindAllOfNavigationPointClass);
	   DECLARE_FUNCTION(execGetClosestRoomNameToPoint);
	   DECLARE_FUNCTION(execGetRoomNavigationPointsOfType);
	   DECLARE_FUNCTION(execGetRoomNavigationPoints);
	   DECLARE_FUNCTION(execSetNavigationPointListForRoom);
	   DECLARE_FUNCTION(execGetBlueSquad);
	   DECLARE_FUNCTION(execGetRedSquad);
	   DECLARE_FUNCTION(execGetElementSquad);
	  class ANavigationPoint*	eventFindClosestOfNavigationPointClass(class UClass* ClassType, FVector testLocation, class UNavigationPointList* ExcludeList)
	  {
        ASwatAIRepository_eventFindClosestOfNavigationPointClass_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.ClassType=ClassType;
		   Parms.testLocation=testLocation;
		   Parms.ExcludeList=ExcludeList;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_FindClosestOfNavigationPointClass),&Parms);
		   return Parms.ReturnValue;
	  }
	  class UNavigationPointList*	eventFindAllOfNavigationPointClass(class UClass* ClassType, class UNavigationPointList* ExcludeList)
	  {
        ASwatAIRepository_eventFindAllOfNavigationPointClass_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.ClassType=ClassType;
		   Parms.ExcludeList=ExcludeList;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_FindAllOfNavigationPointClass),&Parms);
		   return Parms.ReturnValue;
	  }
	  class UNavigationPointList*	eventGetNewNavigationPointList()
	  {
        ASwatAIRepository_eventGetNewNavigationPointList_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_GetNewNavigationPointList),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventReleaseNavigationPointList(class UNavigationPointList* NavPointList)
	  {
        ASwatAIRepository_eventReleaseNavigationPointList_Parms Parms;
		   Parms.NavPointList=NavPointList;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_ReleaseNavigationPointList),&Parms);
	  }
	  class UNavigationPointList*	eventGetRoomNavigationPointsOfType(FName RoomName, FName PointClassName, FVector Location, FLOAT MinimumDistanceFromLocation)
	  {
        ASwatAIRepository_eventGetRoomNavigationPointsOfType_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.RoomName=RoomName;
		   Parms.PointClassName=PointClassName;
		   Parms.Location=Location;
		   Parms.MinimumDistanceFromLocation=MinimumDistanceFromLocation;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_GetRoomNavigationPointsOfType),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(ASwatAIRepository,AAIRepository,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(ASwatAIRepository)
};

// Class	ABaseDoorPoint is declared in "..\SwatAICommon\Classes\Navigation\BaseDoorPoint.uc"
class SWATAICOMMON_API	ABaseDoorPoint	: public APathNode
{
public:
    class ADoor* ParentDoor;
    INT Priority;
	   DECLARE_CLASS(ABaseDoorPoint,APathNode,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(ABaseDoorPoint)
};

// Class	AClearPoint is declared in "..\SwatAICommon\Classes\Navigation\ClearPoint.uc"
class SWATAICOMMON_API	AClearPoint	: public ABaseDoorPoint
{
public:
    class UTexture* ClearPointIcons[4];
    TArrayNoInit<class AClearRoutePoint*> ClearRoutePoints;
    TArrayNoInit<FVector> ClearPathLocations;
    FColor ClearPathColors[4];
	   DECLARE_CLASS(AClearPoint,ABaseDoorPoint,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(AClearPoint)
};

// Class	ALeftClearPoint is declared in "..\SwatAICommon\Classes\Navigation\LeftClearPoint.uc"
class SWATAICOMMON_API	ALeftClearPoint	: public AClearPoint
{
public:
	   DECLARE_CLASS(ALeftClearPoint,AClearPoint,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(ALeftClearPoint)
};

// Class	ARightClearPoint is declared in "..\SwatAICommon\Classes\Navigation\RightClearPoint.uc"
class SWATAICOMMON_API	ARightClearPoint	: public AClearPoint
{
public:
	   DECLARE_CLASS(ARightClearPoint,AClearPoint,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(ARightClearPoint)
};

// Class	AStackupPoint is declared in "..\SwatAICommon\Classes\Navigation\StackupPoint.uc"
class SWATAICOMMON_API	AStackupPoint	: public ABaseDoorPoint
{
public:
    class APawn* OfficerClaimer;
    class UTexture* StackupPointIcons[4];
    BITFIELD CanThrowFromPoint:1;
    BYTE ThrowSide;
    INT AlternatePriority;
    TArrayNoInit<FVector> StackupPathToDoor;
    class AActor* BlockedOpenLeft;
    class AActor* BlockedOpenRight;
	   DECLARE_CLASS(AStackupPoint,ABaseDoorPoint,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(AStackupPoint)
};

// Class	AAlternateStackupPoint is declared in "..\SwatAICommon\Classes\Navigation\AlternateStackupPoint.uc"
class SWATAICOMMON_API	AAlternateStackupPoint	: public AStackupPoint
{
public:
	   DECLARE_CLASS(AAlternateStackupPoint,AStackupPoint,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(AAlternateStackupPoint)
};

// Class	ALeftStackupPoint is declared in "..\SwatAICommon\Classes\Navigation\LeftStackupPoint.uc"
class SWATAICOMMON_API	ALeftStackupPoint	: public AStackupPoint
{
public:
	   DECLARE_CLASS(ALeftStackupPoint,AStackupPoint,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(ALeftStackupPoint)
};

// Class	ARightStackupPoint is declared in "..\SwatAICommon\Classes\Navigation\RightStackupPoint.uc"
class SWATAICOMMON_API	ARightStackupPoint	: public AStackupPoint
{
public:
	   DECLARE_CLASS(ARightStackupPoint,AStackupPoint,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(ARightStackupPoint)
};

// Class	AClearRoutePoint is declared in "..\SwatAICommon\Classes\Navigation\ClearRoutePoint.uc"
class SWATAICOMMON_API	AClearRoutePoint	: public APathNode
{
public:
    class AClearPoint* ClearPoint;
    INT ClearRoutePriority;
	   DECLARE_CLASS(AClearRoutePoint,APathNode,0|CLASS_Config,SwatAICommon)
	virtual void CheckForErrors();
	virtual void RenderEditorSelected(FLevelSceneNode* SceneNode,FRenderInterface* RI, FDynamicActor* FDA);
};

// Class	APatrolPoint is declared in "..\SwatAICommon\Classes\Patrolling\PatrolPoint.uc"
class SWATAICOMMON_API	APatrolPoint	: public APathNode
{
public:
    TArrayNoInit<class ASpawnerBase*> ReferringSpawners;
	   DECLARE_CLASS(APatrolPoint,APathNode,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(APatrolPoint)
};

// Class	APlacedThrowPoint is declared in "..\SwatAICommon\Classes\Navigation\PlacedThrowPoint.uc"
class SWATAICOMMON_API	APlacedThrowPoint	: public APathNode
{
public:
    BYTE ThrowSide;
	   DECLARE_CLASS(APlacedThrowPoint,APathNode,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(APlacedThrowPoint)
};

// Class	AOfficerTeamInfo is declared in "..\SwatAICommon\Classes\Squads\OfficerTeamInfo.uc"
class SWATAICOMMON_API	AOfficerTeamInfo	: public ASquadInfo
{
public:
    class ASwatAIRepository* SwatAIRepo;
    class USquadCommandGoal* CurrentSquadCommandGoal;
    BITFIELD bHoldCommand:1;
	  BITFIELD	eventCanMirror()
	  {
        AOfficerTeamInfo_eventCanMirror_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanMirror),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanDisable()
	  {
        AOfficerTeamInfo_eventCanDisable_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanDisable),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanDeployWedge(class ADoor* TargetDoor)
	  {
        AOfficerTeamInfo_eventCanDeployWedge_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.TargetDoor=TargetDoor;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanDeployWedge),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanDeployLightstick()
	  {
        AOfficerTeamInfo_eventCanDeployLightstick_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanDeployLightstick),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanDeployPepperBallGun()
	  {
        AOfficerTeamInfo_eventCanDeployPepperBallGun_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanDeployPepperBallGun),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanDeployGrenadeLauncher()
	  {
        AOfficerTeamInfo_eventCanDeployGrenadeLauncher_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanDeployGrenadeLauncher),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanDeployLessLethalShotgun()
	  {
        AOfficerTeamInfo_eventCanDeployLessLethalShotgun_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanDeployLessLethalShotgun),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanDeployTaser()
	  {
        AOfficerTeamInfo_eventCanDeployTaser_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanDeployTaser),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanDeployPepperSpray()
	  {
        AOfficerTeamInfo_eventCanDeployPepperSpray_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanDeployPepperSpray),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanDeployC2(class ADoor* TargetDoor, BITFIELD bLeftSide)
	  {
        AOfficerTeamInfo_eventCanDeployC2_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.TargetDoor=TargetDoor;
		   Parms.bLeftSide=bLeftSide;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanDeployC2),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanDeployShotgun(class ADoor* TargetDoor)
	  {
        AOfficerTeamInfo_eventCanDeployShotgun_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.TargetDoor=TargetDoor;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanDeployShotgun),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanDeployThrownItem(BYTE ThrownItemEquipmentSlot)
	  {
        AOfficerTeamInfo_eventCanDeployThrownItem_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.ThrownItemEquipmentSlot=ThrownItemEquipmentSlot;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanDeployThrownItem),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanLeaderThrowAndClear()
	  {
        AOfficerTeamInfo_eventCanLeaderThrowAndClear_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanLeaderThrowAndClear),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanStingAndClear()
	  {
        AOfficerTeamInfo_eventCanStingAndClear_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanStingAndClear),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanGasAndClear()
	  {
        AOfficerTeamInfo_eventCanGasAndClear_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanGasAndClear),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanBangAndClear()
	  {
        AOfficerTeamInfo_eventCanBangAndClear_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanBangAndClear),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanBreachLeaderThrowAndClear(BITFIELD bPlayerBelievesDoorLocked)
	  {
        AOfficerTeamInfo_eventCanBreachLeaderThrowAndClear_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.bPlayerBelievesDoorLocked=bPlayerBelievesDoorLocked;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanBreachLeaderThrowAndClear),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanBreachStingAndClear(BITFIELD bPlayerBelievesDoorLocked)
	  {
        AOfficerTeamInfo_eventCanBreachStingAndClear_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.bPlayerBelievesDoorLocked=bPlayerBelievesDoorLocked;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanBreachStingAndClear),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanBreachGasAndClear(BITFIELD bPlayerBelievesDoorLocked)
	  {
        AOfficerTeamInfo_eventCanBreachGasAndClear_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.bPlayerBelievesDoorLocked=bPlayerBelievesDoorLocked;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanBreachGasAndClear),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanBreachBangAndClear(BITFIELD bPlayerBelievesDoorLocked)
	  {
        AOfficerTeamInfo_eventCanBreachBangAndClear_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.bPlayerBelievesDoorLocked=bPlayerBelievesDoorLocked;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanBreachBangAndClear),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanBreachAndClear(BITFIELD bPlayerBelievesDoorLocked)
	  {
        AOfficerTeamInfo_eventCanBreachAndClear_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.bPlayerBelievesDoorLocked=bPlayerBelievesDoorLocked;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanBreachAndClear),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventDoesTeamHaveSufficientBreachingEquipment(INT BreachingMethod)
	  {
        AOfficerTeamInfo_eventDoesTeamHaveSufficientBreachingEquipment_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.BreachingMethod=BreachingMethod;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_DoesTeamHaveSufficientBreachingEquipment),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanBreachAndClearLockedDoor()
	  {
        AOfficerTeamInfo_eventCanBreachAndClearLockedDoor_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanBreachAndClearLockedDoor),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanPickLock()
	  {
        AOfficerTeamInfo_eventCanPickLock_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanPickLock),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventIsHoldingCommand()
	  {
        AOfficerTeamInfo_eventIsHoldingCommand_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_IsHoldingCommand),&Parms);
		   return Parms.ReturnValue;
	  }
	  class UAI_SquadResource*	eventGetSquadAI()
	  {
        AOfficerTeamInfo_eventGetSquadAI_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_GetSquadAI),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(AOfficerTeamInfo,ASquadInfo,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(AOfficerTeamInfo)
};

// Class	AColoredSquadInfo is declared in "..\SwatAICommon\Classes\Squads\ColoredSquadInfo.uc"
class SWATAICOMMON_API	AColoredSquadInfo	: public AOfficerTeamInfo
{
public:
    class ATimer* NeedOrdersTimer;
    FLOAT NeedOrdersTriggerTimeDelta;
	   DECLARE_CLASS(AColoredSquadInfo,AOfficerTeamInfo,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(AColoredSquadInfo)
};

// Class	ABlueSquadInfo is declared in "..\SwatAICommon\Classes\Squads\BlueSquadInfo.uc"
class SWATAICOMMON_API	ABlueSquadInfo	: public AColoredSquadInfo
{
public:
	   DECLARE_CLASS(ABlueSquadInfo,AColoredSquadInfo,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(ABlueSquadInfo)
};

// Class	ARedSquadInfo is declared in "..\SwatAICommon\Classes\Squads\RedSquadInfo.uc"
class SWATAICOMMON_API	ARedSquadInfo	: public AColoredSquadInfo
{
public:
	   DECLARE_CLASS(ARedSquadInfo,AColoredSquadInfo,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(ARedSquadInfo)
};

// Class	AElementSquadInfo is declared in "..\SwatAICommon\Classes\Squads\ElementSquadInfo.uc"
class SWATAICOMMON_API	AElementSquadInfo	: public AOfficerTeamInfo
{
public:
    class UElementSpeechManagerGoal* ElementSpeechManagerGoal;
    class UElementSpeechManagerAction* ElementSpeechManager;
	   DECLARE_CLASS(AElementSquadInfo,AOfficerTeamInfo,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(AElementSquadInfo)
};

// Class	AStaircaseAimPoint is declared in "..\SwatAICommon\Classes\StaircaseAimPoint.uc"
class SWATAICOMMON_API	AStaircaseAimPoint	: public AActor
{
public:
	   DECLARE_CLASS(AStaircaseAimPoint,AActor,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(AStaircaseAimPoint)
};

// Class	UHive is declared in "..\SwatAICommon\Classes\Squads\Hive.uc"
class SWATAICOMMON_API	UHive	: public UObject
{
public:
    class UHiveBlackboard* Blackboard;
    class ASwatAIRepository* SwatAIRepo;
    TArrayNoInit<class APawn*> HiveAwarenessPawns;
    class UAwarenessProxy* HiveAwareness;
    FLOAT AwarenessCounter;
    BITFIELD bAwarenessDisabled:1;
    TArrayNoInit<class UCachedEngageInfo*> CachedEngagements;
    FLOAT PlayerDamageThreshold;
    FLOAT CurrentPlayerDamage;
    BITFIELD bTriggeredFirstShotReaction:1;
    BITFIELD bTriggeredSecondShotReaction:1;
    BITFIELD bTriggeredThirdShotReaction:1;
    TArrayNoInit<class APawn*> ThreateningUncompliantAssignments;
    TArrayNoInit<class APawn*> NonThreateningUncompliantAssignments;
    FLOAT MaxWatchTargetDistance;
	   DECLARE_FUNCTION(execUpdateOfficerAssignments);
	   DECLARE_FUNCTION(execFindEngagingPointForOfficerInRoom);
	   DECLARE_FUNCTION(execSetEngagingPointForOfficer);
	   DECLARE_FUNCTION(execClearEngagingPointForOfficer);
	   DECLARE_FUNCTION(execGetOfficer);
	   DECLARE_FUNCTION(execGetNumOfficers);
	  void	eventClearOfficerEngagements(class APawn* Officer)
	  {
        UHive_eventClearOfficerEngagements_Parms Parms;
		   Parms.Officer=Officer;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_ClearOfficerEngagements),&Parms);
	  }
	  void	eventAssignOfficer(class APawn* Officer, class APawn* Assignment)
	  {
        UHive_eventAssignOfficer_Parms Parms;
		   Parms.Officer=Officer;
		   Parms.Assignment=Assignment;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_AssignOfficer),&Parms);
	  }
	  BITFIELD	eventCanAssignOfficerToTarget(class APawn* Officer, class APawn* Target)
	  {
        UHive_eventCanAssignOfficerToTarget_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Officer=Officer;
		   Parms.Target=Target;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_CanAssignOfficerToTarget),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(UHive,UObject,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UHive)
};

// Class	UHiveBlackboard is declared in "..\SwatAICommon\Classes\Squads\HiveBlackboard.uc"
class SWATAICOMMON_API	UHiveBlackboard	: public UObject
{
public:
    class APawn* PlayerEnemy;
    TArrayNoInit<class APawn*> EncounteredHostages;
    TArrayNoInit<class APawn*> EncounteredEnemies;
    TArrayNoInit<class APawn*> AssignedTargets;
    TArrayNoInit<class APawn*> CompliantAIs;
    TArrayNoInit<class APawn*> RestrainedAIs;
    TArrayNoInit<class APawn*> AIsBeingWatched;
    TMap<class ANavigationPoint*,class APawn*> EngagingPointMap;
	   DECLARE_FUNCTION(execHasAIBeenEncountered);
	   DECLARE_FUNCTION(execUpdateEnemy);
	   DECLARE_FUNCTION(execUpdateHostage);
	   DECLARE_CLASS(UHiveBlackboard,UObject,0,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UHiveBlackboard)
};

// Class	IISwatAI is declared in "..\SwatAICommon\Classes\ISwatAI.uc"
class SWATAICOMMON_API	IISwatAI	: public UObject
{
public:
	  class AStaircaseAimVolume* GetTouchingStaircaseAimVolumeAtIndex(INT Index)
	  {
        IISwatAI_GetTouchingStaircaseAimVolumeAtIndex_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Index=Index;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetTouchingStaircaseAimVolumeAtIndex),&Parms);
		   return Parms.ReturnValue;
	  }
	  INT GetNumTouchingStaircaseAimVolumes()
	  {
        IISwatAI_GetNumTouchingStaircaseAimVolumes_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetNumTouchingStaircaseAimVolumes),&Parms);
		   return Parms.ReturnValue;
	  }
	  void OnUntouchedStaircaseAimVolume(class AStaircaseAimVolume* StaircaseAimVolume)
	  {
        IISwatAI_OnUntouchedStaircaseAimVolume_Parms Parms;
		   Parms.StaircaseAimVolume=StaircaseAimVolume;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_OnUntouchedStaircaseAimVolume),&Parms);
	  }
	  void OnTouchedStaircaseAimVolume(class AStaircaseAimVolume* StaircaseAimVolume)
	  {
        IISwatAI_OnTouchedStaircaseAimVolume_Parms Parms;
		   Parms.StaircaseAimVolume=StaircaseAimVolume;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_OnTouchedStaircaseAimVolume),&Parms);
	  }
	  BITFIELD IsUnobservedByOfficers()
	  {
        IISwatAI_IsUnobservedByOfficers_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsUnobservedByOfficers),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsTurning()
	  {
        IISwatAI_IsTurning_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsTurning),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD CanPawnUseLowReady()
	  {
        IISwatAI_CanPawnUseLowReady_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_CanPawnUseLowReady),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD AnimAreAimingChannelsMuted()
	  {
        IISwatAI_AnimAreAimingChannelsMuted_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AnimAreAimingChannelsMuted),&Parms);
		   return Parms.ReturnValue;
	  }
	  void AnimSnapBaseToAim()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_AnimSnapBaseToAim),NULL);
	  }
	  FLOAT GetAnimBaseYaw()
	  {
        IISwatAI_GetAnimBaseYaw_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetAnimBaseYaw),&Parms);
		   return Parms.ReturnValue;
	  }
	  FRotator GetAimOrientation()
	  {
        IISwatAI_GetAimOrientation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetAimOrientation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FVector AnimGetAimOrigin()
	  {
        IISwatAI_AnimGetAimOrigin_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AnimGetAimOrigin),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD AnimIsWeaponAimSet()
	  {
        IISwatAI_AnimIsWeaponAimSet_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AnimIsWeaponAimSet),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD AnimCanAimAtDesiredRotation(FRotator Rotation)
	  {
        IISwatAI_AnimCanAimAtDesiredRotation_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Rotation=Rotation;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AnimCanAimAtDesiredRotation),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD AnimCanAimAtDesiredActor(class AActor* Actor)
	  {
        IISwatAI_AnimCanAimAtDesiredActor_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Actor=Actor;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AnimCanAimAtDesiredActor),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD AnimCanAimAtDesiredPoint(FVector Point)
	  {
        IISwatAI_AnimCanAimAtDesiredPoint_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Point=Point;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AnimCanAimAtDesiredPoint),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD AnimIsAimedAtDesired()
	  {
        IISwatAI_AnimIsAimedAtDesired_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AnimIsAimedAtDesired),&Parms);
		   return Parms.ReturnValue;
	  }
	  BYTE GetMovementUpperBodyAimBehavior()
	  {
        IISwatAI_GetMovementUpperBodyAimBehavior_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetMovementUpperBodyAimBehavior),&Parms);
		   return Parms.ReturnValue;
	  }
	  BYTE GetUpperBodyAnimBehavior()
	  {
        IISwatAI_GetUpperBodyAnimBehavior_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetUpperBodyAnimBehavior),&Parms);
		   return Parms.ReturnValue;
	  }
	  void UnsetUpperBodyAnimBehavior(BYTE clientId)
	  {
        IISwatAI_UnsetUpperBodyAnimBehavior_Parms Parms;
		   Parms.clientId=clientId;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_UnsetUpperBodyAnimBehavior),&Parms);
	  }
	  void SetUpperBodyAnimBehavior(BYTE behavior, BYTE clientId)
	  {
        IISwatAI_SetUpperBodyAnimBehavior_Parms Parms;
		   Parms.behavior=behavior;
		   Parms.clientId=clientId;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetUpperBodyAnimBehavior),&Parms);
	  }
	  BITFIELD FireWhereAiming()
	  {
        IISwatAI_FireWhereAiming_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_FireWhereAiming),&Parms);
		   return Parms.ReturnValue;
	  }
	  void DisableAim()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_DisableAim),NULL);
	  }
	  void SetAimUrgency(BITFIELD Fast)
	  {
        IISwatAI_SetAimUrgency_Parms Parms;
		   Parms.Fast=Fast;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetAimUrgency),&Parms);
	  }
	  FRotator GetAimRotation()
	  {
        IISwatAI_GetAimRotation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetAimRotation),&Parms);
		   return Parms.ReturnValue;
	  }
	  void SetLockAim(BITFIELD NewValue)
	  {
        IISwatAI_SetLockAim_Parms Parms;
		   Parms.NewValue=NewValue;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetLockAim),&Parms);
	  }
	  BITFIELD GetLockAim()
	  {
        IISwatAI_GetLockAim_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetLockAim),&Parms);
		   return Parms.ReturnValue;
	  }
	  void UnlockAim()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_UnlockAim),NULL);
	  }
	  void LockAim()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_LockAim),NULL);
	  }
	  void AimToRotation(FRotator DesiredRotation)
	  {
        IISwatAI_AimToRotation_Parms Parms;
		   Parms.DesiredRotation=DesiredRotation;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AimToRotation),&Parms);
	  }
	  void AimAtActor(class AActor* Target)
	  {
        IISwatAI_AimAtActor_Parms Parms;
		   Parms.Target=Target;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AimAtActor),&Parms);
	  }
	  void AimAtPoint(FVector Point)
	  {
        IISwatAI_AimAtPoint_Parms Parms;
		   Parms.Point=Point;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AimAtPoint),&Parms);
	  }
	  void DisableRagdoll(BITFIELD bKeepHavokPhysics)
	  {
        IISwatAI_DisableRagdoll_Parms Parms;
		   Parms.bKeepHavokPhysics=bKeepHavokPhysics;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_DisableRagdoll),&Parms);
	  }
	  FLOAT GetRagdollSimulationTimeout()
	  {
        IISwatAI_GetRagdollSimulationTimeout_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetRagdollSimulationTimeout),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsUnderhandThrowTo(FVector TargetLocation)
	  {
        IISwatAI_IsUnderhandThrowTo_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.TargetLocation=TargetLocation;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsUnderhandThrowTo),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsUnderhandThrow(FVector Origin, FVector TargetLocation)
	  {
        IISwatAI_IsUnderhandThrow_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Origin=Origin;
		   Parms.TargetLocation=TargetLocation;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsUnderhandThrow),&Parms);
		   return Parms.ReturnValue;
	  }
	  void SetThrowSide(BYTE inThrowSide)
	  {
        IISwatAI_SetThrowSide_Parms Parms;
		   Parms.inThrowSide=inThrowSide;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetThrowSide),&Parms);
	  }
	  void SetGrenadeTargetLocation(FVector vInGrenadeTargetLocation)
	  {
        IISwatAI_SetGrenadeTargetLocation_Parms Parms;
		   Parms.vInGrenadeTargetLocation=vInGrenadeTargetLocation;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetGrenadeTargetLocation),&Parms);
	  }
	  FLOAT GetThrowAngle()
	  {
        IISwatAI_GetThrowAngle_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetThrowAngle),&Parms);
		   return Parms.ReturnValue;
	  }
	  FVector GetThrowOrigin(BITFIELD bIsUnderhandThrow, FRotator Orientation)
	  {
        IISwatAI_GetThrowOrigin_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.bIsUnderhandThrow=bIsUnderhandThrow;
		   Parms.Orientation=Orientation;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetThrowOrigin),&Parms);
		   return Parms.ReturnValue;
	  }
	  FVector GetThrowOriginOffset(BITFIELD bIsUnderhandThrow, FRotator Orientation)
	  {
        IISwatAI_GetThrowOriginOffset_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.bIsUnderhandThrow=bIsUnderhandThrow;
		   Parms.Orientation=Orientation;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetThrowOriginOffset),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD HasFiredWeaponEquipped()
	  {
        IISwatAI_HasFiredWeaponEquipped_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_HasFiredWeaponEquipped),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD HasUsableWeapon()
	  {
        IISwatAI_HasUsableWeapon_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_HasUsableWeapon),&Parms);
		   return Parms.ReturnValue;
	  }
	  void SetWeaponTargetLocation(FVector TargetLocation)
	  {
        IISwatAI_SetWeaponTargetLocation_Parms Parms;
		   Parms.TargetLocation=TargetLocation;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetWeaponTargetLocation),&Parms);
	  }
	  void SetWeaponTarget(class AActor* Target)
	  {
        IISwatAI_SetWeaponTarget_Parms Parms;
		   Parms.Target=Target;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetWeaponTarget),&Parms);
	  }
	  FName GetFlinchAnimation()
	  {
        IISwatAI_GetFlinchAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetFlinchAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetTasedRecoveryAnimation()
	  {
        IISwatAI_GetTasedRecoveryAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetTasedRecoveryAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetTasedAffectedAnimation()
	  {
        IISwatAI_GetTasedAffectedAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetTasedAffectedAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetTasedReactionAnimation()
	  {
        IISwatAI_GetTasedReactionAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetTasedReactionAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetStungRecoveryAnimation()
	  {
        IISwatAI_GetStungRecoveryAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetStungRecoveryAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetStungAffectedAnimation()
	  {
        IISwatAI_GetStungAffectedAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetStungAffectedAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetStungReactionAnimation()
	  {
        IISwatAI_GetStungReactionAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetStungReactionAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetGasRecoveryAnimation()
	  {
        IISwatAI_GetGasRecoveryAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetGasRecoveryAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetGasAffectedAnimation()
	  {
        IISwatAI_GetGasAffectedAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetGasAffectedAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetGasReactionAnimation()
	  {
        IISwatAI_GetGasReactionAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetGasReactionAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetFBRecoveryAnimation()
	  {
        IISwatAI_GetFBRecoveryAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetFBRecoveryAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetFBAffectedAnimation()
	  {
        IISwatAI_GetFBAffectedAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetFBAffectedAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetFBReactionAnimation()
	  {
        IISwatAI_GetFBReactionAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetFBReactionAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  void SwapInCompliantAnimSet()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_SwapInCompliantAnimSet),NULL);
	  }
	  void SwapInRestrainedAnimSet()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_SwapInRestrainedAnimSet),NULL);
	  }
	  FLOAT GetTimeToWaitBeforeFiring()
	  {
        IISwatAI_GetTimeToWaitBeforeFiring_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetTimeToWaitBeforeFiring),&Parms);
		   return Parms.ReturnValue;
	  }
	  FLOAT GetTimeToWaitBetweenFiring(class AFiredWeapon* Weapon)
	  {
        IISwatAI_GetTimeToWaitBetweenFiring_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Weapon=Weapon;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetTimeToWaitBetweenFiring),&Parms);
		   return Parms.ReturnValue;
	  }
	  BYTE GetDefaultAIFireModeForWeapon(class AFiredWeapon* Weapon)
	  {
        IISwatAI_GetDefaultAIFireModeForWeapon_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Weapon=Weapon;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetDefaultAIFireModeForWeapon),&Parms);
		   return Parms.ReturnValue;
	  }
	  void LatentAITriggerEffectEvent(FName EffectEvent, class AActor* Other, class UMaterial* TargetMaterial, FVector HitLocation, FRotator HitNormal, BITFIELD PlayOnOther, BITFIELD MoveMouth)
	  {
        IISwatAI_LatentAITriggerEffectEvent_Parms Parms;
		   Parms.EffectEvent=EffectEvent;
		   Parms.Other=Other;
		   Parms.TargetMaterial=TargetMaterial;
		   Parms.HitLocation=HitLocation;
		   Parms.HitNormal=HitNormal;
		   Parms.PlayOnOther=PlayOnOther;
		   Parms.MoveMouth=MoveMouth;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_LatentAITriggerEffectEvent),&Parms);
	  }
	  BITFIELD ShouldPlayFullBodyHitAnimation()
	  {
        IISwatAI_ShouldPlayFullBodyHitAnimation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_ShouldPlayFullBodyHitAnimation),&Parms);
		   return Parms.ReturnValue;
	  }
	  INT AnimPlayEquipment(BYTE AnimPlayType, FName AnimName, FLOAT TweenTime, FName Bone, FLOAT Rate)
	  {
        IISwatAI_AnimPlayEquipment_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.AnimPlayType=AnimPlayType;
		   Parms.AnimName=AnimName;
		   Parms.TweenTime=TweenTime;
		   Parms.Bone=Bone;
		   Parms.Rate=Rate;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AnimPlayEquipment),&Parms);
		   return Parms.ReturnValue;
	  }
	  INT AnimPlayQuickHit(FName AnimName, FLOAT TweenTime, FName Bone, FLOAT Rate)
	  {
        IISwatAI_AnimPlayQuickHit_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.AnimName=AnimName;
		   Parms.TweenTime=TweenTime;
		   Parms.Bone=Bone;
		   Parms.Rate=Rate;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AnimPlayQuickHit),&Parms);
		   return Parms.ReturnValue;
	  }
	  void AnimStopQuickHit()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_AnimStopQuickHit),NULL);
	  }
	  FName GetUpperBodyBone()
	  {
        IISwatAI_GetUpperBodyBone_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetUpperBodyBone),&Parms);
		   return Parms.ReturnValue;
	  }
	  void AnimSetIdle(FName NewIdleAnimation, FLOAT TweenTime)
	  {
        IISwatAI_AnimSetIdle_Parms Parms;
		   Parms.NewIdleAnimation=NewIdleAnimation;
		   Parms.TweenTime=TweenTime;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AnimSetIdle),&Parms);
	  }
	  void AnimStopEquipment()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_AnimStopEquipment),NULL);
	  }
	  void AnimStopSpecial()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_AnimStopSpecial),NULL);
	  }
	  INT AnimGetQuickHitChannel()
	  {
        IISwatAI_AnimGetQuickHitChannel_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AnimGetQuickHitChannel),&Parms);
		   return Parms.ReturnValue;
	  }
	  INT AnimGetSpecialChannel()
	  {
        IISwatAI_AnimGetSpecialChannel_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_AnimGetSpecialChannel),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetIdleCategory()
	  {
        IISwatAI_GetIdleCategory_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetIdleCategory),&Parms);
		   return Parms.ReturnValue;
	  }
	  void SetIdleCategory(FName inIdleCategory)
	  {
        IISwatAI_SetIdleCategory_Parms Parms;
		   Parms.inIdleCategory=inIdleCategory;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetIdleCategory),&Parms);
	  }
	  void ChooseIdle()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_ChooseIdle),NULL);
	  }
	  BITFIELD IsIdleCurrent()
	  {
        IISwatAI_IsIdleCurrent_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsIdleCurrent),&Parms);
		   return Parms.ReturnValue;
	  }
	  class UCharacterSpeechManagerAction* GetSpeechManagerAction()
	  {
        IISwatAI_GetSpeechManagerAction_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetSpeechManagerAction),&Parms);
		   return Parms.ReturnValue;
	  }
	  class UCommanderAction* GetCommanderAction()
	  {
        IISwatAI_GetCommanderAction_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetCommanderAction),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsDisabled()
	  {
        IISwatAI_IsDisabled_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsDisabled),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsRelevantToPlayerOrOfficers()
	  {
        IISwatAI_IsRelevantToPlayerOrOfficers_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsRelevantToPlayerOrOfficers),&Parms);
		   return Parms.ReturnValue;
	  }
	  void SetIsCompliant(BITFIELD Status)
	  {
        IISwatAI_SetIsCompliant_Parms Parms;
		   Parms.Status=Status;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetIsCompliant),&Parms);
	  }
	  BITFIELD IsIntenseInjury()
	  {
        IISwatAI_IsIntenseInjury_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsIntenseInjury),&Parms);
		   return Parms.ReturnValue;
	  }
	  FLOAT GetInitialMorale()
	  {
        IISwatAI_GetInitialMorale_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetInitialMorale),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsAggressive()
	  {
        IISwatAI_IsAggressive_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsAggressive),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsOtherActorAThreat(class AActor* otherActor)
	  {
        IISwatAI_IsOtherActorAThreat_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.otherActor=otherActor;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsOtherActorAThreat),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsArrested()
	  {
        IISwatAI_IsArrested_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsArrested),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsCompliant()
	  {
        IISwatAI_IsCompliant_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsCompliant),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD CanBeUsedNow()
	  {
        IISwatAI_CanBeUsedNow_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_CanBeUsedNow),&Parms);
		   return Parms.ReturnValue;
	  }
	  class APawn* GetArrester()
	  {
        IISwatAI_GetArrester_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetArrester),&Parms);
		   return Parms.ReturnValue;
	  }
	  class AHandheldEquipment* GetRestrainedHandcuffs()
	  {
        IISwatAI_GetRestrainedHandcuffs_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetRestrainedHandcuffs),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD CanIssueComplianceTo(class APawn* TargetPawn)
	  {
        IISwatAI_CanIssueComplianceTo_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.TargetPawn=TargetPawn;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_CanIssueComplianceTo),&Parms);
		   return Parms.ReturnValue;
	  }
	  void IssueComplianceTo(class APawn* TargetPawn)
	  {
        IISwatAI_IssueComplianceTo_Parms Parms;
		   Parms.TargetPawn=TargetPawn;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IssueComplianceTo),&Parms);
	  }
	  void NotifyBecameCompliant()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_NotifyBecameCompliant),NULL);
	  }
	  FVector GetViewPoint()
	  {
        IISwatAI_GetViewPoint_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetViewPoint),&Parms);
		   return Parms.ReturnValue;
	  }
	  FVector GetViewDirection()
	  {
        IISwatAI_GetViewDirection_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetViewDirection),&Parms);
		   return Parms.ReturnValue;
	  }
	  class ANavigationPoint* FindRunToPoint(FVector PointToRunAwayFrom, FLOAT MinDistanceToRunAway)
	  {
        IISwatAI_FindRunToPoint_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.PointToRunAwayFrom=PointToRunAwayFrom;
		   Parms.MinDistanceToRunAway=MinDistanceToRunAway;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_FindRunToPoint),&Parms);
		   return Parms.ReturnValue;
	  }
	  void DisableFavorCoveredPath()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_DisableFavorCoveredPath),NULL);
	  }
	  void EnableFavorCoveredPath(TArray<class APawn*> otherPawnsToCoverFrom)
	  {
        IISwatAI_EnableFavorCoveredPath_Parms Parms;
		   Parms.otherPawnsToCoverFrom=otherPawnsToCoverFrom;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_EnableFavorCoveredPath),&Parms);
	  }
	  class UAICoverFinder* GetCoverFinder()
	  {
        IISwatAI_GetCoverFinder_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetCoverFinder),&Parms);
		   return Parms.ReturnValue;
	  }
	  class UAIKnowledge* GetKnowledge()
	  {
        IISwatAI_GetKnowledge_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetKnowledge),&Parms);
		   return Parms.ReturnValue;
	  }
	  void DisableFavorLowThreatPath()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_DisableFavorLowThreatPath),NULL);
	  }
	  void EnableFavorLowThreatPath()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_EnableFavorLowThreatPath),NULL);
	  }
	  void DisableAwareness()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_DisableAwareness),NULL);
	  }
	  class UAwarenessProxy* GetAwareness()
	  {
        IISwatAI_GetAwareness_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetAwareness),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD ShouldForceOpenLockedDoors()
	  {
        IISwatAI_ShouldForceOpenLockedDoors_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_ShouldForceOpenLockedDoors),&Parms);
		   return Parms.ReturnValue;
	  }
	  void ClearPendingDoor()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_ClearPendingDoor),NULL);
	  }
	  void SetPendingDoor(class ADoor* inPendingDoor)
	  {
        IISwatAI_SetPendingDoor_Parms Parms;
		   Parms.inPendingDoor=inPendingDoor;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetPendingDoor),&Parms);
	  }
	  BITFIELD isVisible(class APawn* TestPawn)
	  {
        IISwatAI_isVisible_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.TestPawn=TestPawn;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_isVisible),&Parms);
		   return Parms.ReturnValue;
	  }
	  void EnableHearing()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_EnableHearing),NULL);
	  }
	  void DisableHearing(BITFIELD bDisableHearingPermanently)
	  {
        IISwatAI_DisableHearing_Parms Parms;
		   Parms.bDisableHearingPermanently=bDisableHearingPermanently;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_DisableHearing),&Parms);
	  }
	  void EnableVision()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_EnableVision),NULL);
	  }
	  void DisableVision(BITFIELD bDisableVisionPermanently)
	  {
        IISwatAI_DisableVision_Parms Parms;
		   Parms.bDisableVisionPermanently=bDisableVisionPermanently;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_DisableVision),&Parms);
	  }
	  void UnregisterHearingNotification(class IIHearingNotification* Registrant)
	  {
        IISwatAI_UnregisterHearingNotification_Parms Parms;
		   Parms.Registrant=Registrant;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_UnregisterHearingNotification),&Parms);
	  }
	  void RegisterHearingNotification(class IIHearingNotification* Registrant)
	  {
        IISwatAI_RegisterHearingNotification_Parms Parms;
		   Parms.Registrant=Registrant;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_RegisterHearingNotification),&Parms);
	  }
	  void UnregisterVisionNotification(class IIVisionNotification* Registrant)
	  {
        IISwatAI_UnregisterVisionNotification_Parms Parms;
		   Parms.Registrant=Registrant;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_UnregisterVisionNotification),&Parms);
	  }
	  void RegisterVisionNotification(class IIVisionNotification* Registrant)
	  {
        IISwatAI_RegisterVisionNotification_Parms Parms;
		   Parms.Registrant=Registrant;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_RegisterVisionNotification),&Parms);
	  }
	   DECLARE_CLASS(IISwatAI,UObject,0|CLASS_Interface,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(IISwatAI)
};

// Class	IISwatEnemy is declared in "..\SwatAICommon\Classes\ISwatEnemy.uc"
class SWATAICOMMON_API	IISwatEnemy	: public UObject
{
public:
	  BITFIELD HasEvidence()
	  {
        IISwatEnemy_HasEvidence_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_HasEvidence),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD EnteredFleeSafeguard()
	  {
        IISwatEnemy_EnteredFleeSafeguard_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_EnteredFleeSafeguard),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName SpawnedFromGroup()
	  {
        IISwatEnemy_SpawnedFromGroup_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SpawnedFromGroup),&Parms);
		   return Parms.ReturnValue;
	  }
	  class AHandheldEquipmentModel* FindNearbyWeaponModel()
	  {
        IISwatEnemy_FindNearbyWeaponModel_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_FindNearbyWeaponModel),&Parms);
		   return Parms.ReturnValue;
	  }
	  void DropAllEvidence(BITFIELD bIsDestroying)
	  {
        IISwatEnemy_DropAllEvidence_Parms Parms;
		   Parms.bIsDestroying=bIsDestroying;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_DropAllEvidence),&Parms);
	  }
	  BITFIELD ShouldDropWeaponInstantly()
	  {
        IISwatEnemy_ShouldDropWeaponInstantly_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_ShouldDropWeaponInstantly),&Parms);
		   return Parms.ReturnValue;
	  }
	  void ThrowWeaponDown()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_ThrowWeaponDown),NULL);
	  }
	  void DropAllWeapons(FVector WeaponSpaceDropDirection, FLOAT DropImpulseMagnitude)
	  {
        IISwatEnemy_DropAllWeapons_Parms Parms;
		   Parms.WeaponSpaceDropDirection=WeaponSpaceDropDirection;
		   Parms.DropImpulseMagnitude=DropImpulseMagnitude;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_DropAllWeapons),&Parms);
	  }
	  void DropActiveWeapon(FVector WeaponSpaceDropDirection, FLOAT DropImpulseMagnitude)
	  {
        IISwatEnemy_DropActiveWeapon_Parms Parms;
		   Parms.WeaponSpaceDropDirection=WeaponSpaceDropDirection;
		   Parms.DropImpulseMagnitude=DropImpulseMagnitude;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_DropActiveWeapon),&Parms);
	  }
	  void PickUpWeaponModel(class AHandheldEquipmentModel* HHEModel)
	  {
        IISwatEnemy_PickUpWeaponModel_Parms Parms;
		   Parms.HHEModel=HHEModel;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_PickUpWeaponModel),&Parms);
	  }
	  class AFiredWeapon* GetBackupWeapon()
	  {
        IISwatEnemy_GetBackupWeapon_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetBackupWeapon),&Parms);
		   return Parms.ReturnValue;
	  }
	  class AFiredWeapon* GetPrimaryWeapon()
	  {
        IISwatEnemy_GetPrimaryWeapon_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetPrimaryWeapon),&Parms);
		   return Parms.ReturnValue;
	  }
	  void UnbecomeAThreat(BITFIELD UseCooldown, FLOAT CooldownDuration)
	  {
        IISwatEnemy_UnbecomeAThreat_Parms Parms;
		   Parms.UseCooldown=UseCooldown;
		   Parms.CooldownDuration=CooldownDuration;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_UnbecomeAThreat),&Parms);
	  }
	  void BecomeAThreat()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_BecomeAThreat),NULL);
	  }
	  BITFIELD IAmThreat()
	  {
        IISwatEnemy_IAmThreat_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IAmThreat),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsAThreat()
	  {
        IISwatEnemy_IsAThreat_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsAThreat),&Parms);
		   return Parms.ReturnValue;
	  }
	  class UEnemySpeechManagerAction* GetEnemySpeechManagerAction()
	  {
        IISwatEnemy_GetEnemySpeechManagerAction_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetEnemySpeechManagerAction),&Parms);
		   return Parms.ReturnValue;
	  }
	  class UEnemyCommanderAction* GetEnemyCommanderAction()
	  {
        IISwatEnemy_GetEnemyCommanderAction_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetEnemyCommanderAction),&Parms);
		   return Parms.ReturnValue;
	  }
	  void StopSprinting()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_StopSprinting),NULL);
	  }
	  void StartSprinting()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_StartSprinting),NULL);
	  }
	  BYTE GetEnemySkill()
	  {
        IISwatEnemy_GetEnemySkill_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetEnemySkill),&Parms);
		   return Parms.ReturnValue;
	  }
	  void SetCurrentState(BYTE NewState)
	  {
        IISwatEnemy_SetCurrentState_Parms Parms;
		   Parms.NewState=NewState;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetCurrentState),&Parms);
	  }
	  BYTE GetCurrentState()
	  {
        IISwatEnemy_GetCurrentState_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetCurrentState),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD RollBarricade()
	  {
        IISwatEnemy_RollBarricade_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_RollBarricade),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD RollInvestigate()
	  {
        IISwatEnemy_RollInvestigate_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_RollInvestigate),&Parms);
		   return Parms.ReturnValue;
	  }
	  void StopInvestigating()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_StopInvestigating),NULL);
	  }
	  void StartInvestigating()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_StartInvestigating),NULL);
	  }
	   DECLARE_CLASS(IISwatEnemy,UObject,0|CLASS_Interface,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(IISwatEnemy)
};

// Class	IISwatOfficer is declared in "..\SwatAICommon\Classes\ISwatOfficer.uc"
class SWATAICOMMON_API	IISwatOfficer	: public UObject
{
public:
	  void ClearFormation()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_ClearFormation),NULL);
	  }
	  void SetCurrentFormation(class UFormation* Formation)
	  {
        IISwatOfficer_SetCurrentFormation_Parms Parms;
		   Parms.Formation=Formation;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetCurrentFormation),&Parms);
	  }
	  class UFormation* GetCurrentFormation()
	  {
        IISwatOfficer_GetCurrentFormation_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetCurrentFormation),&Parms);
		   return Parms.ReturnValue;
	  }
	  void SetDoorToBlowC2On(class ADoor* TargetDoor)
	  {
        IISwatOfficer_SetDoorToBlowC2On_Parms Parms;
		   Parms.TargetDoor=TargetDoor;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetDoorToBlowC2On),&Parms);
	  }
	  class AFiredWeapon* GetLauncherWhichFires(BYTE Slot)
	  {
        IISwatOfficer_GetLauncherWhichFires_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Slot=Slot;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetLauncherWhichFires),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD HasLauncherWhichFires(BYTE Slot)
	  {
        IISwatOfficer_HasLauncherWhichFires_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Slot=Slot;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_HasLauncherWhichFires),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD HasTaser()
	  {
        IISwatOfficer_HasTaser_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_HasTaser),&Parms);
		   return Parms.ReturnValue;
	  }
	  void InstantReEquipFiredWeapon()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_InstantReEquipFiredWeapon),NULL);
	  }
	  void ReEquipFiredWeapon()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_ReEquipFiredWeapon),NULL);
	  }
	  void RemoveGivenEquipment(class AHandheldEquipment* Equipment)
	  {
        IISwatOfficer_RemoveGivenEquipment_Parms Parms;
		   Parms.Equipment=Equipment;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_RemoveGivenEquipment),&Parms);
	  }
	  BITFIELD HasA(FName EquipmentClass)
	  {
        IISwatOfficer_HasA_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.EquipmentClass=EquipmentClass;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_HasA),&Parms);
		   return Parms.ReturnValue;
	  }
	  class AFiredWeapon* GetBackupWeapon()
	  {
        IISwatOfficer_GetBackupWeapon_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetBackupWeapon),&Parms);
		   return Parms.ReturnValue;
	  }
	  class AFiredWeapon* GetPrimaryWeapon()
	  {
        IISwatOfficer_GetPrimaryWeapon_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetPrimaryWeapon),&Parms);
		   return Parms.ReturnValue;
	  }
	  class AHandheldEquipment* GetItemAtSlot(BYTE Slot)
	  {
        IISwatOfficer_GetItemAtSlot_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Slot=Slot;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetItemAtSlot),&Parms);
		   return Parms.ReturnValue;
	  }
	  class AThrownWeapon* GetThrownWeapon(BYTE Slot)
	  {
        IISwatOfficer_GetThrownWeapon_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Slot=Slot;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetThrownWeapon),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD GetIgnoreDoorBlocking()
	  {
        IISwatOfficer_GetIgnoreDoorBlocking_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetIgnoreDoorBlocking),&Parms);
		   return Parms.ReturnValue;
	  }
	  void SetIgnoreDoorBlocking(BITFIELD NewDoorBlocking)
	  {
        IISwatOfficer_SetIgnoreDoorBlocking_Parms Parms;
		   Parms.NewDoorBlocking=NewDoorBlocking;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_SetIgnoreDoorBlocking),&Parms);
	  }
	  BITFIELD IsOfficerTwo()
	  {
        IISwatOfficer_IsOfficerTwo_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsOfficerTwo),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsOfficerOne()
	  {
        IISwatOfficer_IsOfficerOne_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsOfficerOne),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsBlueTeam()
	  {
        IISwatOfficer_IsBlueTeam_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsBlueTeam),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD IsRedTeam()
	  {
        IISwatOfficer_IsRedTeam_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_IsRedTeam),&Parms);
		   return Parms.ReturnValue;
	  }
	  void PlayTurnAwayAnimation()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_PlayTurnAwayAnimation),NULL);
	  }
	  class UOfficerSpeechManagerAction* GetOfficerSpeechManagerAction()
	  {
        IISwatOfficer_GetOfficerSpeechManagerAction_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetOfficerSpeechManagerAction),&Parms);
		   return Parms.ReturnValue;
	  }
	  class UOfficerCommanderAction* GetOfficerCommanderAction()
	  {
        IISwatOfficer_GetOfficerCommanderAction_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(SWATAICOMMON_GetOfficerCommanderAction),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(IISwatOfficer,UObject,0|CLASS_Interface,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(IISwatOfficer)
};

// Class	UPatrolList is declared in "..\SwatAICommon\Classes\Patrolling\PatrolList.uc"
class SWATAICOMMON_API	UPatrolList	: public UObject
{
public:
    TArrayNoInit<FPatrolEntry> PatrolEntries;
    TArrayNoInit<FVector> PatrolPathLocations;
	   DECLARE_CLASS(UPatrolList,UObject,0,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UPatrolList)
};

// Class	UCachedEngageInfo is declared in "..\SwatAICommon\Classes\Squads\CachedEngageInfo.uc"
class SWATAICOMMON_API	UCachedEngageInfo	: public URefCount
{
public:
    class APawn* CachedOpponent;
    FName CachedRoomForEngaging;
    FLOAT CachedTime;
    TArrayNoInit<class ANavigationPoint*> CachedNavigationPointsForEngaging;
	   DECLARE_CLASS(UCachedEngageInfo,URefCount,0,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UCachedEngageInfo)
};

// Class	USwatCharacterAction is declared in "..\SwatAICommon\Classes\Actions\SwatCharacterAction.uc"
class SWATAICOMMON_API	USwatCharacterAction	: public UAI_CharacterAction
{
public:
    class APawn* m_pawn;
    class ALevelInfo* Level;
    FLOAT MinInitialDelayTime;
    FLOAT MaxInitialDelayTime;
	   DECLARE_CLASS(USwatCharacterAction,UAI_CharacterAction,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(USwatCharacterAction)
};

// Class	UCommanderAction is declared in "..\SwatAICommon\Classes\Actions\CommanderAction.uc"
class SWATAICOMMON_API	UCommanderAction	: public USwatCharacterAction
{
public:
    class UPatrolList* Patrol;
    BITFIELD bStartIncapacitated:1;
    FName StartIncapacitateIdleCategoryOverride;
    class URestrainedGoal* CurrentRestrainedGoal;
    class UFlashbangedGoal* CurrentFlashbangedGoal;
    class UGassedGoal* CurrentGassedGoal;
    class UPepperSprayedGoal* CurrentPepperSprayedGoal;
    class UPatrolGoal* CurrentPatrolGoal;
    class UIncapacitatedGoal* CurrentIncapacitatedGoal;
    class UIdleGoal* CurrentIdleGoal;
    class UReactToBeingShotGoal* CurrentReactToBeingShotGoal;
    class UTasedGoal* CurrentTasedGoal;
    class UStunnedByC2Goal* CurrentStunnedByC2Goal;
    class UStungGoal* CurrentStungGoal;
    class UMoveToActorGoal* CurrentMoveToActorGoal;
    class URotateTowardActorGoal* CurrentRotateTowardActorGoal;
    class URotateTowardRotationGoal* CurrentRotateTowardRotationGoal;
    class UAimAtTargetGoal* CurrentAimAtTargetGoal;
    class UAvoidLocationGoal* CurrentAvoidLocationGoal;
    class UHearingSensor* HearingSensor;
    class UVisionSensor* VisionSensor;
    class UThreatenedSensor* ThreatenedSensor;
    class UComplySensor* ComplySensor;
    TArrayNoInit<FMoraleHistoryEntry> MoraleHistory;
    FLOAT CurrentMorale;
    class UComplianceGoal* CurrentComplianceGoal;
    BITFIELD bListeningForCompliance:1;
    INT ComplianceOrdersIgnored;
    INT MaxComplianceOrdersToIgnore;
    FLOAT MaxMorale;
    class ATimer* ScreamTimer;
    FLOAT MinScreamTime;
    FLOAT MaxScreamTime;
    FLOAT MinReactToGunshotDistance;
	   DECLARE_FUNCTION(execIsIgnoringComplianceOrders);
	  void	eventSetDebugBlackboardInfo()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_SetDebugBlackboardInfo),NULL);
	  }
	  void	eventSetDebugMoraleHistoryInfo()
	  {
		   ProcessEvent(FindFunctionChecked(SWATAICOMMON_SetDebugMoraleHistoryInfo),NULL);
	  }
	   DECLARE_CLASS(UCommanderAction,USwatCharacterAction,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UCommanderAction)
};

// Class	UEnemyCommanderAction is declared in "..\SwatAICommon\Classes\Actions\EnemyCommanderAction.uc"
class SWATAICOMMON_API	UEnemyCommanderAction	: public UCommanderAction
{
public:
    class APawn* CurrentEnemy;
    class APawn* OldEnemy;
    class UInitialReactionGoal* CurrentInitialReactionGoal;
    class ATimer* LostPawnTimer;
    BITFIELD bHasHadInitialReactionChance:1;
    BITFIELD bWasSurprised:1;
    BITFIELD bReceivedUsableWeaponsMoralePenalty:1;
    BITFIELD bHasFledWithoutUsableWeapon:1;
    BITFIELD bIgnoreCurrentEnemy:1;
    class ADoor* LastBlockedDoor;
    INT BlockedDoorCount;
    INT MaxBlockedDoorCount;
    class UInvestigateGoal* CurrentInvestigateGoal;
    class UBarricadeGoal* CurrentBarricadeGoal;
    class UEngageOfficerGoal* CurrentEngageOfficerGoal;
    class UConverseWithHostagesGoal* CurrentConverseWithHostagesGoal;
    class UPickUpWeaponGoal* CurrentPickUpWeaponGoal;
    FLOAT LowSkillInitialReactionChance;
    FLOAT MediumSkillInitialReactionChance;
    FLOAT HighSkillInitialReactionChance;
    FLOAT MinDistanceToOfficersToDoInitialReaction;
    FLOAT LowSkillScreamChance;
    FLOAT MediumSkillScreamChance;
    FLOAT HighSkillScreamChance;
    FLOAT SurprisedComplianceAngle;
    FLOAT SurprisedComplianceDotProduct;
    FLOAT MaxSurprisedComplianceDistance;
    FLOAT LowSkillSurprisedComplianceMoraleModification;
    FLOAT MediumSkillSurprisedComplianceMoraleModification;
    FLOAT HighSkillSurprisedComplianceMoraleModification;
    FLOAT LowSkillWeaponDroppedMoraleModification;
    FLOAT MediumSkillWeaponDroppedMoraleModification;
    FLOAT HighSkillWeaponDroppedMoraleModification;
    FLOAT LowSkillFlashbangedMoraleModification;
    FLOAT MediumSkillFlashbangedMoraleModification;
    FLOAT HighSkillFlashbangedMoraleModification;
    FLOAT LowSkillGassedMoraleModification;
    FLOAT MediumSkillGassedMoraleModification;
    FLOAT HighSkillGassedMoraleModification;
    FLOAT LowSkillPepperSprayedMoraleModification;
    FLOAT MediumSkillPepperSprayedMoraleModification;
    FLOAT HighSkillPepperSprayedMoraleModification;
    FLOAT LowSkillStungMoraleModification;
    FLOAT MediumSkillStungMoraleModification;
    FLOAT HighSkillStungMoraleModification;
    FLOAT LowSkillTasedMoraleModification;
    FLOAT MediumSkillTasedMoraleModification;
    FLOAT HighSkillTasedMoraleModification;
    FLOAT LowSkillStunnedByC2MoraleModification;
    FLOAT MediumSkillStunnedByC2MoraleModification;
    FLOAT HighSkillStunnedByC2MoraleModification;
    FLOAT LowSkillShotMoraleModification;
    FLOAT MediumSkillShotMoraleModification;
    FLOAT HighSkillShotMoraleModification;
    FLOAT LowSkillKilledOfficerMoraleModification;
    FLOAT MediumSkillKilledOfficerMoraleModification;
    FLOAT HighSkillKilledOfficerMoraleModification;
    FLOAT LowSkillNearbyEnemyKilledMoraleModification;
    FLOAT MediumSkillNearbyEnemyKilledMoraleModification;
    FLOAT HighSkillNearbyEnemyKilledMoraleModification;
    FLOAT LowSkillOutOfUsableWeaponsMoraleModification;
    FLOAT MediumSkillOutOfUsableWeaponsMoraleModification;
    FLOAT HighSkillOutOfUsableWeaponsMoraleModification;
    FLOAT UnobservedComplianceMoraleModification;
    FLOAT LeaveCompliantStateMoraleThreshold;
    FLOAT DeltaDistanceToSwitchEnemies;
    FLOAT LowSkillReactToThrownGrenadeChance;
    FLOAT MediumSkillReactToThrownGrenadeChance;
    FLOAT HighSkillReactToThrownGrenadeChance;
    FLOAT MinLostPawnDeltaTime;
    FLOAT MaxLostPawnDeltaTime;
	   DECLARE_CLASS(UEnemyCommanderAction,UCommanderAction,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UEnemyCommanderAction)
};

// Class	UHostageCommanderAction is declared in "..\SwatAICommon\Classes\Actions\HostageCommanderAction.uc"
class SWATAICOMMON_API	UHostageCommanderAction	: public UCommanderAction
{
public:
    class UCowerGoal* CurrentCowerGoal;
    class APawn* Rescuer;
    class UHostageReactionToOfficersGoal* CurrentHostageReactionToOfficersGoal;
    BITFIELD bWasInDanger:1;
    FLOAT DangerUpdateTime;
    FLOAT RescuerUpdateTime;
    FLOAT FlashbangedMoraleModification;
    FLOAT GassedMoraleModification;
    FLOAT PepperSprayedMoraleModification;
    FLOAT StungMoraleModification;
    FLOAT TasedMoraleModification;
    FLOAT StunnedByC2MoraleModification;
    FLOAT ShotMoraleModification;
    FLOAT ReactToThrownGrenadeChance;
    FLOAT ScreamChance;
    FLOAT PassiveCrouchWhenHearsDeadlyNoiseChance;
    FLOAT AggressiveCrouchWhenHearsDeadlyNoiseChance;
    BITFIELD bHasHeardFirstDeadlyNoise:1;
    FLOAT NextTimeToPlayInDangerSpeech;
    FLOAT MinDeltaTimeToPlayInDangerSpeech;
    FLOAT MaxDeltaTimeToPlayInDangerSpeech;
	   DECLARE_CLASS(UHostageCommanderAction,UCommanderAction,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UHostageCommanderAction)
};

// Class	UOfficerCommanderAction is declared in "..\SwatAICommon\Classes\Actions\OfficerCommanderAction.uc"
class SWATAICOMMON_API	UOfficerCommanderAction	: public UCommanderAction
{
public:
    class UHive* HiveMind;
    class APawn* CurrentAssignment;
    BITFIELD bHasEngaged:1;
    class UEngageForComplianceGoal* CurrentEngageForComplianceGoal;
    class UAttackEnemyGoal* CurrentAttackEnemyGoal;
    class UIdleAimAroundGoal* CurrentIdleAimAroundGoal;
    class UWatchNonHostileTargetGoal* CurrentWatchNonHostileTargetGoal;
    class URotateTowardRotationGoal* CurrentRotateTowardRotationGoal;
    FLOAT MinAimAtNoiseWhileMovingTime;
    FLOAT MaxAimAtNoiseWhileMovingTime;
    FLOAT MinFinishedEngagingTimeToAimAround;
    FLOAT MaxFinishedEngagingTimeToAimAround;
	   DECLARE_FUNCTION(execGetCurrentAssignment);
	   DECLARE_CLASS(UOfficerCommanderAction,UCommanderAction,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UOfficerCommanderAction)
};

// Class	UTakeCoverAction is declared in "..\SwatAICommon\Classes\Actions\TakeCoverAction.uc"
class SWATAICOMMON_API	UTakeCoverAction	: public USwatCharacterAction
{
public:
    class UAICoverFinder* AICoverFinder;
    BITFIELD m_tookCover:1;
    FAICoverResult CoverResult;
    class UMoveToLocationGoal* CurrentMoveToLocationGoal;
	   DECLARE_CLASS(UTakeCoverAction,USwatCharacterAction,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UTakeCoverAction)
};

// Class	UTakeCoverAndAttackAction is declared in "..\SwatAICommon\Classes\Actions\TakeCoverAndAttackAction.uc"
class SWATAICOMMON_API	UTakeCoverAndAttackAction	: public UTakeCoverAction
{
public:
    class UAttackTargetGoal* CurrentAttackTargetGoal;
    class URotateTowardRotationGoal* CurrentRotateTowardRotationGoal;
    class UMoveToOpponentGoal* CurrentMoveToOpponentGoal;
    class UAimAroundGoal* CurrentAimAroundGoal;
    FLOAT LowSkillAttackWhileTakingCoverChance;
    FLOAT MediumSkillAttackWhileTakingCoverChance;
    FLOAT HighSkillAttackWhileTakingCoverChance;
    FLOAT MinCrouchTime;
    FLOAT MaxCrouchTime;
    FLOAT MinStandTime;
    FLOAT MaxStandTime;
    FLOAT MinLeanTime;
    FLOAT MaxLeanTime;
    FLOAT MinPassiveTakeCoverAndAttackPercentageChance;
    FLOAT MaxPassiveTakeCoverAndAttackPercentageChance;
    FLOAT MinAggressiveTakeCoverAndAttackPercentageChance;
    FLOAT MaxAggressiveTakeCoverAndAttackPercentageChance;
    FLOAT LowSkillSuccessAfterFiringChance;
    FLOAT MediumSkillSuccessAfterFiringChance;
    FLOAT HighSkillSuccessAfterFiringChance;
    FRotator AttackRotation;
    BYTE AttackLeanState;
    BYTE AttackCoverLocationType;
    TArrayNoInit<class APawn*> CachedSeenPawns;
    class UDistanceToOfficersSensor* DistanceToOfficersSensor;
    FLOAT MinDistanceToOfficersWhileTakingCover;
    FLOAT MoveBrieflyChance;
    FLOAT MoveBrieflyChanceIncrement;
    FLOAT AimAroundInnerFovDegrees;
    FLOAT AimAroundOuterFovDegrees;
    FLOAT AimAroundMinAimTime;
    FLOAT AimAroundMaxAimTime;
	   DECLARE_CLASS(UTakeCoverAndAttackAction,UTakeCoverAction,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UTakeCoverAndAttackAction)
};

// Class	USwatMovementAction is declared in "..\SwatAICommon\Classes\Actions\SwatMovementAction.uc"
class SWATAICOMMON_API	USwatMovementAction	: public UAI_MovementAction
{
public:
    class APawn* m_pawn;
    class ALevelInfo* Level;
	   DECLARE_CLASS(USwatMovementAction,UAI_MovementAction,0,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(USwatMovementAction)
};

// Class	UMoveToActionBase is declared in "..\SwatAICommon\Classes\Actions\MoveToActionBase.uc"
class SWATAICOMMON_API	UMoveToActionBase	: public USwatMovementAction
{
public:
    BITFIELD bHasRotatedTowardFirstPoint:1;
    BITFIELD bWasAvoidingCollision:1;
    BITFIELD bIsMoving:1;
    FLOAT MovementTimeOut;
    BITFIELD bShouldCrouch:1;
    FLOAT MoveToThreshold;
    BITFIELD bRotateTowardsFirstPoint:1;
    BITFIELD bRotateTowardsPointsDuringMovement:1;
    BITFIELD bAcceptNearbyPath:1;
    BITFIELD bShouldCloseOpenedDoors:1;
    BITFIELD bShouldNotCloseInitiallyOpenDoors:1;
    BITFIELD bAllowDirectMoveFailure:1;
    BITFIELD bUseCoveredPaths:1;
    BITFIELD bOpenDoorsFrantically:1;
    BITFIELD bUseNavigationDistanceOnSensor:1;
    BITFIELD bShouldSucceedWhenDestinationBlocked:1;
    FLOAT WalkThreshold;
    class AActor* WalkThresholdTarget;
    FLOAT OriginalMoveToThreshold;
    FLOAT OverriddenMoveToThreshold;
    class UOpenDoorGoal* CurrentOpenDoorGoal;
    class UCloseDoorGoal* CurrentCloseDoorGoal;
    class UDistanceSensor* DistanceSensor;
	   DECLARE_FUNCTION(execFindPathToLocation);
	   DECLARE_FUNCTION(execFindPathToActor);
	   DECLARE_FUNCTION(execMoveTowardLocation);
	   DECLARE_FUNCTION(execMoveTowardActor);
	  void	eventSetMovement(BITFIELD bWalkWhileMoving, BITFIELD bCrouchWhileMoving)
	  {
        UMoveToActionBase_eventSetMovement_Parms Parms;
		   Parms.bWalkWhileMoving=bWalkWhileMoving;
		   Parms.bCrouchWhileMoving=bCrouchWhileMoving;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_SetMovement),&Parms);
	  }
	  BITFIELD	eventShouldWalk()
	  {
        UMoveToActionBase_eventShouldWalk_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_ShouldWalk),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventShouldStopMoving()
	  {
        UMoveToActionBase_eventShouldStopMoving_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(SWATAICOMMON_ShouldStopMoving),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(UMoveToActionBase,USwatMovementAction,0,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UMoveToActionBase)
};

// Class	USwatWeaponAction is declared in "..\SwatAICommon\Classes\Actions\SwatWeaponAction.uc"
class SWATAICOMMON_API	USwatWeaponAction	: public UAI_WeaponAction
{
public:
    class ALevelInfo* Level;
    class APawn* m_pawn;
	   DECLARE_CLASS(USwatWeaponAction,UAI_WeaponAction,0,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(USwatWeaponAction)
};

// Class	UAimAroundAction is declared in "..\SwatAICommon\Classes\Actions\AimAroundAction.uc"
class SWATAICOMMON_API	UAimAroundAction	: public USwatWeaponAction
{
public:
    FLOAT MinAimAtPointTime;
    FLOAT MaxAimAtPointTime;
    FLOAT MinWaitForNewPointTime;
    FLOAT MaxWaitForNewPointTime;
    BITFIELD bDoOnce:1;
    BITFIELD bOnlyAimIfMoving:1;
    FLOAT ExtraDoorWeight;
    BITFIELD bAimWeapon:1;
    BITFIELD bUseUpperBodyProcedurally:1;
    BITFIELD bAimOnlyIfCharacterResourcesAvailable:1;
    BYTE UpperBodyAnimBehaviorClientId;
    FLOAT AimInnerFovDot;
    FLOAT AimOuterFovDot;
    FLOAT PointTooCloseRadius;
    BITFIELD bInitialDelay:1;
    FLOAT MinInitialDelayTime;
    FLOAT MaxInitialDelayTime;
    FLOAT StairCasePointWeight;
    BITFIELD bForceReevaluation:1;
    FLOAT AimAtPointDuration;
    class AActor* CurrentAimPoint;
    BYTE CurrentUpperBodyAnimBehavior;
    TArrayNoInit<class APawn*> FriendlyPawns;
    BYTE StaircaseTravelDirectionForCurrentAimPoint;
    BITFIELD PawnIsMoving:1;
    FVector PawnDirectionNormal;
    FVector CurrentAimDirectionNormal;
    TArrayNoInit<FVector> FriendlyPawnDirectionNormals;
	   DECLARE_FUNCTION(execShouldContinueAimingAtCurrentPoint);
	   DECLARE_FUNCTION(execGetStaircaseTravelDirection);
	   DECLARE_FUNCTION(execGetZDiffFromPawnToActor);
	   DECLARE_FUNCTION(execIsPointTooClose);
	   DECLARE_CLASS(UAimAroundAction,USwatWeaponAction,0,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UAimAroundAction)
};

// Class	UUseOptiwandAction is declared in "..\SwatAICommon\Classes\Actions\UseOptiwandAction.uc"
class SWATAICOMMON_API	UUseOptiwandAction	: public USwatWeaponAction
{
public:
    class AHandheldEquipment* Optiwand;
    BITFIELD bUseOverloadedViewOrigin:1;
    FVector OverloadedViewOrigin;
    BITFIELD bMirrorAroundCorner:1;
    FVector OptiwandViewDirection;
    TArrayNoInit<class APawn*> SeenPawns;
    FLOAT OptiwandUseTweenTime;
	   DECLARE_FUNCTION(execLookForPawnsUsingOptiwand);
	   DECLARE_CLASS(UUseOptiwandAction,USwatWeaponAction,0|CLASS_Config,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UUseOptiwandAction)
};

// Class	USwatCharacterGoal is declared in "..\SwatAICommon\Classes\Goals\SwatCharacterGoal.uc"
class SWATAICOMMON_API	USwatCharacterGoal	: public UAI_CharacterGoal
{
public:
	   DECLARE_CLASS(USwatCharacterGoal,UAI_CharacterGoal,0,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(USwatCharacterGoal)
};

// Class	UCommanderGoal is declared in "..\SwatAICommon\Classes\Goals\CommanderGoal.uc"
class SWATAICOMMON_API	UCommanderGoal	: public USwatCharacterGoal
{
public:
    class UPatrolList* Patrol;
    BITFIELD bStartIncapacitated:1;
    FName StartIncapacitateIdleCategoryOverride;
	   DECLARE_CLASS(UCommanderGoal,USwatCharacterGoal,0,SwatAICommon)
	   NO_DEFAULT_CONSTRUCTOR(UCommanderGoal)
};

#endif

AUTOGENERATE_FUNCTION(UAICoverFinder,-1,execIsLocationInCoverBehindActor);
AUTOGENERATE_FUNCTION(UAICoverFinder,-1,execIsLocationInCover);
AUTOGENERATE_FUNCTION(UAICoverFinder,-1,execFindCoverBehindActor);
AUTOGENERATE_FUNCTION(UAICoverFinder,-1,execFindCover);
AUTOGENERATE_FUNCTION(UAICoverFinder,-1,execIsCoverAvailable);
AUTOGENERATE_FUNCTION(UAimAroundAction,-1,execShouldContinueAimingAtCurrentPoint);
AUTOGENERATE_FUNCTION(UAimAroundAction,-1,execGetStaircaseTravelDirection);
AUTOGENERATE_FUNCTION(UAimAroundAction,-1,execGetZDiffFromPawnToActor);
AUTOGENERATE_FUNCTION(UAimAroundAction,-1,execIsPointTooClose);
AUTOGENERATE_FUNCTION(UCommanderAction,-1,execIsIgnoringComplianceOrders);
AUTOGENERATE_FUNCTION(UHive,-1,execUpdateOfficerAssignments);
AUTOGENERATE_FUNCTION(UHive,-1,execFindEngagingPointForOfficerInRoom);
AUTOGENERATE_FUNCTION(UHive,-1,execSetEngagingPointForOfficer);
AUTOGENERATE_FUNCTION(UHive,-1,execClearEngagingPointForOfficer);
AUTOGENERATE_FUNCTION(UHive,-1,execGetOfficer);
AUTOGENERATE_FUNCTION(UHive,-1,execGetNumOfficers);
AUTOGENERATE_FUNCTION(UHiveBlackboard,-1,execHasAIBeenEncountered);
AUTOGENERATE_FUNCTION(UHiveBlackboard,-1,execUpdateEnemy);
AUTOGENERATE_FUNCTION(UHiveBlackboard,-1,execUpdateHostage);
AUTOGENERATE_FUNCTION(UMoveToActionBase,-1,execFindPathToLocation);
AUTOGENERATE_FUNCTION(UMoveToActionBase,-1,execFindPathToActor);
AUTOGENERATE_FUNCTION(UMoveToActionBase,-1,execMoveTowardLocation);
AUTOGENERATE_FUNCTION(UMoveToActionBase,-1,execMoveTowardActor);
AUTOGENERATE_FUNCTION(UOfficerCommanderAction,-1,execGetCurrentAssignment);
AUTOGENERATE_FUNCTION(ASwatAIRepository,-1,execGetClosestUncompliantViewableAIInRoom);
AUTOGENERATE_FUNCTION(ASwatAIRepository,-1,execDoesRoomContainAIs);
AUTOGENERATE_FUNCTION(ASwatAIRepository,-1,execFindClosestOfNavigationPointClass);
AUTOGENERATE_FUNCTION(ASwatAIRepository,-1,execFindAllOfNavigationPointClass);
AUTOGENERATE_FUNCTION(ASwatAIRepository,-1,execGetClosestRoomNameToPoint);
AUTOGENERATE_FUNCTION(ASwatAIRepository,-1,execGetRoomNavigationPointsOfType);
AUTOGENERATE_FUNCTION(ASwatAIRepository,-1,execGetRoomNavigationPoints);
AUTOGENERATE_FUNCTION(ASwatAIRepository,-1,execSetNavigationPointListForRoom);
AUTOGENERATE_FUNCTION(ASwatAIRepository,-1,execGetBlueSquad);
AUTOGENERATE_FUNCTION(ASwatAIRepository,-1,execGetRedSquad);
AUTOGENERATE_FUNCTION(ASwatAIRepository,-1,execGetElementSquad);
AUTOGENERATE_FUNCTION(UUseOptiwandAction,-1,execLookForPawnsUsingOptiwand);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack	(pop)
#endif

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(UAICoverFinder)
VERIFY_CLASS_SIZE_NODIE(UAimAroundAction)
VERIFY_CLASS_SIZE_NODIE(AAlternateStackupPoint)
VERIFY_CLASS_SIZE_NODIE(ABaseDoorPoint)
VERIFY_CLASS_SIZE_NODIE(ABlueSquadInfo)
VERIFY_CLASS_SIZE_NODIE(UCachedEngageInfo)
VERIFY_CLASS_SIZE_NODIE(AClearPoint)
VERIFY_CLASS_SIZE_NODIE(AClearRoutePoint)
VERIFY_CLASS_SIZE_NODIE(AColoredSquadInfo)
VERIFY_CLASS_SIZE_NODIE(UCommanderAction)
VERIFY_CLASS_SIZE_NODIE(UCommanderGoal)
VERIFY_CLASS_SIZE_NODIE(AElementSquadInfo)
VERIFY_CLASS_SIZE_NODIE(UEnemyCommanderAction)
VERIFY_CLASS_SIZE_NODIE(UHive)
VERIFY_CLASS_SIZE_NODIE(UHiveBlackboard)
VERIFY_CLASS_SIZE_NODIE(UHostageCommanderAction)
VERIFY_CLASS_SIZE_NODIE(IISwatAI)
VERIFY_CLASS_SIZE_NODIE(IISwatEnemy)
VERIFY_CLASS_SIZE_NODIE(IISwatOfficer)
VERIFY_CLASS_SIZE_NODIE(ALeftClearPoint)
VERIFY_CLASS_SIZE_NODIE(ALeftStackupPoint)
VERIFY_CLASS_SIZE_NODIE(UMoveToActionBase)
VERIFY_CLASS_SIZE_NODIE(UOfficerCommanderAction)
VERIFY_CLASS_SIZE_NODIE(AOfficerTeamInfo)
VERIFY_CLASS_SIZE_NODIE(UPatrolList)
VERIFY_CLASS_SIZE_NODIE(APatrolPoint)
VERIFY_CLASS_SIZE_NODIE(APlacedThrowPoint)
VERIFY_CLASS_SIZE_NODIE(ARedSquadInfo)
VERIFY_CLASS_SIZE_NODIE(ARightClearPoint)
VERIFY_CLASS_SIZE_NODIE(ARightStackupPoint)
VERIFY_CLASS_SIZE_NODIE(AStackupPoint)
VERIFY_CLASS_SIZE_NODIE(AStaircaseAimPoint)
VERIFY_CLASS_SIZE_NODIE(ASwatAIRepository)
VERIFY_CLASS_SIZE_NODIE(USwatCharacterAction)
VERIFY_CLASS_SIZE_NODIE(USwatCharacterGoal)
VERIFY_CLASS_SIZE_NODIE(USwatMovementAction)
VERIFY_CLASS_SIZE_NODIE(USwatWeaponAction)
VERIFY_CLASS_SIZE_NODIE(UTakeCoverAction)
VERIFY_CLASS_SIZE_NODIE(UTakeCoverAndAttackAction)
VERIFY_CLASS_SIZE_NODIE(UUseOptiwandAction)
#endif // VERIFY_CLASS_SIZES
