/*===========================================================================
	  C++ class	definitions	exported from UnrealScript.
	  This is automatically	generated by the tools.
	  DO NOT modify	this manually! Edit	the	corresponding .uc files	instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API	FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AIHearSound)
AUTOGENERATE_NAME(AT_Begin)
AUTOGENERATE_NAME(AT_Exec)
AUTOGENERATE_NAME(AT_Tick)
AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorEnteredVolume)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(ActorLeavingVolume)
AUTOGENERATE_NAME(AddCameraEffect)
AUTOGENERATE_NAME(AddDebugBox)
AUTOGENERATE_NAME(AddDebugLine)
AUTOGENERATE_NAME(AddInteraction)
AUTOGENERATE_NAME(AddPlayerIDSpoke)
AUTOGENERATE_NAME(AddPrecacheMaterial)
AUTOGENERATE_NAME(AddPrecacheMesh)
AUTOGENERATE_NAME(AddPrecacheStaticMesh)
AUTOGENERATE_NAME(AllowDetourTo)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(ApplyRotationOffset)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(AuthenticatedProfileResult)
AUTOGENERATE_NAME(AutoLoadMenus)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(BecomeRagdoll)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(Broadcast)
AUTOGENERATE_NAME(BroadcastLocalized)
AUTOGENERATE_NAME(BroadcastLocalizedMessage)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(CanBeArrestedNow)
AUTOGENERATE_NAME(CanBeUsedNow)
AUTOGENERATE_NAME(CanHit)
AUTOGENERATE_NAME(CanHitTargetAt)
AUTOGENERATE_NAME(CanIssueCommands)
AUTOGENERATE_NAME(CanMoveFreely)
AUTOGENERATE_NAME(ChangeAnimation)
AUTOGENERATE_NAME(ClearDebugLines)
AUTOGENERATE_NAME(ClientCloseMenu)
AUTOGENERATE_NAME(ClientHearSound)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(ClientNameChange)
AUTOGENERATE_NAME(ClientOpenMenu)
AUTOGENERATE_NAME(ClientSetViewTarget)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(ClientValidate)
AUTOGENERATE_NAME(CloseAll)
AUTOGENERATE_NAME(CloseMenu)
AUTOGENERATE_NAME(ConnectFailure)
AUTOGENERATE_NAME(CopyMaterialsToSkins)
AUTOGENERATE_NAME(DemoPlaySound)
AUTOGENERATE_NAME(DesiredItemPocketChanged)
AUTOGENERATE_NAME(DesiredPositionChanged)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(DetourWeight)
AUTOGENERATE_NAME(EmailAlreadyTaken)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EndCrouch)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(EndedRotation)
AUTOGENERATE_NAME(EnemyNotVisible)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(FillRenderPrecacheArrays)
AUTOGENERATE_NAME(FinishedInterpolation)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(GameEnding)
AUTOGENERATE_NAME(GameSpyInitialised)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(GetAdditionalBaseAimError)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(GetChannelCount)
AUTOGENERATE_NAME(GetChannelIndex)
AUTOGENERATE_NAME(GetControllingStateName)
AUTOGENERATE_NAME(GetCurrentAssignment)
AUTOGENERATE_NAME(GetCurrentControllable)
AUTOGENERATE_NAME(GetCurrentMaterial)
AUTOGENERATE_NAME(GetGameSpyPassword)
AUTOGENERATE_NAME(GetGameSpyProfileId)
AUTOGENERATE_NAME(GetLastDuration)
AUTOGENERATE_NAME(GetLastStartTime)
AUTOGENERATE_NAME(GetLookAroundSpeed)
AUTOGENERATE_NAME(GetMassiveAdTargetName)
AUTOGENERATE_NAME(GetNumTeams)
AUTOGENERATE_NAME(GetOverlayMaterial)
AUTOGENERATE_NAME(GetPatchDownloadURL)
AUTOGENERATE_NAME(GetPerfectFireStart)
AUTOGENERATE_NAME(GetProductRegionID)
AUTOGENERATE_NAME(GetProductVersionID)
AUTOGENERATE_NAME(GetQualifyTimeForArrest)
AUTOGENERATE_NAME(GetRandomEntry)
AUTOGENERATE_NAME(GetRenderBoundingBoxCenter)
AUTOGENERATE_NAME(GetTeamNumber)
AUTOGENERATE_NAME(GetThirdPersonModel)
AUTOGENERATE_NAME(GetValueForKey)
AUTOGENERATE_NAME(GetValueForPlayerKey)
AUTOGENERATE_NAME(GetValueForTeamKey)
AUTOGENERATE_NAME(HandleAltFire)
AUTOGENERATE_NAME(HandleFire)
AUTOGENERATE_NAME(HandleReload)
AUTOGENERATE_NAME(HavokActivate)
AUTOGENERATE_NAME(HavokCharacterCollision)
AUTOGENERATE_NAME(HavokIsActive)
AUTOGENERATE_NAME(HavokUpdateState)
AUTOGENERATE_NAME(HeadVolumeChange)
AUTOGENERATE_NAME(HearNoise)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(IgnoresSeenPawnsOfType)
AUTOGENERATE_NAME(Init)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(InitGameSpyData)
AUTOGENERATE_NAME(InitInputSystem)
AUTOGENERATE_NAME(InitializeController)
AUTOGENERATE_NAME(Initialized)
AUTOGENERATE_NAME(IsArrested)
AUTOGENERATE_NAME(IsBeingArrestedNow)
AUTOGENERATE_NAME(IsEmptyDoorway)
AUTOGENERATE_NAME(IsInjured)
AUTOGENERATE_NAME(IsLowerBodyInjured)
AUTOGENERATE_NAME(IsMember)
AUTOGENERATE_NAME(IsStunned)
AUTOGENERATE_NAME(KImpact)
AUTOGENERATE_NAME(KeyFrameReached)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(LIPSincAnimEnd)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(MayFall)
AUTOGENERATE_NAME(ModifyVelocity)
AUTOGENERATE_NAME(MonitoredPawnAlert)
AUTOGENERATE_NAME(Notify)
AUTOGENERATE_NAME(NotifyBeganCollisionAvoidance)
AUTOGENERATE_NAME(NotifyBump)
AUTOGENERATE_NAME(NotifyClientsDroppedWeaponAtRest)
AUTOGENERATE_NAME(NotifyEndedCollisionAvoidance)
AUTOGENERATE_NAME(NotifyHeadVolumeChange)
AUTOGENERATE_NAME(NotifyHitMover)
AUTOGENERATE_NAME(NotifyHitWall)
AUTOGENERATE_NAME(NotifyJumpApex)
AUTOGENERATE_NAME(NotifyLanded)
AUTOGENERATE_NAME(NotifyMissedJump)
AUTOGENERATE_NAME(NotifyPhysicsVolumeChange)
AUTOGENERATE_NAME(NotifyServerReceivePIDResponse)
AUTOGENERATE_NAME(OnAdminReply)
AUTOGENERATE_NAME(OnArrestBegan)
AUTOGENERATE_NAME(OnArrestInterrupted)
AUTOGENERATE_NAME(OnArrested)
AUTOGENERATE_NAME(OnAudioLevelEvent)
AUTOGENERATE_NAME(OnBeginControlling)
AUTOGENERATE_NAME(OnCollisionAvoidanceMoveTo)
AUTOGENERATE_NAME(OnCommandRecognized)
AUTOGENERATE_NAME(OnConnectionFailed)
AUTOGENERATE_NAME(OnDisconnected)
AUTOGENERATE_NAME(OnEffectInitialized)
AUTOGENERATE_NAME(OnEffectStarted)
AUTOGENERATE_NAME(OnEffectStopped)
AUTOGENERATE_NAME(OnEndControlling)
AUTOGENERATE_NAME(OnFalseRecognition)
AUTOGENERATE_NAME(OnFinishedPrecaching)
AUTOGENERATE_NAME(OnLeanStateChange)
AUTOGENERATE_NAME(OnLevelChange)
AUTOGENERATE_NAME(OnLevelDestroyed)
AUTOGENERATE_NAME(OnOtherActorDestroyed)
AUTOGENERATE_NAME(OnOtherPawnDied)
AUTOGENERATE_NAME(OnPhraseStart)
AUTOGENERATE_NAME(OnQueryPatchResult)
AUTOGENERATE_NAME(OnServerReceivedStatsResponse)
AUTOGENERATE_NAME(OnUsed)
AUTOGENERATE_NAME(OpenMenu)
AUTOGENERATE_NAME(PawnEnteredVolume)
AUTOGENERATE_NAME(PawnLeavingVolume)
AUTOGENERATE_NAME(PhysicsChangedFor)
AUTOGENERATE_NAME(PhysicsVolumeChange)
AUTOGENERATE_NAME(PlayDying)
AUTOGENERATE_NAME(PlayEmitters)
AUTOGENERATE_NAME(PlayFalling)
AUTOGENERATE_NAME(PlayJump)
AUTOGENERATE_NAME(PlayLandingAnimation)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(PlayerSeesMe)
AUTOGENERATE_NAME(PlayerTick)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(PostEditChange)
AUTOGENERATE_NAME(PostGameEngineInit)
AUTOGENERATE_NAME(PostLevelChange)
AUTOGENERATE_NAME(PostLoadGame)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(PostNetBeginPlay)
AUTOGENERATE_NAME(PostNetReceive)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(PostRenderCallback)
AUTOGENERATE_NAME(PostTakeDamage)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(PostUsed)
AUTOGENERATE_NAME(PreAutoDestroyed)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(PreLevelChange)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(PreRenderCallback)
AUTOGENERATE_NAME(PreScriptedTextureRendered)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(PrepareForMove)
AUTOGENERATE_NAME(Process_KeyEvent)
AUTOGENERATE_NAME(Process_KeyType)
AUTOGENERATE_NAME(Process_Message)
AUTOGENERATE_NAME(Process_PostRender)
AUTOGENERATE_NAME(Process_PreRender)
AUTOGENERATE_NAME(Process_Tick)
AUTOGENERATE_NAME(ProfileCheckResult)
AUTOGENERATE_NAME(ProfileCreateResult)
AUTOGENERATE_NAME(QueryPatchCompleted)
AUTOGENERATE_NAME(ReceiveLocalizedMessage)
AUTOGENERATE_NAME(RemoveCameraEffect)
AUTOGENERATE_NAME(RemoveDebugLine)
AUTOGENERATE_NAME(RemoveInteraction)
AUTOGENERATE_NAME(RenderTexture)
AUTOGENERATE_NAME(ReplaceMenu)
AUTOGENERATE_NAME(SeeMonster)
AUTOGENERATE_NAME(SeePlayer)
AUTOGENERATE_NAME(ServerCallback)
AUTOGENERATE_NAME(ServerChangeVoiceChatter)
AUTOGENERATE_NAME(ServerGetVoiceChatters)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(ServerValidationResponse)
AUTOGENERATE_NAME(SetAnimAction)
AUTOGENERATE_NAME(SetFocusTo)
AUTOGENERATE_NAME(SetHeadScale)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(SetInput)
AUTOGENERATE_NAME(SetProgress)
AUTOGENERATE_NAME(SetProgressMessage)
AUTOGENERATE_NAME(SetProgressTime)
AUTOGENERATE_NAME(SetWalking)
AUTOGENERATE_NAME(SetupSpecialPathAbilities)
AUTOGENERATE_NAME(ShouldAdvertiseServerOnInternet)
AUTOGENERATE_NAME(ShouldCheckClientCDKeys)
AUTOGENERATE_NAME(ShouldControlViewport)
AUTOGENERATE_NAME(ShouldPlayWalkingAnimations)
AUTOGENERATE_NAME(ShouldShowSubtitles)
AUTOGENERATE_NAME(ShowUpgradeMenu)
AUTOGENERATE_NAME(SoakStop)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(StartClientDemoRec)
AUTOGENERATE_NAME(StartCrouch)
AUTOGENERATE_NAME(StopEmitters)
AUTOGENERATE_NAME(SuggestMovePreparation)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(TakeHitImpulse)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(TimerDelegate)
AUTOGENERATE_NAME(TornOff)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(TriggerEffectEvent)
AUTOGENERATE_NAME(TriggerEvent)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(UnTriggerEffectEvent)
AUTOGENERATE_NAME(UniqueID)
AUTOGENERATE_NAME(UniqueNickRegistrationResult)
AUTOGENERATE_NAME(UpdateCharacter)
AUTOGENERATE_NAME(UpdateComplete)
AUTOGENERATE_NAME(UpdateEyeHeight)
AUTOGENERATE_NAME(UpdatePrecacheRenderData)
AUTOGENERATE_NAME(UpdatedServerData)
AUTOGENERATE_NAME(UsedBy)
AUTOGENERATE_NAME(UserConnectionResult)
AUTOGENERATE_NAME(VOIPIsIgnored)
AUTOGENERATE_NAME(ViewRotationOffset)
AUTOGENERATE_NAME(ViewportCalcView)
AUTOGENERATE_NAME(WindowFocusLost)
AUTOGENERATE_NAME(WindowFocusRegained)
AUTOGENERATE_NAME(WorldSpaceOverlays)
AUTOGENERATE_NAME(ZoneChange)
AUTOGENERATE_NAME(deleteRemovedActions)
AUTOGENERATE_NAME(isActive)
AUTOGENERATE_NAME(isAlive)
AUTOGENERATE_NAME(onMessage)
AUTOGENERATE_NAME(resetGoals)

#ifndef NAMES_ONLY

// Enum ESkeletalRegion is declared in "..\Engine\Classes\Actor.uc"
enum ESkeletalRegion
{
	 REGION_None             =0,
	 REGION_Head             =1,
	 REGION_Torso            =2,
	 REGION_LeftArm          =3,
	 REGION_RightArm         =4,
	 REGION_LeftLeg          =5,
	 REGION_RightLeg         =6,
	 REGION_Body_Max         =7,
	 REGION_Door_WedgeSpot   =8,
	 REGION_Door_ToolkitSpot =9,
	 REGION_Door_OptiwandSpot=10,
	 REGION_Door_BreachingSpot=11,
	 REGION_MAX              =12,
};
// Enum eKillZType is declared in "..\Engine\Classes\Actor.uc"
enum eKillZType
{
	 KILLZ_None              =0,
	 KILLZ_Suicide           =1,
	 KILLZ_MAX               =2,
};
// Enum EDoubleClickDir is declared in "..\Engine\Classes\Actor.uc"
enum EDoubleClickDir
{
	 DCLICK_None             =0,
	 DCLICK_Left             =1,
	 DCLICK_Right            =2,
	 DCLICK_Forward          =3,
	 DCLICK_Back             =4,
	 DCLICK_Active           =5,
	 DCLICK_Done             =6,
	 DCLICK_MAX              =7,
};
// Enum ETravelType is declared in "..\Engine\Classes\Actor.uc"
enum ETravelType
{
	 TRAVEL_Absolute         =0,
	 TRAVEL_Partial          =1,
	 TRAVEL_Relative         =2,
	 TRAVEL_MAX              =3,
};
// Enum EForceType is declared in "..\Engine\Classes\Actor.uc"
enum EForceType
{
	 FT_None                 =0,
	 FT_DragAlong            =1,
	 FT_MAX                  =2,
};
// Enum EMusicTransition is declared in "..\Engine\Classes\Actor.uc"
enum EMusicTransition
{
	 MTRAN_None              =0,
	 MTRAN_Instant           =1,
	 MTRAN_Segue             =2,
	 MTRAN_Fade              =3,
	 MTRAN_FastFade          =4,
	 MTRAN_SlowFade          =5,
	 MTRAN_MAX               =6,
};
// Enum ESoundOcclusion is declared in "..\Engine\Classes\Actor.uc"
enum ESoundOcclusion
{
	 OCCLUSION_Default       =0,
	 OCCLUSION_None          =1,
	 OCCLUSION_BSP           =2,
	 OCCLUSION_StaticMeshes  =3,
	 OCCLUSION_MAX           =4,
};
// Enum ERenderStyle is declared in "..\Engine\Classes\Actor.uc"
enum ERenderStyle
{
	 STY_None                =0,
	 STY_Normal              =1,
	 STY_Masked              =2,
	 STY_Translucent         =3,
	 STY_Modulated           =4,
	 STY_Alpha               =5,
	 STY_Additive            =6,
	 STY_Subtractive         =7,
	 STY_Particle            =8,
	 STY_AlphaZ              =9,
	 STY_MAX                 =10,
};
// Enum EChannelTweenMode is declared in "..\Engine\Classes\Actor.uc"
enum EChannelTweenMode
{
	 kChannelTweenModeNormal =0,
	 kChannelTweenModeDynamic=1,
};
// Enum ENetRole is declared in "..\Engine\Classes\Actor.uc"
enum ENetRole
{
	 ROLE_None               =0,
	 ROLE_DumbProxy          =1,
	 ROLE_SimulatedProxy     =2,
	 ROLE_AutonomousProxy    =3,
	 ROLE_Authority          =4,
	 ROLE_MAX                =5,
};
// Enum EDetailMode is declared in "..\Engine\Classes\Actor.uc"
enum EDetailMode
{
	 DM_Low                  =0,
	 DM_High                 =1,
	 DM_SuperHigh            =2,
	 DM_MAX                  =3,
};
// Enum EFilterState is declared in "..\Engine\Classes\Actor.uc"
enum EFilterState
{
	 FS_Maybe                =0,
	 FS_Yes                  =1,
	 FS_No                   =2,
	 FS_MAX                  =3,
};
// Enum EDrawType is declared in "..\Engine\Classes\Actor.uc"
enum EDrawType
{
	 DT_None                 =0,
	 DT_Sprite               =1,
	 DT_Mesh                 =2,
	 DT_Brush                =3,
	 DT_RopeSprite           =4,
	 DT_VerticalSprite       =5,
	 DT_Terraform            =6,
	 DT_SpriteAnimOnce       =7,
	 DT_StaticMesh           =8,
	 DT_DrawType             =9,
	 DT_Particle             =10,
	 DT_AntiPortal           =11,
	 DT_FluidSurface         =12,
	 DT_FluidVolume          =13,
	 DT_MAX                  =14,
};
// Enum EPhysics is declared in "..\Engine\Classes\Actor.uc"
enum EPhysics
{
	 PHYS_None               =0,
	 PHYS_Walking            =1,
	 PHYS_Falling            =2,
	 PHYS_Swimming           =3,
	 PHYS_Flying             =4,
	 PHYS_Rotating           =5,
	 PHYS_Projectile         =6,
	 PHYS_Interpolating      =7,
	 PHYS_MovingBrush        =8,
	 PHYS_Spider             =9,
	 PHYS_Trailer            =10,
	 PHYS_Ladder             =11,
	 PHYS_RootMotion         =12,
	 PHYS_Karma              =13,
	 PHYS_KarmaRagDoll       =14,
	 PHYS_Havok              =15,
	 PHYS_HavokSkeletal      =16,
	 PHYS_MAX                =17,
};
// Enum ELightEffect is declared in "..\Engine\Classes\Actor.uc"
enum ELightEffect
{
	 LE_Pointlight           =0,
	 LE_Sunlight             =1,
	 LE_Spotlight            =2,
	 LE_MAX                  =3,
};
// Enum ELightType is declared in "..\Engine\Classes\Actor.uc"
enum ELightType
{
	 LT_None                 =0,
	 LT_Steady               =1,
	 LT_Pulse                =2,
	 LT_Blink                =3,
	 LT_Flicker              =4,
	 LT_Strobe               =5,
	 LT_BackdropLight        =6,
	 LT_SubtlePulse          =7,
	 LT_TexturePaletteOnce   =8,
	 LT_TexturePaletteLoop   =9,
	 LT_FadeOut              =10,
	 LT_MAX                  =11,
};
// Constant kCoverPlaneNumVertices is declared in "..\Engine\Classes\Actor.uc"
#define UCONST_kCoverPlaneNumVertices 4
// Constant RepAnimUpdateFrequencyMax is declared in "..\Engine\Classes\Actor.uc"
#define UCONST_RepAnimUpdateFrequencyMax 0.4
// Constant RepAnimUpdateFrequencyMin is declared in "..\Engine\Classes\Actor.uc"
#define UCONST_RepAnimUpdateFrequencyMin 0.2
// Constant MINFLOORZ is declared in "..\Engine\Classes\Actor.uc"
#define UCONST_MINFLOORZ 0.7
// Constant MAXSTEPHEIGHT is declared in "..\Engine\Classes\Actor.uc"
#define UCONST_MAXSTEPHEIGHT 16.0

// "event"	function whose parameters correspond to	"struct AActor_eventGetRenderBoundingBoxCenter_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventGetRenderBoundingBoxCenter_Parms
{
	  FVector ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventonMessage_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventonMessage_Parms
{
	  class UMessage* msg;
};
// "event"	function whose parameters correspond to	"struct AActor_eventCopyMaterialsToSkins_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventCopyMaterialsToSkins_Parms
{
	  BITFIELD ShouldNotOverwriteExistingSkins;
};
// "event"	function whose parameters correspond to	"struct AActor_eventGetCurrentMaterial_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventGetCurrentMaterial_Parms
{
	  INT Index;
	  class UMaterial* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventUnTriggerEffectEvent_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventUnTriggerEffectEvent_Parms
{
	  FName EffectEvent;
	  FName ReferenceTag;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTriggerEffectEvent_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTriggerEffectEvent_Parms
{
	  FName EffectEvent;
	  class AActor* Other;
	  class UMaterial* TargetMaterial;
	  FVector HitLocation;
	  FRotator HitNormal;
	  BITFIELD PlayOnOther;
	  BITFIELD QueryOnly;
	  class IIEffectObserver* Observer;
	  FName ReferenceTag;
	  FName SkipSubsystemWithThisName;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTriggerEvent_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTriggerEvent_Parms
{
	  FName EventName;
	  class AActor* Other;
	  class APawn* EventInstigator;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTravelPostAccept_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTravelPostAccept_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventTravelPreAccept_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTravelPreAccept_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventUpdatePrecacheRenderData_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventUpdatePrecacheRenderData_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostEditChange_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostEditChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostLoadGame_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostLoadGame_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostNetBeginPlay_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostNetBeginPlay_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventSetInitialState_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventSetInitialState_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostBeginPlay_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostBeginPlay_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventBroadcastLocalizedMessage_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventBroadcastLocalizedMessage_Parms
{
	  class UClass* MessageClass;
	  INT Switch;
	  class APlayerReplicationInfo* RelatedPRI_1;
	  class APlayerReplicationInfo* RelatedPRI_2;
	  class UObject* OptionalObject;
};
// "event"	function whose parameters correspond to	"struct AActor_eventPreBeginPlay_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPreBeginPlay_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPreScriptedTextureRendered_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPreScriptedTextureRendered_Parms
{
	  class UScriptedTexture* Tex;
};
// "event"	function whose parameters correspond to	"struct AActor_eventRenderTexture_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventRenderTexture_Parms
{
	  class UScriptedTexture* Tex;
};
// "event"	function whose parameters correspond to	"struct AActor_eventBeginPlay_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventBeginPlay_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostTeleport_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostTeleport_Parms
{
	  class ATeleporter* OutTeleporter;
};
// "event"	function whose parameters correspond to	"struct AActor_eventPreTeleport_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPreTeleport_Parms
{
	  class ATeleporter* InTeleporter;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventDemoPlaySound_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventDemoPlaySound_Parms
{
	  class USound* Sound;
	  FLOAT Volume;
	  BITFIELD bNoOverride;
	  FLOAT InnerRadius;
	  FLOAT OuterRadius;
	  FLOAT Pitch;
	  INT flags;
	  FLOAT FadeInTime;
	  BITFIELD Attenuate;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTornOff_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTornOff_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventTakeHitImpulse_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTakeHitImpulse_Parms
{
	  FVector HitLocation;
	  FVector Momentum;
	  class UClass* DamageType;
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostTakeDamage_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostTakeDamage_Parms
{
	  INT Damage;
	  class APawn* EventInstigator;
	  FVector HitLocation;
	  FVector Momentum;
	  class UClass* DamageType;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTakeDamage_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTakeDamage_Parms
{
	  INT Damage;
	  class APawn* EventInstigator;
	  FVector HitLocation;
	  FVector Momentum;
	  class UClass* DamageType;
};
// "event"	function whose parameters correspond to	"struct AActor_eventKilledBy_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventKilledBy_Parms
{
	  class APawn* EventInstigator;
};
// "event"	function whose parameters correspond to	"struct AActor_eventFellOutOfWorld_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventFellOutOfWorld_Parms
{
	  BYTE KillType;
};
// "event"	function whose parameters correspond to	"struct AActor_eventUsedBy_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventUsedBy_Parms
{
	  class APawn* User;
};
// "event"	function whose parameters correspond to	"struct AActor_eventEndedRotation_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventEndedRotation_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventFinishedInterpolation_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventFinishedInterpolation_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventEncroachedBy_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventEncroachedBy_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventEncroachingOn_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventEncroachingOn_Parms
{
	  class AActor* Other;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventSpecialHandling_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventSpecialHandling_Parms
{
	  class APawn* Other;
	  class AActor* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventDetach_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventDetach_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventAttach_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventAttach_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventBaseChange_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventBaseChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventBump_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventBump_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventUnTouch_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventUnTouch_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostTouch_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostTouch_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTouch_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTouch_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventPhysicsVolumeChange_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPhysicsVolumeChange_Parms
{
	  class APhysicsVolume* NewVolume;
};
// "event"	function whose parameters correspond to	"struct AActor_eventZoneChange_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventZoneChange_Parms
{
	  class AZoneInfo* NewZone;
};
// "event"	function whose parameters correspond to	"struct AActor_eventLanded_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventLanded_Parms
{
	  FVector HitNormal;
};
// "event"	function whose parameters correspond to	"struct AActor_eventFalling_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventFalling_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventHitWall_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventHitWall_Parms
{
	  FVector HitNormal;
	  class AActor* HitWall;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTimer_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTimer_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventEndEvent_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventEndEvent_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventBeginEvent_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventBeginEvent_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventUnTrigger_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventUnTrigger_Parms
{
	  class AActor* Other;
	  class APawn* EventInstigator;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTrigger_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTrigger_Parms
{
	  class AActor* Other;
	  class APawn* EventInstigator;
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostNetReceive_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostNetReceive_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventTick_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTick_Parms
{
	  FLOAT DeltaTime;
};
// "event"	function whose parameters correspond to	"struct AActor_eventLostChild_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventLostChild_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventGainedChild_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventGainedChild_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventDestroyed_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventDestroyed_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventHavokUpdateState_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventHavokUpdateState_Parms
{
	  FHavokRigidBodyState NewState;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventHavokActivate_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventHavokActivate_Parms
{
	  BITFIELD Activate;
};
// "event"	function whose parameters correspond to	"struct AActor_eventHavokIsActive_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventHavokIsActive_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventAnimEnd_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventAnimEnd_Parms
{
	  INT Channel;
};
// "event"	function whose parameters correspond to	"struct AActor_eventLIPSincAnimEnd_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventLIPSincAnimEnd_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostRenderCallback_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostRenderCallback_Parms
{
	  BITFIELD InMainScene;
};
// "event"	function whose parameters correspond to	"struct AActor_eventGetOverlayMaterial_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventGetOverlayMaterial_Parms
{
	  INT Index;
	  class UMaterial* ReturnValue;
};



// Enum EAwarenessPointCreation is declared in "..\Engine\Classes\Awareness\AwarenessPoint.uc"
enum EAwarenessPointCreation
{
	 kAPC_DesignerPlaced     =0,
	 kAPC_AutoGenerated      =1,
	 kAPC_MAX                =2,
};
// Struct FAwarenessConnection	is declared	in "..\Engine\Classes\Awareness\AwarenessPoint.uc"
struct ENGINE_API FAwarenessConnection
{
    class AAwarenessPoint* AwarenessPoint;
    FLOAT Distance;
};


// Enum ECsgOper is declared in "..\Engine\Classes\Brush.uc"
enum ECsgOper
{
	 CSG_Active              =0,
	 CSG_Add                 =1,
	 CSG_Subtract            =2,
	 CSG_Intersect           =3,
	 CSG_Deintersect         =4,
	 CSG_MAX                 =5,
};






// "event"	function whose parameters correspond to	"struct APhysicsVolume_eventPawnLeavingVolume_Parms"	is declared	in "..\Engine\Classes\PhysicsVolume.uc"
struct APhysicsVolume_eventPawnLeavingVolume_Parms
{
	  class APawn* Other;
};
// "event"	function whose parameters correspond to	"struct APhysicsVolume_eventPawnEnteredVolume_Parms"	is declared	in "..\Engine\Classes\PhysicsVolume.uc"
struct APhysicsVolume_eventPawnEnteredVolume_Parms
{
	  class APawn* Other;
};
// "event"	function whose parameters correspond to	"struct APhysicsVolume_eventActorLeavingVolume_Parms"	is declared	in "..\Engine\Classes\PhysicsVolume.uc"
struct APhysicsVolume_eventActorLeavingVolume_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct APhysicsVolume_eventActorEnteredVolume_Parms"	is declared	in "..\Engine\Classes\PhysicsVolume.uc"
struct APhysicsVolume_eventActorEnteredVolume_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct APhysicsVolume_eventPhysicsChangedFor_Parms"	is declared	in "..\Engine\Classes\PhysicsVolume.uc"
struct APhysicsVolume_eventPhysicsChangedFor_Parms
{
	  class AActor* Other;
};


// Constant LATENT_MOVETOWARD is declared in "..\Engine\Classes\Controller.uc"
#define UCONST_LATENT_MOVETOWARD 503

// "event"	function whose parameters correspond to	"struct AController_eventMonitoredPawnAlert_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventMonitoredPawnAlert_Parms
{
};
// "event"	function whose parameters correspond to	"struct AController_eventEnemyNotVisible_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventEnemyNotVisible_Parms
{
};
// "event"	function whose parameters correspond to	"struct AController_eventSeeMonster_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventSeeMonster_Parms
{
	  class APawn* Seen;
};
// "event"	function whose parameters correspond to	"struct AController_eventSeePlayer_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventSeePlayer_Parms
{
	  class APawn* Seen;
};
// "event"	function whose parameters correspond to	"struct AController_eventHearNoise_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventHearNoise_Parms
{
	  FLOAT Loudness;
	  class AActor* NoiseMaker;
};
// "event"	function whose parameters correspond to	"struct AController_eventSetupSpecialPathAbilities_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventSetupSpecialPathAbilities_Parms
{
};
// "event"	function whose parameters correspond to	"struct AController_eventPrepareForMove_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventPrepareForMove_Parms
{
	  class ANavigationPoint* Goal;
	  class UReachSpec* Path;
};
// "event"	function whose parameters correspond to	"struct AController_eventAllowDetourTo_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventAllowDetourTo_Parms
{
	  class ANavigationPoint* n;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyMissedJump_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyMissedJump_Parms
{
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyJumpApex_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyJumpApex_Parms
{
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyHitMover_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyHitMover_Parms
{
	  FVector HitNormal;
	  class AMover* Wall;
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyBump_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyBump_Parms
{
	  class AActor* Other;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyHitWall_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyHitWall_Parms
{
	  FVector HitNormal;
	  class AActor* Wall;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyLanded_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyLanded_Parms
{
	  FVector HitNormal;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyHeadVolumeChange_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyHeadVolumeChange_Parms
{
	  class APhysicsVolume* NewVolume;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyPhysicsVolumeChange_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyPhysicsVolumeChange_Parms
{
	  class APhysicsVolume* NewVolume;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AController_eventLongFall_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventLongFall_Parms
{
};
// "event"	function whose parameters correspond to	"struct AController_eventSoakStop_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventSoakStop_Parms
{
	  FString problem;
};
// "event"	function whose parameters correspond to	"struct AController_eventAIHearSound_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventAIHearSound_Parms
{
	  class AActor* Actor;
	  class USound* S;
	  FVector SoundLocation;
	  FVector Parameters;
	  BITFIELD Attenuate;
};
// "event"	function whose parameters correspond to	"struct AController_eventMayFall_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventMayFall_Parms
{
};

// "event"	function whose parameters correspond to	"struct APlayerController_eventVOIPIsIgnored_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventVOIPIsIgnored_Parms
{
	  INT PlayerID;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventGetLookAroundSpeed_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventGetLookAroundSpeed_Parms
{
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventStartClientDemoRec_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventStartClientDemoRec_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventServerGetVoiceChatters_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventServerGetVoiceChatters_Parms
{
	  class APlayerController* Player;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventServerChangeVoiceChatter_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventServerChangeVoiceChatter_Parms
{
	  class APlayerController* Player;
	  INT IpAddr;
	  INT Handle;
	  BITFIELD Add;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientCloseMenu_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientCloseMenu_Parms
{
	  BITFIELD bCloseAll;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientOpenMenu_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientOpenMenu_Parms
{
	  FString MenuClass;
	  FString MenuName;
	  BITFIELD bDisconnect;
	  FString Msg1;
	  FString Msg2;
	  INT Msg3;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventPlayerCalcView_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventPlayerCalcView_Parms
{
	  class AActor* ViewActor;
	  FVector CameraLocation;
	  FRotator CameraRotation;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventRemoveCameraEffect_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventRemoveCameraEffect_Parms
{
	  class UCameraEffect* ExEffect;
	  BITFIELD ByClass;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventAddCameraEffect_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventAddCameraEffect_Parms
{
	  class UCameraEffect* NewEffect;
	  BITFIELD UniqueClass;
	  BITFIELD UniqueObject;
	  BITFIELD RemoveConflicting;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventPlayerTick_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventPlayerTick_Parms
{
	  FLOAT DeltaTime;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventSetProgressTime_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventSetProgressTime_Parms
{
	  FLOAT t;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventSetProgressMessage_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventSetProgressMessage_Parms
{
	  INT Index;
	  FString S;
	  FColor C;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventPreClientTravel_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventPreClientTravel_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventOnConnectionFailed_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventOnConnectionFailed_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventOnFinishedPrecaching_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventOnFinishedPrecaching_Parms
{
	  BITFIELD doExtraFlush;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventTeamMessage_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventTeamMessage_Parms
{
	  class APlayerReplicationInfo* PRI;
	  FString S;
	  FName Type;
	  FString Location;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientMessage_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientMessage_Parms
{
	  FString S;
	  FName Type;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventReceiveLocalizedMessage_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventReceiveLocalizedMessage_Parms
{
	  class UClass* Message;
	  INT Switch;
	  class APlayerReplicationInfo* RelatedPRI_1;
	  class APlayerReplicationInfo* RelatedPRI_2;
	  class UObject* OptionalObject;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventInitInputSystem_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventInitInputSystem_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientSetViewTarget_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientSetViewTarget_Parms
{
	  class AActor* A;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientHearSound_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientHearSound_Parms
{
	  class AActor* Actor;
	  class USound* S;
	  FVector SoundLocation;
	  FVector Parameters;
	  FLOAT InnerRadius;
	  INT flags;
	  FLOAT FadeInTime;
	  BITFIELD Attenuate;
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventServerValidationResponse_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventServerValidationResponse_Parms
{
	  FString R;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientValidate_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientValidate_Parms
{
	  FString C;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventWindowFocusRegained_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventWindowFocusRegained_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventWindowFocusLost_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventWindowFocusLost_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientTravel_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientTravel_Parms
{
	  FString URL;
	  BYTE TravelType;
	  BITFIELD bItems;
};





// "event"	function whose parameters correspond to	"struct AEmitter_eventPreAutoDestroyed_Parms"	is declared	in "..\Engine\Classes\Emitter.uc"
struct AEmitter_eventPreAutoDestroyed_Parms
{
};
// "event"	function whose parameters correspond to	"struct AEmitter_eventStopEmitters_Parms"	is declared	in "..\Engine\Classes\Emitter.uc"
struct AEmitter_eventStopEmitters_Parms
{
	  BITFIELD bStopOverTime;
};
// "event"	function whose parameters correspond to	"struct AEmitter_eventPlayEmitters_Parms"	is declared	in "..\Engine\Classes\Emitter.uc"
struct AEmitter_eventPlayEmitters_Parms
{
};


// Enum ActionStatus is declared in "..\Engine\Classes\Equipment\HandheldEquipment.uc"
enum ActionStatus
{
	 ActionStatus_Idle       =0,
	 ActionStatus_Started    =1,
	 ActionStatus_HitKeyFrame=2,
	 ActionStatus_MAX        =3,
};
// Enum Pocket is declared in "..\Engine\Classes\Equipment\HandheldEquipment.uc"
enum Pocket
{
	 Pocket_PrimaryWeapon    =0,
	 Pocket_PrimaryAmmo      =1,
	 Pocket_SecondaryWeapon  =2,
	 Pocket_SecondaryAmmo    =3,
	 Pocket_EquipOne         =4,
	 Pocket_EquipTwo         =5,
	 Pocket_EquipThree       =6,
	 Pocket_EquipFour        =7,
	 Pocket_EquipFive        =8,
	 Pocket_EquipSix         =9,
	 Pocket_BodyArmor        =10,
	 Pocket_HeadArmor        =11,
	 Pocket_Toolkit          =12,
	 Pocket_Detonator        =13,
	 Pocket_Cuffs            =14,
	 Pocket_IAmCuffed        =15,
	 Pocket_Unused1          =16,
	 Pocket_Unused2          =17,
	 Pocket_SimpleBackPouch  =18,
	 Pocket_SimpleHipPouch   =19,
	 Pocket_SimpleHolster    =20,
	 Pocket_SimplePepperSprayPouch=21,
	 Pocket_SimpleRadioPouch =22,
	 Pocket_HeadEffectProtection=23,
	 Pocket_Lightstick       =24,
	 Pocket_CustomSkin       =25,
	 Pocket_Invalid          =26,
	 Pocket_MAX              =27,
};
// Enum EquipmentSlot is declared in "..\Engine\Classes\Equipment\HandheldEquipment.uc"
enum EquipmentSlot
{
	 Slot_Invalid            =0,
	 Slot_PrimaryWeapon      =1,
	 Slot_SecondaryWeapon    =2,
	 Slot_Flashbang          =3,
	 Slot_CSGasGrenade       =4,
	 Slot_StingGrenade       =5,
	 Slot_PepperSpray        =6,
	 Slot_Breaching          =7,
	 Slot_Toolkit            =8,
	 Slot_Optiwand           =9,
	 Slot_Wedge              =10,
	 Slot_Cuffs              =11,
	 Slot_Detonator          =12,
	 Slot_IAmCuffed          =13,
	 Slot_Lightstick         =14,
	 Slot_AmmoBandolier      =15,
	 kNumEquipmentSlots      =16,
	 Slot_MAX                =17,
};

// "event"	function whose parameters correspond to	"struct AHandheldEquipment_eventGetPerfectFireStart_Parms"	is declared	in "..\Engine\Classes\Equipment\HandheldEquipment.uc"
struct AHandheldEquipment_eventGetPerfectFireStart_Parms
{
	  FVector outLocation;
	  FRotator outDirection;
};
// "event"	function whose parameters correspond to	"struct AHandheldEquipment_eventGetThirdPersonModel_Parms"	is declared	in "..\Engine\Classes\Equipment\HandheldEquipment.uc"
struct AHandheldEquipment_eventGetThirdPersonModel_Parms
{
	  class AHandheldEquipmentModel* ReturnValue;
};

// Enum FireMode is declared in "..\Engine\Classes\Equipment\FiredWeapon.uc"
enum FireMode
{
	 FireMode_Single         =0,
	 FireMode_SingleTaser    =1,
	 FireMode_DoubleTaser    =2,
	 FireMode_Burst          =3,
	 FireMode_Auto           =4,
	 FireMode_MAX            =5,
};
// Enum AimPenaltyType is declared in "..\Engine\Classes\Equipment\FiredWeapon.uc"
enum AimPenaltyType
{
	 AimPenalty_Equip        =0,
	 AimPenalty_StandToWalk  =1,
	 AimPenalty_WalkToRun    =2,
	 AimPenalty_TakeDamage   =3,
	 AimPenalty_Fire         =4,
	 AimPenalty_MAX          =5,
};
// Struct FEnemyAmmo	is declared	in "..\Engine\Classes\Equipment\FiredWeapon.uc"
struct ENGINE_API FEnemyAmmo
{
    FStringNoInit AmmoClass;
    INT Chance;
    class UClass* LoadedAmmoClass;
};

// Constant kFlashlightProjection_BrightnessAlphaLerpTime is declared in "..\Engine\Classes\Equipment\FiredWeapon.uc"
#define UCONST_kFlashlightProjection_BrightnessAlphaLerpTime 0.2
// Constant kFlashlightProjection_ConeAnglePercent is declared in "..\Engine\Classes\Equipment\FiredWeapon.uc"
#define UCONST_kFlashlightProjection_ConeAnglePercent 0.75
// Constant kFlashlightProjection_FailureTimeout is declared in "..\Engine\Classes\Equipment\FiredWeapon.uc"
#define UCONST_kFlashlightProjection_FailureTimeout 1.0
// Constant kFlashlightProjection_NumTestsPerSecond is declared in "..\Engine\Classes\Equipment\FiredWeapon.uc"
#define UCONST_kFlashlightProjection_NumTestsPerSecond 10
// Constant FLASHLIGHT_TEXTURE_INDEX is declared in "..\Engine\Classes\Equipment\FiredWeapon.uc"
#define UCONST_FLASHLIGHT_TEXTURE_INDEX 1



// Enum EOptimizeOption is declared in "..\Engine\Classes\ExternalCameras\GenericExternalCamera.uc"
enum EOptimizeOption
{
	 OPTIMIZE_None           =0,
	 OPTIMIZE_Radius         =1,
	 OPTIMIZE_Zone           =2,
	 OPTIMIZE_VisibleZones   =3,
	 OPTIMIZE_MAX            =4,
};


// Struct FConsoleMessage	is declared	in "..\Engine\Classes\HUD.uc"
struct ENGINE_API FConsoleMessage
{
    FStringNoInit Text;
    FColor TextColor;
    FLOAT MessageLife;
    class APlayerReplicationInfo* PRI;
};


// "event"	function whose parameters correspond to	"struct AHUD_eventAddDebugBox_Parms"	is declared	in "..\Engine\Classes\HUD.uc"
struct AHUD_eventAddDebugBox_Parms
{
	  FVector Center;
	  FLOAT Diameter;
	  FColor Color;
	  FLOAT LifeSpan;
};
// "event"	function whose parameters correspond to	"struct AHUD_eventClearDebugLines_Parms"	is declared	in "..\Engine\Classes\HUD.uc"
struct AHUD_eventClearDebugLines_Parms
{
};
// "event"	function whose parameters correspond to	"struct AHUD_eventRemoveDebugLine_Parms"	is declared	in "..\Engine\Classes\HUD.uc"
struct AHUD_eventRemoveDebugLine_Parms
{
	  INT Index;
};
// "event"	function whose parameters correspond to	"struct AHUD_eventAddDebugLine_Parms"	is declared	in "..\Engine\Classes\HUD.uc"
struct AHUD_eventAddDebugLine_Parms
{
	  FVector EndA;
	  FVector EndB;
	  FColor Color;
	  FLOAT LifeSpan;
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AHUD_eventPostRender_Parms"	is declared	in "..\Engine\Classes\HUD.uc"
struct AHUD_eventPostRender_Parms
{
	  class UCanvas* Canvas;
};
// "event"	function whose parameters correspond to	"struct AHUD_eventShowUpgradeMenu_Parms"	is declared	in "..\Engine\Classes\HUD.uc"
struct AHUD_eventShowUpgradeMenu_Parms
{
};
// "event"	function whose parameters correspond to	"struct AHUD_eventConnectFailure_Parms"	is declared	in "..\Engine\Classes\HUD.uc"
struct AHUD_eventConnectFailure_Parms
{
	  FString FailCode;
	  FString URL;
};
// "event"	function whose parameters correspond to	"struct AHUD_eventWorldSpaceOverlays_Parms"	is declared	in "..\Engine\Classes\HUD.uc"
struct AHUD_eventWorldSpaceOverlays_Parms
{
};
// Struct FIdleAnimation	is declared	in "..\Engine\Classes\Equipment\HandheldEquipmentModel.uc"
struct ENGINE_API FIdleAnimation
{
    INT Chance;
    FName Animation;
};


// "event"	function whose parameters correspond to	"struct AHandheldEquipmentModel_eventNotifyClientsDroppedWeaponAtRest_Parms"	is declared	in "..\Engine\Classes\Equipment\HandheldEquipmentModel.uc"
struct AHandheldEquipmentModel_eventNotifyClientsDroppedWeaponAtRest_Parms
{
};
// Enum HandAnimationPass is declared in "..\Engine\Classes\Equipment\Hands.uc"
enum HandAnimationPass
{
	 HandPass_PreviousLocation=0,
	 HandPass_PreviousAngles =1,
	 HandPass_MAX            =2,
};


// Enum EAutoComputeConstraint is declared in "..\Engine\Classes\HavokConstraint.uc"
enum EAutoComputeConstraint
{
	 HKC_DontAutoCompute     =0,
	 HKC_AutoComputeBothFromC=1,
	 HKC_AutoComputeAFromC   =2,
	 HKC_AutoComputeBFromC   =3,
	 HKC_AutoComputeAFromB   =4,
	 HKC_AutoComputeBFromA   =5,
	 HKC_MAX                 =6,
};




// Enum EHavokHingeMotorType is declared in "..\Engine\Classes\HavokHingeConstraint.uc"
enum EHavokHingeMotorType
{
	 HKHM_SpringDamper       =0,
	 HKHM_Blending           =1,
	 HKHM_MAX                =2,
};
// Enum EHavokHingeType is declared in "..\Engine\Classes\HavokHingeConstraint.uc"
enum EHavokHingeType
{
	 HKH_Normal              =0,
	 HKH_Motorized           =1,
	 HKH_Controlled          =2,
	 HKH_MAX                 =3,
};



// Struct FKeyValuePair	is declared	in "..\Engine\Classes\Info.uc"
struct ENGINE_API FKeyValuePair
{
    FString Key;
    FString Value;
    friend	ENGINE_API FArchive& operator<<(FArchive& Ar,FKeyValuePair& MyKeyValuePair)
    {
        return	Ar	<< MyKeyValuePair.Key	<< MyKeyValuePair.Value;
    }
};

// Struct FPlayerResponseLine	is declared	in "..\Engine\Classes\Info.uc"
struct ENGINE_API FPlayerResponseLine
{
    INT PlayerNum;
    INT PlayerID;
    FString PlayerName;
    INT Ping;
    INT Score;
    INT StatsID;
    TArray<FKeyValuePair> PlayerInfo;
    friend	ENGINE_API FArchive& operator<<(FArchive& Ar,FPlayerResponseLine& MyPlayerResponseLine)
    {
        return	Ar	<< MyPlayerResponseLine.PlayerNum	<< MyPlayerResponseLine.PlayerID	<< MyPlayerResponseLine.PlayerName	<< MyPlayerResponseLine.Ping	<< MyPlayerResponseLine.Score	<< MyPlayerResponseLine.StatsID	<< MyPlayerResponseLine.PlayerInfo;
    }
};

// Struct FServerResponseLine	is declared	in "..\Engine\Classes\Info.uc"
struct ENGINE_API FServerResponseLine
{
    INT ServerID;
    FString IP;
    INT Port;
    INT QueryPort;
    FString ServerName;
    FString MapName;
    FString GameType;
    FString GameVersion;
    FString ModName;
    INT CurrentPlayers;
    INT MaxPlayers;
    INT Ping;
    TArray<FKeyValuePair> ServerInfo;
    TArray<FPlayerResponseLine> PlayerInfo;
    friend	ENGINE_API FArchive& operator<<(FArchive& Ar,FServerResponseLine& MyServerResponseLine)
    {
        return	Ar	<< MyServerResponseLine.ServerID	<< MyServerResponseLine.IP	<< MyServerResponseLine.Port	<< MyServerResponseLine.QueryPort	<< MyServerResponseLine.ServerName	<< MyServerResponseLine.MapName	<< MyServerResponseLine.GameType	<< MyServerResponseLine.GameVersion	<< MyServerResponseLine.ModName	<< MyServerResponseLine.CurrentPlayers	<< MyServerResponseLine.MaxPlayers	<< MyServerResponseLine.Ping	<< MyServerResponseLine.ServerInfo	<< MyServerResponseLine.PlayerInfo;
    }
};




// "event"	function whose parameters correspond to	"struct AGameInfo_eventBroadcastLocalized_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventBroadcastLocalized_Parms
{
	  class AActor* Sender;
	  class UClass* Message;
	  INT Switch;
	  class APlayerReplicationInfo* RelatedPRI_1;
	  class APlayerReplicationInfo* RelatedPRI_2;
	  class UObject* OptionalObject;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventBroadcast_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventBroadcast_Parms
{
	  class AActor* Sender;
	  FString msg;
	  FName Type;
	  class APlayerController* Target;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventAcceptInventory_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventAcceptInventory_Parms
{
	  class APawn* PlayerPawn;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventPostLogin_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventPostLogin_Parms
{
	  class APlayerController* NewPlayer;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventLogin_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventLogin_Parms
{
	  FString Portal;
	  FString Options;
	  FString Error;
	  class APlayerController* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventPreLogin_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventPreLogin_Parms
{
	  FString Options;
	  FString Address;
	  FString Error;
	  FString FailCode;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventGetBeaconText_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventGetBeaconText_Parms
{
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventInitGame_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventInitGame_Parms
{
	  FString Options;
	  FString Error;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventDetailChange_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventDetailChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventGameEnding_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventGameEnding_Parms
{
};




// Enum ECarriedObjectState is declared in "..\Engine\Classes\GameReplicationInfo.uc"
enum ECarriedObjectState
{
	 COS_Home                =0,
	 COS_HeldFriendly        =1,
	 COS_HeldEnemy           =2,
	 COS_Down                =3,
	 COS_MAX                 =4,
};


// "event"	function whose parameters correspond to	"struct APlayerReplicationInfo_eventClientNameChange_Parms"	is declared	in "..\Engine\Classes\PlayerReplicationInfo.uc"
struct APlayerReplicationInfo_eventClientNameChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerReplicationInfo_eventUpdateCharacter_Parms"	is declared	in "..\Engine\Classes\PlayerReplicationInfo.uc"
struct APlayerReplicationInfo_eventUpdateCharacter_Parms
{
};

// Struct FVoiceChatCodec	is declared	in "..\Engine\Classes\VoiceChatReplicationInfo.uc"
struct ENGINE_API FVoiceChatCodec
{
    FStringNoInit Codec;
    FStringNoInit CodecName;
    FStringNoInit CodecDescription;
};

// Constant NUMPROPS is declared in "..\Engine\Classes\VoiceChatReplicationInfo.uc"
#define UCONST_NUMPROPS 6

// "event"	function whose parameters correspond to	"struct AVoiceChatReplicationInfo_eventGetChannelIndex_Parms"	is declared	in "..\Engine\Classes\VoiceChatReplicationInfo.uc"
struct AVoiceChatReplicationInfo_eventGetChannelIndex_Parms
{
	  FString ChannelTitle;
	  INT TeamIndex;
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AVoiceChatReplicationInfo_eventGetChannelCount_Parms"	is declared	in "..\Engine\Classes\VoiceChatReplicationInfo.uc"
struct AVoiceChatReplicationInfo_eventGetChannelCount_Parms
{
	  INT ReturnValue;
};

// "event"	function whose parameters correspond to	"struct ASecurity_eventServerCallback_Parms"	is declared	in "..\Engine\Classes\Security.uc"
struct ASecurity_eventServerCallback_Parms
{
	  INT SecType;
	  FString data;
};
// Enum EJoinChatResult is declared in "..\Engine\Classes\VoiceChatRoom.uc"
enum EJoinChatResult
{
	 JCR_Invalid             =0,
	 JCR_Member              =1,
	 JCR_NeedPassword        =2,
	 JCR_WrongPassword       =3,
	 JCR_Banned              =4,
	 JCR_Full                =5,
	 JCR_NotAllowed          =6,
	 JCR_Success             =7,
	 JCR_MAX                 =8,
};

// "event"	function whose parameters correspond to	"struct AVoiceChatRoom_eventIsMember_Parms"	is declared	in "..\Engine\Classes\VoiceChatRoom.uc"
struct AVoiceChatRoom_eventIsMember_Parms
{
	  class APlayerReplicationInfo* PRI;
	  BITFIELD bNoCascade;
	  BITFIELD ReturnValue;
};
// Enum EFogType is declared in "..\Engine\Classes\ZoneInfo.uc"
enum EFogType
{
	 FG_Linear               =0,
	 FG_Exponential          =1,
	 FG_MAX                  =2,
};

// "event"	function whose parameters correspond to	"struct AZoneInfo_eventActorLeaving_Parms"	is declared	in "..\Engine\Classes\ZoneInfo.uc"
struct AZoneInfo_eventActorLeaving_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AZoneInfo_eventActorEntered_Parms"	is declared	in "..\Engine\Classes\ZoneInfo.uc"
struct AZoneInfo_eventActorEntered_Parms
{
	  class AActor* Other;
};
// Enum EPlatform is declared in "..\Engine\Classes\LevelInfo.uc"
enum EPlatform
{
	 PC                      =0,
	 PS2                     =1,
	 XBOX                    =2,
};
// Enum ENetMode is declared in "..\Engine\Classes\LevelInfo.uc"
enum ENetMode
{
	 NM_Standalone           =0,
	 NM_DedicatedServer      =1,
	 NM_ListenServer         =2,
	 NM_Client               =3,
	 NM_MAX                  =4,
};
// Enum ELevelAction is declared in "..\Engine\Classes\LevelInfo.uc"
enum ELevelAction
{
	 LEVACT_None             =0,
	 LEVACT_Loading          =1,
	 LEVACT_Saving           =2,
	 LEVACT_Connecting       =3,
	 LEVACT_Precaching       =4,
	 LEVACT_MAX              =5,
};
// Enum EHavokSolverType is declared in "..\Engine\Classes\LevelInfo.uc"
enum EHavokSolverType
{
	 HAVOKSOLVER_4ITERS_SOFT =0,
	 HAVOKSOLVER_4ITERS_MEDIUM=1,
	 HAVOKSOLVER_4ITERS_HARD =2,
	 HAVOKSOLVER_MAX         =3,
};
// Enum EPhysicsDetailLevel is declared in "..\Engine\Classes\LevelInfo.uc"
enum EPhysicsDetailLevel
{
	 PDL_Low                 =0,
	 PDL_Medium              =1,
	 PDL_High                =2,
	 PDL_MAX                 =3,
};
// Struct FRelevancyInfo	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ENGINE_API FRelevancyInfo
{
    class APawn* RelevantPawnViewer;
    class AActor* RelevantActor;
    BITFIELD bIsRelevant:1;
    FLOAT RelevantUpdateTime;
};


// "event"	function whose parameters correspond to	"struct ALevelInfo_eventAT_Tick_Parms"	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ALevelInfo_eventAT_Tick_Parms
{
	  FLOAT Delta;
};
// "event"	function whose parameters correspond to	"struct ALevelInfo_eventAT_Exec_Parms"	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ALevelInfo_eventAT_Exec_Parms
{
	  FVector Location;
};
// "event"	function whose parameters correspond to	"struct ALevelInfo_eventAT_Begin_Parms"	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ALevelInfo_eventAT_Begin_Parms
{
};
// "event"	function whose parameters correspond to	"struct ALevelInfo_eventServerTravel_Parms"	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ALevelInfo_eventServerTravel_Parms
{
	  FString URL;
	  BITFIELD bItems;
};
// "event"	function whose parameters correspond to	"struct ALevelInfo_eventAddPrecacheStaticMesh_Parms"	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ALevelInfo_eventAddPrecacheStaticMesh_Parms
{
	  class UStaticMesh* stat;
};
// "event"	function whose parameters correspond to	"struct ALevelInfo_eventAddPrecacheMaterial_Parms"	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ALevelInfo_eventAddPrecacheMaterial_Parms
{
	  class UMaterial* Mat;
};
// "event"	function whose parameters correspond to	"struct ALevelInfo_eventAddPrecacheMesh_Parms"	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ALevelInfo_eventAddPrecacheMesh_Parms
{
	  class UMesh* Mesh;
};
// "event"	function whose parameters correspond to	"struct ALevelInfo_eventFillRenderPrecacheArrays_Parms"	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ALevelInfo_eventFillRenderPrecacheArrays_Parms
{
};


// "event"	function whose parameters correspond to	"struct AWarpZoneInfo_eventForceGenerate_Parms"	is declared	in "..\Engine\Classes\WarpZoneInfo.uc"
struct AWarpZoneInfo_eventForceGenerate_Parms
{
};
// "event"	function whose parameters correspond to	"struct AWarpZoneInfo_eventGenerate_Parms"	is declared	in "..\Engine\Classes\WarpZoneInfo.uc"
struct AWarpZoneInfo_eventGenerate_Parms
{
};


// "event"	function whose parameters correspond to	"struct AKActor_eventKImpact_Parms"	is declared	in "..\Engine\Classes\KActor.uc"
struct AKActor_eventKImpact_Parms
{
	  class AActor* Other;
	  FVector Pos;
	  FVector impactVel;
	  FVector impactNorm;
};






// Enum EBumpType is declared in "..\Engine\Classes\Mover.uc"
enum EBumpType
{
	 BT_PlayerBump           =0,
	 BT_PawnBump             =1,
	 BT_AnyBump              =2,
	 BT_MAX                  =3,
};
// Enum EMoverGlideType is declared in "..\Engine\Classes\Mover.uc"
enum EMoverGlideType
{
	 MV_MoveByTime           =0,
	 MV_GlideByTime          =1,
	 MV_MAX                  =2,
};
// Enum EMoverEncroachType is declared in "..\Engine\Classes\Mover.uc"
enum EMoverEncroachType
{
	 ME_StopWhenEncroach     =0,
	 ME_ReturnWhenEncroach   =1,
	 ME_CrushWhenEncroach    =2,
	 ME_IgnoreWhenEncroach   =3,
	 ME_MAX                  =4,
};

// "event"	function whose parameters correspond to	"struct AMover_eventKeyFrameReached_Parms"	is declared	in "..\Engine\Classes\Mover.uc"
struct AMover_eventKeyFrameReached_Parms
{
};
// Struct FVisibleAwarenessPoint	is declared	in "..\Engine\Classes\NavigationPoint.uc"
struct ENGINE_API FVisibleAwarenessPoint
{
    class AAwarenessPoint* AwarenessPoint;
    TArrayNoInit<class ADoor*> DependsOnDoors;
};

// Struct FOcclusionNodeInformation	is declared	in "..\Engine\Classes\NavigationPoint.uc"
struct ENGINE_API FOcclusionNodeInformation
{
    FName OtherOcclusionNode;
    FLOAT ShortestDistanceTo;
    TArrayNoInit<class ADoor*> DoorsInBetween;
};


// "event"	function whose parameters correspond to	"struct ANavigationPoint_eventSuggestMovePreparation_Parms"	is declared	in "..\Engine\Classes\NavigationPoint.uc"
struct ANavigationPoint_eventSuggestMovePreparation_Parms
{
	  class APawn* Other;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ANavigationPoint_eventDetourWeight_Parms"	is declared	in "..\Engine\Classes\NavigationPoint.uc"
struct ANavigationPoint_eventDetourWeight_Parms
{
	  class APawn* Other;
	  FLOAT PathWeight;
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ANavigationPoint_eventAccept_Parms"	is declared	in "..\Engine\Classes\NavigationPoint.uc"
struct ANavigationPoint_eventAccept_Parms
{
	  class AActor* Incoming;
	  class AActor* Source;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ANavigationPoint_eventSpecialCost_Parms"	is declared	in "..\Engine\Classes\NavigationPoint.uc"
struct ANavigationPoint_eventSpecialCost_Parms
{
	  class APawn* Seeker;
	  class UReachSpec* Path;
	  INT ReturnValue;
};
// Enum DoorPosition is declared in "..\Engine\Classes\Door.uc"
enum DoorPosition
{
	 DoorPosition_Closed     =0,
	 DoorPosition_OpenLeft   =1,
	 DoorPosition_OpenRight  =2,
	 DoorPosition_MAX        =3,
};

// "event"	function whose parameters correspond to	"struct ADoor_eventDesiredPositionChanged_Parms"	is declared	in "..\Engine\Classes\Door.uc"
struct ADoor_eventDesiredPositionChanged_Parms
{
};
// "event"	function whose parameters correspond to	"struct ADoor_eventIsEmptyDoorway_Parms"	is declared	in "..\Engine\Classes\Door.uc"
struct ADoor_eventIsEmptyDoorway_Parms
{
	  BITFIELD ReturnValue;
};








// Enum EAnimPlayType is declared in "..\Engine\Classes\Pawn.uc"
enum EAnimPlayType
{
	 kAPT_Normal             =0,
	 kAPT_Additive           =1,
	 kAPT_MAX                =2,
};
// Enum ELeanState is declared in "..\Engine\Classes\Pawn.uc"
enum ELeanState
{
	 kLeanStateNone          =0,
	 kLeanStateLeft          =1,
	 kLeanStateRight         =2,
};
// Constant kInvalidKillerLocationZ is declared in "..\Engine\Classes\Pawn.uc"
#define UCONST_kInvalidKillerLocationZ -10000.0
// Constant kMaxRetestPathReachabilityDelta is declared in "..\Engine\Classes\Pawn.uc"
#define UCONST_kMaxRetestPathReachabilityDelta 0.75
// Constant kMinRetestPathReachabilityDelta is declared in "..\Engine\Classes\Pawn.uc"
#define UCONST_kMinRetestPathReachabilityDelta 0.25

// "event"	function whose parameters correspond to	"struct APawn_eventShouldPlayWalkingAnimations_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventShouldPlayWalkingAnimations_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventApplyRotationOffset_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventApplyRotationOffset_Parms
{
	  FVector Acceleration;
};
// "event"	function whose parameters correspond to	"struct APawn_eventBecomeRagdoll_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventBecomeRagdoll_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventViewRotationOffset_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventViewRotationOffset_Parms
{
	  FRotator ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventOnCollisionAvoidanceMoveTo_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventOnCollisionAvoidanceMoveTo_Parms
{
	  FVector MoveToLocation;
};
// "event"	function whose parameters correspond to	"struct APawn_eventDesiredItemPocketChanged_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventDesiredItemPocketChanged_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventPlayLandingAnimation_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventPlayLandingAnimation_Parms
{
	  FLOAT impactVel;
};
// "event"	function whose parameters correspond to	"struct APawn_eventPlayFalling_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventPlayFalling_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventPlayJump_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventPlayJump_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventChangeAnimation_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventChangeAnimation_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventPlayDying_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventPlayDying_Parms
{
	  class UClass* DamageType;
	  FVector HitLoc;
	  FVector HitMomentum;
	  FVector inKillerLocation;
};
// "event"	function whose parameters correspond to	"struct APawn_eventSetAnimAction_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventSetAnimAction_Parms
{
	  FName NewAction;
};
// "event"	function whose parameters correspond to	"struct APawn_eventHeadVolumeChange_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventHeadVolumeChange_Parms
{
	  class APhysicsVolume* newHeadVolume;
};
// "event"	function whose parameters correspond to	"struct APawn_eventCanMoveFreely_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventCanMoveFreely_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventIsLowerBodyInjured_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventIsLowerBodyInjured_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventIsInjured_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventIsInjured_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventisAlive_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventisAlive_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventGetCurrentAssignment_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventGetCurrentAssignment_Parms
{
	  class APawn* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventIsArrested_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventIsArrested_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventGetAdditionalBaseAimError_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventGetAdditionalBaseAimError_Parms
{
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventNotifyEndedCollisionAvoidance_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventNotifyEndedCollisionAvoidance_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventNotifyBeganCollisionAvoidance_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventNotifyBeganCollisionAvoidance_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventIsStunned_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventIsStunned_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventUpdateEyeHeight_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventUpdateEyeHeight_Parms
{
	  FLOAT DeltaTime;
};
// "event"	function whose parameters correspond to	"struct APawn_eventOnLeanStateChange_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventOnLeanStateChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventStartCrouch_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventStartCrouch_Parms
{
	  FLOAT HeightAdjust;
};
// "event"	function whose parameters correspond to	"struct APawn_eventEndCrouch_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventEndCrouch_Parms
{
	  FLOAT HeightAdjust;
};
// "event"	function whose parameters correspond to	"struct APawn_eventModifyVelocity_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventModifyVelocity_Parms
{
	  FLOAT DeltaTime;
	  FVector OldVelocity;
};
// "event"	function whose parameters correspond to	"struct APawn_eventClientMessage_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventClientMessage_Parms
{
	  FString S;
	  FName Type;
};
// "event"	function whose parameters correspond to	"struct APawn_eventSetWalking_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventSetWalking_Parms
{
	  BITFIELD bNewIsWalking;
};
// "event"	function whose parameters correspond to	"struct APawn_eventGetTeamNumber_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventGetTeamNumber_Parms
{
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventSetHeadScale_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventSetHeadScale_Parms
{
	  FLOAT NewScale;
};
// "event"	function whose parameters correspond to	"struct APawn_eventHavokCharacterCollision_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventHavokCharacterCollision_Parms
{
	  FHavokCharacterObjectInteractionEvent data;
	  FHavokCharacterObjectInteractionResult res;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventCanHit_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventCanHit_Parms
{
	  class AActor* Target;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventCanHitTargetAt_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventCanHitTargetAt_Parms
{
	  class AActor* Target;
	  FVector AILocation;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventIgnoresSeenPawnsOfType_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventIgnoresSeenPawnsOfType_Parms
{
	  class UClass* SeenType;
	  BITFIELD ReturnValue;
};


// Enum EProjectorBlending is declared in "..\Engine\Classes\Projector.uc"
enum EProjectorBlending
{
	 PB_None                 =0,
	 PB_Modulate             =1,
	 PB_AlphaBlend           =2,
	 PB_Add                  =3,
	 PB_AlphaModulate        =4,
	 PB_MAX                  =5,
};

// "event"	function whose parameters correspond to	"struct AProjector_eventPreRenderCallback_Parms"	is declared	in "..\Engine\Classes\Projector.uc"
struct AProjector_eventPreRenderCallback_Parms
{
};




// "event"	function whose parameters correspond to	"struct AMassiveStaticMesh_eventGetMassiveAdTargetName_Parms"	is declared	in "..\Engine\Classes\MassiveAdClient\MassiveStaticMesh.uc"
struct AMassiveStaticMesh_eventGetMassiveAdTargetName_Parms
{
	  FString ReturnValue;
};


// "event"	function whose parameters correspond to	"struct ATimer_eventGetLastDuration_Parms"	is declared	in "..\Engine\Classes\Timer.uc"
struct ATimer_eventGetLastDuration_Parms
{
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ATimer_eventGetLastStartTime_Parms"	is declared	in "..\Engine\Classes\Timer.uc"
struct ATimer_eventGetLastStartTime_Parms
{
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ATimer_eventTimerDelegate_Parms"	is declared	in "..\Engine\Classes\Timer.uc"
struct ATimer_eventTimerDelegate_Parms
{
};


// "event"	function whose parameters correspond to	"struct ALineOfSightTrigger_eventPlayerSeesMe_Parms"	is declared	in "..\Engine\Classes\LineOfSightTrigger.uc"
struct ALineOfSightTrigger_eventPlayerSeesMe_Parms
{
	  class APlayerController* P;
};
// Enum ETriggerType is declared in "..\Engine\Classes\Trigger.uc"
enum ETriggerType
{
	 TT_PlayerProximity      =0,
	 TT_PawnProximity        =1,
	 TT_ClassProximity       =2,
	 TT_AnyProximity         =3,
	 TT_Shoot                =4,
	 TT_HumanPlayerProximity =5,
	 TT_MAX                  =6,
};


// Enum EWeatherType is declared in "..\Engine\Classes\Effects\xWeatherEffect.uc"
enum EWeatherType
{
	 WT_Rain                 =0,
	 WT_Snow                 =1,
	 WT_Dust                 =2,
	 WT_MAX                  =3,
};
// Struct FWeatherPcl	is declared	in "..\Engine\Classes\Effects\xWeatherEffect.uc"
struct ENGINE_API FWeatherPcl
{
    FVector Pos;
    FVector Vel;
    FLOAT Life;
    FLOAT Size;
    FLOAT HitTime;
    FLOAT InvLifeSpan;
    FLOAT DistAtten;
    BYTE frame;
    BYTE Dummy1;
    BYTE Visible;
    BYTE Dummy2;
};








// "event"	function whose parameters correspond to	"struct UAnimNotify_Scripted_eventNotify_Parms"	is declared	in "..\Engine\Classes\AnimNotify_Scripted.uc"
struct UAnimNotify_Scripted_eventNotify_Parms
{
	  class AActor* Owner;
};




// Enum EGameSpyResult is declared in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
enum EGameSpyResult
{
	 GSR_VALID_PROFILE       =0,
	 GSR_USER_CONNECTED      =1,
	 GSR_REGISTERED_UNIQUE_NICK=2,
	 GSR_UNIQUE_NICK_TAKEN   =3,
	 GSR_BAD_EMAIL           =4,
	 GSR_BAD_PASSWORD        =5,
	 GSR_BAD_NICK            =6,
	 GSR_TIMED_OUT           =7,
	 GSR_GENERAL_FAILURE     =8,
	 GSR_MAX                 =9,
};

// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventOnLevelDestroyed_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventOnLevelDestroyed_Parms
{
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventNotifyServerReceivePIDResponse_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventNotifyServerReceivePIDResponse_Parms
{
	  class APlayerController* P;
	  INT statusCode;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventOnServerReceivedStatsResponse_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventOnServerReceivedStatsResponse_Parms
{
	  class APlayerController* P;
	  INT statusCode;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetProductRegionID_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetProductRegionID_Parms
{
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetProductVersionID_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetProductVersionID_Parms
{
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventOnQueryPatchResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventOnQueryPatchResult_Parms
{
	  BITFIELD bNeeded;
	  BITFIELD bMandatory;
	  FString versionName;
	  FString URL;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventQueryPatchCompleted_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventQueryPatchCompleted_Parms
{
	  BITFIELD bNeeded;
	  BITFIELD bMandatory;
	  FString versionName;
	  INT FilePlanetID;
	  FString URL;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetPatchDownloadURL_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetPatchDownloadURL_Parms
{
	  INT FilePlanetID;
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventShouldAdvertiseServerOnInternet_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventShouldAdvertiseServerOnInternet_Parms
{
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventShouldCheckClientCDKeys_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventShouldCheckClientCDKeys_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventProfileCheckResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventProfileCheckResult_Parms
{
	  BYTE Result;
	  INT profileId;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventProfileCreateResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventProfileCreateResult_Parms
{
	  BYTE Result;
	  INT profileId;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventEmailAlreadyTaken_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventEmailAlreadyTaken_Parms
{
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetGameSpyPassword_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetGameSpyPassword_Parms
{
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetGameSpyProfileId_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetGameSpyProfileId_Parms
{
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetNumTeams_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetNumTeams_Parms
{
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetValueForTeamKey_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetValueForTeamKey_Parms
{
	  INT Key;
	  INT Index;
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetValueForPlayerKey_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetValueForPlayerKey_Parms
{
	  INT Key;
	  INT Index;
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetValueForKey_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetValueForKey_Parms
{
	  INT Key;
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventUpdateComplete_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventUpdateComplete_Parms
{
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventUpdatedServerData_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventUpdatedServerData_Parms
{
	  INT ServerID;
	  FString ipAddress;
	  INT Ping;
	  TArray<FString> serverData;
	  TArray<FString> playerData;
	  TArray<FString> teamData;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventAuthenticatedProfileResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventAuthenticatedProfileResult_Parms
{
	  INT profileId;
	  INT authenticated;
	  FString Error;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventUniqueNickRegistrationResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventUniqueNickRegistrationResult_Parms
{
	  BYTE Result;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventUserConnectionResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventUserConnectionResult_Parms
{
	  BYTE Result;
	  INT profileId;
	  FString UniqueNick;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventInitGameSpyData_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventInitGameSpyData_Parms
{
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventOnLevelChange_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventOnLevelChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGameSpyInitialised_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGameSpyInitialised_Parms
{
};

// Enum EOrientationConstraint is declared in "..\Engine\Classes\HavokRigidBody.uc"
enum EOrientationConstraint
{
	 HKOC_Free               =0,
	 HKOC_ConstrainX         =1,
	 HKOC_ConstrainY         =2,
	 HKOC_ConstrainZ         =3,
	 HKOC_ConstrainXYZ       =4,
	 HKOC_MAX                =5,
};
// Constant HavokCollisionLayer_Debris is declared in "..\Engine\Classes\HavokRigidBody.uc"
#define UCONST_HavokCollisionLayer_Debris 7
// Constant HavokCollisionLayer_Keyframed is declared in "..\Engine\Classes\HavokRigidBody.uc"
#define UCONST_HavokCollisionLayer_Keyframed 5
// Constant HavokCollisionLayer_Dynamic is declared in "..\Engine\Classes\HavokRigidBody.uc"
#define UCONST_HavokCollisionLayer_Dynamic 2
// Constant HavokCollisionLayer_Static is declared in "..\Engine\Classes\HavokRigidBody.uc"
#define UCONST_HavokCollisionLayer_Static 1
// Constant HavokCollisionLayer_All is declared in "..\Engine\Classes\HavokRigidBody.uc"
#define UCONST_HavokCollisionLayer_All 0




// "event"	function whose parameters correspond to	"struct IICanBeArrested_eventIsArrested_Parms"	is declared	in "..\Engine\Classes\Equipment\ICanBeArrested.uc"
struct IICanBeArrested_IsArrested_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IICanBeArrested_eventGetQualifyTimeForArrest_Parms"	is declared	in "..\Engine\Classes\Equipment\ICanBeArrested.uc"
struct IICanBeArrested_GetQualifyTimeForArrest_Parms
{
	  class APawn* Arrester;
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IICanBeArrested_eventOnArrestInterrupted_Parms"	is declared	in "..\Engine\Classes\Equipment\ICanBeArrested.uc"
struct IICanBeArrested_OnArrestInterrupted_Parms
{
	  class APawn* Arrester;
};
// "event"	function whose parameters correspond to	"struct IICanBeArrested_eventOnArrested_Parms"	is declared	in "..\Engine\Classes\Equipment\ICanBeArrested.uc"
struct IICanBeArrested_OnArrested_Parms
{
	  class APawn* Arrester;
};
// "event"	function whose parameters correspond to	"struct IICanBeArrested_eventOnArrestBegan_Parms"	is declared	in "..\Engine\Classes\Equipment\ICanBeArrested.uc"
struct IICanBeArrested_OnArrestBegan_Parms
{
	  class APawn* Arrester;
};
// "event"	function whose parameters correspond to	"struct IICanBeArrested_eventIsBeingArrestedNow_Parms"	is declared	in "..\Engine\Classes\Equipment\ICanBeArrested.uc"
struct IICanBeArrested_IsBeingArrestedNow_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IICanBeArrested_eventCanBeArrestedNow_Parms"	is declared	in "..\Engine\Classes\Equipment\ICanBeArrested.uc"
struct IICanBeArrested_CanBeArrestedNow_Parms
{
	  BITFIELD ReturnValue;
};

// "event"	function whose parameters correspond to	"struct IICanBeUsed_eventUniqueID_Parms"	is declared	in "..\Engine\Classes\ICanBeUsed.uc"
struct IICanBeUsed_UniqueID_Parms
{
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IICanBeUsed_eventPostUsed_Parms"	is declared	in "..\Engine\Classes\ICanBeUsed.uc"
struct IICanBeUsed_PostUsed_Parms
{
};
// "event"	function whose parameters correspond to	"struct IICanBeUsed_eventOnUsed_Parms"	is declared	in "..\Engine\Classes\ICanBeUsed.uc"
struct IICanBeUsed_OnUsed_Parms
{
	  class APawn* Other;
};
// "event"	function whose parameters correspond to	"struct IICanBeUsed_eventCanBeUsedNow_Parms"	is declared	in "..\Engine\Classes\ICanBeUsed.uc"
struct IICanBeUsed_CanBeUsedNow_Parms
{
	  BITFIELD ReturnValue;
};

// "event"	function whose parameters correspond to	"struct IIControllableViewport_eventGetCurrentControllable_Parms"	is declared	in "..\Engine\Classes\ExternalCameras\IControllableViewport.uc"
struct IIControllableViewport_GetCurrentControllable_Parms
{
	  class IIControllableThroughViewport* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IIControllableViewport_eventHandleReload_Parms"	is declared	in "..\Engine\Classes\ExternalCameras\IControllableViewport.uc"
struct IIControllableViewport_HandleReload_Parms
{
};
// "event"	function whose parameters correspond to	"struct IIControllableViewport_eventHandleAltFire_Parms"	is declared	in "..\Engine\Classes\ExternalCameras\IControllableViewport.uc"
struct IIControllableViewport_HandleAltFire_Parms
{
};
// "event"	function whose parameters correspond to	"struct IIControllableViewport_eventHandleFire_Parms"	is declared	in "..\Engine\Classes\ExternalCameras\IControllableViewport.uc"
struct IIControllableViewport_HandleFire_Parms
{
	  BITFIELD OnServer;
	  FVector CameraLocation;
	  FRotator CameraRotation;
};
// "event"	function whose parameters correspond to	"struct IIControllableViewport_eventViewportCalcView_Parms"	is declared	in "..\Engine\Classes\ExternalCameras\IControllableViewport.uc"
struct IIControllableViewport_ViewportCalcView_Parms
{
	  FVector CameraLocation;
	  FRotator CameraRotation;
};
// "event"	function whose parameters correspond to	"struct IIControllableViewport_eventSetInput_Parms"	is declared	in "..\Engine\Classes\ExternalCameras\IControllableViewport.uc"
struct IIControllableViewport_SetInput_Parms
{
	  INT dMouseX;
	  INT dMouseY;
};
// "event"	function whose parameters correspond to	"struct IIControllableViewport_eventCanIssueCommands_Parms"	is declared	in "..\Engine\Classes\ExternalCameras\IControllableViewport.uc"
struct IIControllableViewport_CanIssueCommands_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IIControllableViewport_eventShouldControlViewport_Parms"	is declared	in "..\Engine\Classes\ExternalCameras\IControllableViewport.uc"
struct IIControllableViewport_ShouldControlViewport_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IIControllableViewport_eventGetControllingStateName_Parms"	is declared	in "..\Engine\Classes\ExternalCameras\IControllableViewport.uc"
struct IIControllableViewport_GetControllingStateName_Parms
{
	  FName ReturnValue;
};
// "event"	function whose parameters correspond to	"struct IIControllableViewport_eventOnEndControlling_Parms"	is declared	in "..\Engine\Classes\ExternalCameras\IControllableViewport.uc"
struct IIControllableViewport_OnEndControlling_Parms
{
};
// "event"	function whose parameters correspond to	"struct IIControllableViewport_eventOnBeginControlling_Parms"	is declared	in "..\Engine\Classes\ExternalCameras\IControllableViewport.uc"
struct IIControllableViewport_OnBeginControlling_Parms
{
};

// "event"	function whose parameters correspond to	"struct IIEffectObserver_eventOnEffectInitialized_Parms"	is declared	in "..\Engine\Classes\IEffectObserver.uc"
struct IIEffectObserver_OnEffectInitialized_Parms
{
	  class AActor* inInitializedEffect;
};
// "event"	function whose parameters correspond to	"struct IIEffectObserver_eventOnEffectStopped_Parms"	is declared	in "..\Engine\Classes\IEffectObserver.uc"
struct IIEffectObserver_OnEffectStopped_Parms
{
	  class AActor* inStoppedEffect;
	  BITFIELD Completed;
};
// "event"	function whose parameters correspond to	"struct IIEffectObserver_eventOnEffectStarted_Parms"	is declared	in "..\Engine\Classes\IEffectObserver.uc"
struct IIEffectObserver_OnEffectStarted_Parms
{
	  class AActor* inStartedEffect;
};


// "event"	function whose parameters correspond to	"struct IIInterestedActorDestroyed_eventOnOtherActorDestroyed_Parms"	is declared	in "..\Engine\Classes\IInterestedActorDestroyed.uc"
struct IIInterestedActorDestroyed_OnOtherActorDestroyed_Parms
{
	  class AActor* ActorBeingDestroyed;
};

// "event"	function whose parameters correspond to	"struct IIInterestedPawnDied_eventOnOtherPawnDied_Parms"	is declared	in "..\Engine\Classes\IInterestedPawnDied.uc"
struct IIInterestedPawnDied_OnOtherPawnDied_Parms
{
	  class APawn* DeadPawn;
};
// Enum EInputKey is declared in "..\Engine\Classes\Interactions.uc"
enum EInputKey
{
	 IK_None                 =0,
	 IK_LeftMouse            =1,
	 IK_RightMouse           =2,
	 IK_Cancel               =3,
	 IK_MiddleMouse          =4,
	 IK_Unknown05            =5,
	 IK_Unknown06            =6,
	 IK_Unknown07            =7,
	 IK_Backspace            =8,
	 IK_Tab                  =9,
	 IK_Unknown0A            =10,
	 IK_Unknown0B            =11,
	 IK_Unknown0C            =12,
	 IK_Enter                =13,
	 IK_Unknown0E            =14,
	 IK_Unknown0F            =15,
	 IK_Shift                =16,
	 IK_Ctrl                 =17,
	 IK_Alt                  =18,
	 IK_Pause                =19,
	 IK_CapsLock             =20,
	 IK_Unknown15            =21,
	 IK_Unknown16            =22,
	 IK_Unknown17            =23,
	 IK_Unknown18            =24,
	 IK_Unknown19            =25,
	 IK_Unknown1A            =26,
	 IK_Escape               =27,
	 IK_Unknown1C            =28,
	 IK_Unknown1D            =29,
	 IK_Unknown1E            =30,
	 IK_Unknown1F            =31,
	 IK_Space                =32,
	 IK_PageUp               =33,
	 IK_PageDown             =34,
	 IK_End                  =35,
	 IK_Home                 =36,
	 IK_Left                 =37,
	 IK_Up                   =38,
	 IK_Right                =39,
	 IK_Down                 =40,
	 IK_Select               =41,
	 IK_Print                =42,
	 IK_Execute              =43,
	 IK_PrintScrn            =44,
	 IK_Insert               =45,
	 IK_Delete               =46,
	 IK_Help                 =47,
	 IK_0                    =48,
	 IK_1                    =49,
	 IK_2                    =50,
	 IK_3                    =51,
	 IK_4                    =52,
	 IK_5                    =53,
	 IK_6                    =54,
	 IK_7                    =55,
	 IK_8                    =56,
	 IK_9                    =57,
	 IK_Unknown3A            =58,
	 IK_Unknown3B            =59,
	 IK_Unknown3C            =60,
	 IK_Unknown3D            =61,
	 IK_Unknown3E            =62,
	 IK_Unknown3F            =63,
	 IK_Unknown40            =64,
	 IK_A                    =65,
	 IK_B                    =66,
	 IK_C                    =67,
	 IK_D                    =68,
	 IK_E                    =69,
	 IK_F                    =70,
	 IK_G                    =71,
	 IK_H                    =72,
	 IK_I                    =73,
	 IK_J                    =74,
	 IK_K                    =75,
	 IK_L                    =76,
	 IK_M                    =77,
	 IK_N                    =78,
	 IK_O                    =79,
	 IK_P                    =80,
	 IK_Q                    =81,
	 IK_R                    =82,
	 IK_S                    =83,
	 IK_T                    =84,
	 IK_U                    =85,
	 IK_V                    =86,
	 IK_W                    =87,
	 IK_X                    =88,
	 IK_Y                    =89,
	 IK_Z                    =90,
	 IK_Unknown5B            =91,
	 IK_Unknown5C            =92,
	 IK_Unknown5D            =93,
	 IK_Unknown5E            =94,
	 IK_Unknown5F            =95,
	 IK_NumPad0              =96,
	 IK_NumPad1              =97,
	 IK_NumPad2              =98,
	 IK_NumPad3              =99,
	 IK_NumPad4              =100,
	 IK_NumPad5              =101,
	 IK_NumPad6              =102,
	 IK_NumPad7              =103,
	 IK_NumPad8              =104,
	 IK_NumPad9              =105,
	 IK_GreyStar             =106,
	 IK_GreyPlus             =107,
	 IK_Separator            =108,
	 IK_GreyMinus            =109,
	 IK_NumPadPeriod         =110,
	 IK_GreySlash            =111,
	 IK_F1                   =112,
	 IK_F2                   =113,
	 IK_F3                   =114,
	 IK_F4                   =115,
	 IK_F5                   =116,
	 IK_F6                   =117,
	 IK_F7                   =118,
	 IK_F8                   =119,
	 IK_F9                   =120,
	 IK_F10                  =121,
	 IK_F11                  =122,
	 IK_F12                  =123,
	 IK_F13                  =124,
	 IK_F14                  =125,
	 IK_F15                  =126,
	 IK_F16                  =127,
	 IK_F17                  =128,
	 IK_F18                  =129,
	 IK_F19                  =130,
	 IK_F20                  =131,
	 IK_F21                  =132,
	 IK_F22                  =133,
	 IK_F23                  =134,
	 IK_F24                  =135,
	 IK_Unknown88            =136,
	 IK_Unknown89            =137,
	 IK_Unknown8A            =138,
	 IK_Unknown8B            =139,
	 IK_Unknown8C            =140,
	 IK_Unknown8D            =141,
	 IK_Unknown8E            =142,
	 IK_Unknown8F            =143,
	 IK_NumLock              =144,
	 IK_ScrollLock           =145,
	 IK_Unknown92            =146,
	 IK_Unknown93            =147,
	 IK_Unknown94            =148,
	 IK_Unknown95            =149,
	 IK_Unknown96            =150,
	 IK_Unknown97            =151,
	 IK_Unknown98            =152,
	 IK_Unknown99            =153,
	 IK_Unknown9A            =154,
	 IK_Unknown9B            =155,
	 IK_Unknown9C            =156,
	 IK_Unknown9D            =157,
	 IK_Unknown9E            =158,
	 IK_Unknown9F            =159,
	 IK_LShift               =160,
	 IK_RShift               =161,
	 IK_LControl             =162,
	 IK_RControl             =163,
	 IK_UnknownA4            =164,
	 IK_UnknownA5            =165,
	 IK_UnknownA6            =166,
	 IK_UnknownA7            =167,
	 IK_UnknownA8            =168,
	 IK_UnknownA9            =169,
	 IK_UnknownAA            =170,
	 IK_UnknownAB            =171,
	 IK_UnknownAC            =172,
	 IK_UnknownAD            =173,
	 IK_UnknownAE            =174,
	 IK_UnknownAF            =175,
	 IK_UnknownB0            =176,
	 IK_UnknownB1            =177,
	 IK_UnknownB2            =178,
	 IK_UnknownB3            =179,
	 IK_UnknownB4            =180,
	 IK_UnknownB5            =181,
	 IK_UnknownB6            =182,
	 IK_UnknownB7            =183,
	 IK_UnknownB8            =184,
	 IK_Unicode              =185,
	 IK_Semicolon            =186,
	 IK_Equals               =187,
	 IK_Comma                =188,
	 IK_Minus                =189,
	 IK_Period               =190,
	 IK_Slash                =191,
	 IK_Tilde                =192,
	 IK_Mouse4               =193,
	 IK_Mouse5               =194,
	 IK_Mouse6               =195,
	 IK_Mouse7               =196,
	 IK_Mouse8               =197,
	 IK_UnknownC6            =198,
	 IK_UnknownC7            =199,
	 IK_Joy1                 =200,
	 IK_Joy2                 =201,
	 IK_Joy3                 =202,
	 IK_Joy4                 =203,
	 IK_Joy5                 =204,
	 IK_Joy6                 =205,
	 IK_Joy7                 =206,
	 IK_Joy8                 =207,
	 IK_Joy9                 =208,
	 IK_Joy10                =209,
	 IK_Joy11                =210,
	 IK_Joy12                =211,
	 IK_Joy13                =212,
	 IK_Joy14                =213,
	 IK_Joy15                =214,
	 IK_Joy16                =215,
	 IK_UnknownD8            =216,
	 IK_UnknownD9            =217,
	 IK_UnknownDA            =218,
	 IK_LeftBracket          =219,
	 IK_Backslash            =220,
	 IK_RightBracket         =221,
	 IK_SingleQuote          =222,
	 IK_UnknownDF            =223,
	 IK_UnknownE0            =224,
	 IK_UnknownE1            =225,
	 IK_UnknownE2            =226,
	 IK_UnknownE3            =227,
	 IK_MouseX               =228,
	 IK_MouseY               =229,
	 IK_MouseZ               =230,
	 IK_MouseW               =231,
	 IK_JoyU                 =232,
	 IK_JoyV                 =233,
	 IK_JoySlider1           =234,
	 IK_JoySlider2           =235,
	 IK_MouseWheelUp         =236,
	 IK_MouseWheelDown       =237,
	 IK_Unknown10E           =238,
	 UK_Unknown10F           =239,
	 IK_JoyX                 =240,
	 IK_JoyY                 =241,
	 IK_JoyZ                 =242,
	 IK_JoyR                 =243,
	 IK_UnknownF4            =244,
	 IK_UnknownF5            =245,
	 IK_Attn                 =246,
	 IK_CrSel                =247,
	 IK_ExSel                =248,
	 IK_ErEof                =249,
	 IK_Play                 =250,
	 IK_Zoom                 =251,
	 IK_NoName               =252,
	 IK_PA1                  =253,
	 IK_OEMClear             =254,
	 IK_MAX                  =255,
};
// Enum EInputAction is declared in "..\Engine\Classes\Interactions.uc"
enum EInputAction
{
	 IST_None                =0,
	 IST_Press               =1,
	 IST_Hold                =2,
	 IST_Release             =3,
	 IST_Axis                =4,
	 IST_Repeat              =5,
	 IST_MAX                 =6,
};


// "event"	function whose parameters correspond to	"struct UInteraction_eventInitialized_Parms"	is declared	in "..\Engine\Classes\Interaction.uc"
struct UInteraction_eventInitialized_Parms
{
};
// Struct FPlayerIDSpoke	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct ENGINE_API FPlayerIDSpoke
{
    INT PlayerID;
    FLOAT SpeakTime;
};


// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventAddPlayerIDSpoke_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventAddPlayerIDSpoke_Parms
{
	  INT PlayerID;
	  FLOAT SpeakTime;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventInitializeController_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventInitializeController_Parms
{
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventCloseAll_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventCloseAll_Parms
{
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventCloseMenu_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventCloseMenu_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventReplaceMenu_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventReplaceMenu_Parms
{
	  FString NewMenuName;
	  FString MenuNameOverride;
	  FString Param1;
	  FString Param2;
	  INT Param3;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventAutoLoadMenus_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventAutoLoadMenus_Parms
{
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventOpenMenu_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventOpenMenu_Parms
{
	  FString NewMenuName;
	  FString MenuNameOverride;
	  FString Param1;
	  FString Param2;
	  INT Param3;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventSetProgress_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventSetProgress_Parms
{
	  FString Message1;
	  FString Message2;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventPostLevelChange_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventPostLevelChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventPreLevelChange_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventPreLevelChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventOnAdminReply_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventOnAdminReply_Parms
{
	  FString Reply;
};

// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventProcess_Message_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventProcess_Message_Parms
{
	  FString msg;
	  FLOAT MsgLife;
	  TArray<class UInteraction*> InteractionArray;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventProcess_Tick_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventProcess_Tick_Parms
{
	  TArray<class UInteraction*> InteractionArray;
	  FLOAT DeltaTime;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventProcess_PostRender_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventProcess_PostRender_Parms
{
	  TArray<class UInteraction*> InteractionArray;
	  class UCanvas* Canvas;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventProcess_PreRender_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventProcess_PreRender_Parms
{
	  TArray<class UInteraction*> InteractionArray;
	  class UCanvas* Canvas;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventProcess_KeyEvent_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventProcess_KeyEvent_Parms
{
	  TArray<class UInteraction*> InteractionArray;
	  BYTE Key;
	  BYTE Action;
	  FLOAT Delta;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventProcess_KeyType_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventProcess_KeyType_Parms
{
	  TArray<class UInteraction*> InteractionArray;
	  BYTE Key;
	  FString Unicode;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventSetFocusTo_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventSetFocusTo_Parms
{
	  class UInteraction* Inter;
	  class UPlayer* ViewportOwner;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventRemoveInteraction_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventRemoveInteraction_Parms
{
	  class UInteraction* RemoveMe;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventAddInteraction_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventAddInteraction_Parms
{
	  FString InteractionName;
	  class UPlayer* AttachTo;
	  class UInteraction* ReturnValue;
};

// Enum EAlphaOperation is declared in "..\Engine\Classes\Combiner.uc"
enum EAlphaOperation
{
	 AO_Use_Mask             =0,
	 AO_Multiply             =1,
	 AO_Add                  =2,
	 AO_Use_Alpha_From_Material1=3,
	 AO_Use_Alpha_From_Material2=4,
	 AO_MAX                  =5,
};
// Enum EColorOperation is declared in "..\Engine\Classes\Combiner.uc"
enum EColorOperation
{
	 CO_Use_Color_From_Material1=0,
	 CO_Use_Color_From_Material2=1,
	 CO_Multiply             =2,
	 CO_Add                  =3,
	 CO_Subtract             =4,
	 CO_AlphaBlend_With_Mask =5,
	 CO_Add_With_Mask_Modulation=6,
	 CO_Use_Color_From_Mask  =7,
	 CO_MAX                  =8,
};



// Enum EFrameBufferBlending is declared in "..\Engine\Classes\FinalBlend.uc"
enum EFrameBufferBlending
{
	 FB_Overwrite            =0,
	 FB_Modulate             =1,
	 FB_AlphaBlend           =2,
	 FB_AlphaModulate_MightNotFogCorrectly=3,
	 FB_Translucent          =4,
	 FB_Darken               =5,
	 FB_Brighten             =6,
	 FB_Invisible            =7,
	 FB_ShadowBlend          =8,
	 FB_ShadowBlendOverwrite =9,
	 FB_MAX                  =10,
};

// Enum EMaterialSequenceTriggerActon is declared in "..\Engine\Classes\MaterialSequence.uc"
enum EMaterialSequenceTriggerActon
{
	 MSTA_Ignore             =0,
	 MSTA_Reset              =1,
	 MSTA_Pause              =2,
	 MSTA_Stop               =3,
	 MSTA_MAX                =4,
};
// Enum EMaterialSequenceAction is declared in "..\Engine\Classes\MaterialSequence.uc"
enum EMaterialSequenceAction
{
	 MSA_ShowMaterial        =0,
	 MSA_FadeToMaterial      =1,
	 MSA_MAX                 =2,
};
// Struct FMaterialSequenceItem	is declared	in "..\Engine\Classes\MaterialSequence.uc"
struct ENGINE_API FMaterialSequenceItem
{
    class UMaterial* Material;
    FLOAT Time;
    BYTE Action;
};




// Enum ETexCoordCount is declared in "..\Engine\Classes\TexModifier.uc"
enum ETexCoordCount
{
	 TCN_2DCoords            =0,
	 TCN_3DCoords            =1,
	 TCN_4DCoords            =2,
	 TCN_MAX                 =3,
};
// Enum ETexCoordSrc is declared in "..\Engine\Classes\TexModifier.uc"
enum ETexCoordSrc
{
	 TCS_Stream0             =0,
	 TCS_Stream1             =1,
	 TCS_Stream2             =2,
	 TCS_Stream3             =3,
	 TCS_Stream4             =4,
	 TCS_Stream5             =5,
	 TCS_Stream6             =6,
	 TCS_Stream7             =7,
	 TCS_WorldCoords         =8,
	 TCS_CameraCoords        =9,
	 TCS_WorldEnvMapCoords   =10,
	 TCS_CameraEnvMapCoords  =11,
	 TCS_ProjectorCoords     =12,
	 TCS_NoChange            =13,
	 TCS_MAX                 =14,
};


// Enum ETexEnvMapType is declared in "..\Engine\Classes\TexEnvMap.uc"
enum ETexEnvMapType
{
	 EM_WorldSpace           =0,
	 EM_CameraSpace          =1,
	 EM_MAX                  =2,
};


// Enum ETexOscillationType is declared in "..\Engine\Classes\TexOscillator.uc"
enum ETexOscillationType
{
	 OT_Pan                  =0,
	 OT_Stretch              =1,
	 OT_StretchRepeat        =2,
	 OT_Jitter               =3,
	 OT_MAX                  =4,
};

// Enum ERetriggerAction is declared in "..\Engine\Classes\TexOscillatorTriggered.uc"
enum ERetriggerAction
{
	 RTA_Reverse             =0,
	 RTA_Reset               =1,
	 RTA_Ignore              =2,
	 RTA_Retrigger           =3,
	 RTA_MAX                 =4,
};



// Enum ETexRotationType is declared in "..\Engine\Classes\TexRotator.uc"
enum ETexRotationType
{
	 TR_FixedRotation        =0,
	 TR_ConstantlyRotating   =1,
	 TR_OscillatingRotation  =2,
	 TR_MAX                  =3,
};







// Enum EColorFadeType is declared in "..\Engine\Classes\FadeColor.uc"
enum EColorFadeType
{
	 FC_Linear               =0,
	 FC_Sinusoidal           =1,
	 FC_MAX                  =2,
};



// Enum EOutputBlending is declared in "..\Engine\Classes\Shader.uc"
enum EOutputBlending
{
	 OB_Normal               =0,
	 OB_Masked               =1,
	 OB_Modulate             =2,
	 OB_Translucent          =3,
	 OB_Invisible            =4,
	 OB_Brighten             =5,
	 OB_Darken               =6,
	 OB_Feathered            =7,
	 OB_AdditiveFade         =8,
	 OB_MAX                  =9,
};
// Enum EPerPixelSpecularType is declared in "..\Engine\Classes\Shader.uc"
enum EPerPixelSpecularType
{
	 ST_AlgorithmicRV        =0,
	 ST_AlgorithmicNH        =1,
	 ST_MAX                  =2,
};
// Enum EPerPixelSpecular is declared in "..\Engine\Classes\Shader.uc"
enum EPerPixelSpecular
{
	 PP_None                 =0,
	 PP_Low                  =1,
	 PP_Medium               =2,
	 PP_High                 =3,
	 PP_MAX                  =4,
};

// Struct FTerrainMaterialLayer	is declared	in "..\Engine\Classes\TerrainMaterial.uc"
struct ENGINE_API FTerrainMaterialLayer
{
    class UMaterial* Texture;
    class UBitmapMaterial* AlphaWeight;
    FMatrix TextureMatrix;
};



// Enum EAnimCompressMethod is declared in "..\Engine\Classes\MeshObject.uc"
enum EAnimCompressMethod
{
	 ACM_Raw                 =0,
	 ACM_Classic             =1,
	 ACM_Quantized16bit      =2,
	 ACM_MAX                 =3,
};
// Enum EMeshSectionMethod is declared in "..\Engine\Classes\MeshObject.uc"
enum EMeshSectionMethod
{
	 MSM_SmoothOnly          =0,
	 MSM_RigidOnly           =1,
	 MSM_Mixed               =2,
	 MSM_SinglePiece         =3,
	 MSM_ForcedRigid         =4,
	 MSM_MAX                 =5,
};
// Enum EImpLightMode is declared in "..\Engine\Classes\MeshObject.uc"
enum EImpLightMode
{
	 ILM_Unlit               =0,
	 ILM_PseudoShaded        =1,
	 ILM_Uniform             =2,
	 ILM_MAX                 =3,
};
// Enum EImpDrawMode is declared in "..\Engine\Classes\MeshObject.uc"
enum EImpDrawMode
{
	 IDM_Normal              =0,
	 IDM_Fading              =1,
	 IDM_MAX                 =2,
};
// Enum EImpSpaceMode is declared in "..\Engine\Classes\MeshObject.uc"
enum EImpSpaceMode
{
	 ISM_Sprite              =0,
	 ISM_Fixed               =1,
	 ISM_PivotVertical       =2,
	 ISM_PivotHorizontal     =3,
	 ISM_MAX                 =4,
};




// Struct FReceiverInfo	is declared	in "..\Engine\Classes\Messaging\MessageDispatcher.uc"
struct ENGINE_API FReceiverInfo
{
    class AActor* Receiver;
    class UClass* MessageClass;
};



// "event"	function whose parameters correspond to	"struct UNavigationPointList_eventGetRandomEntry_Parms"	is declared	in "..\Engine\Classes\NavigationPointList.uc"
struct UNavigationPointList_eventGetRandomEntry_Parms
{
	  class ANavigationPoint* ReturnValue;
};
// Enum ESkelLocationUpdate is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum ESkelLocationUpdate
{
	 PTSU_None               =0,
	 PTSU_SpawnOffset        =1,
	 PTSU_Location           =2,
	 PTSU_MAX                =3,
};
// Enum EParticleMeshSpawning is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleMeshSpawning
{
	 PTMS_None               =0,
	 PTMS_Linear             =1,
	 PTMS_Random             =2,
	 PTMS_MAX                =3,
};
// Enum EParticleCollisionSound is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleCollisionSound
{
	 PTSC_None               =0,
	 PTSC_LinearGlobal       =1,
	 PTSC_LinearLocal        =2,
	 PTSC_Random             =3,
	 PTSC_MAX                =4,
};
// Enum EParticleEffectAxis is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleEffectAxis
{
	 PTEA_NegativeX          =0,
	 PTEA_PositiveZ          =1,
	 PTEA_MAX                =2,
};
// Enum EParticleStartLocationShape is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleStartLocationShape
{
	 PTLS_Box                =0,
	 PTLS_Sphere             =1,
	 PTLS_Polar              =2,
	 PTLS_All                =3,
	 PTLS_MAX                =4,
};
// Enum EParticleVelocityDirection is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleVelocityDirection
{
	 PTVD_None               =0,
	 PTVD_StartPositionAndOwner=1,
	 PTVD_OwnerAndStartPosition=2,
	 PTVD_AddRadial          =3,
	 PTVD_MAX                =4,
};
// Enum EParticleRotationSource is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleRotationSource
{
	 PTRS_None               =0,
	 PTRS_Actor              =1,
	 PTRS_Offset             =2,
	 PTRS_Normal             =3,
	 PTRS_MAX                =4,
};
// Enum EParticleCoordinateSystem is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleCoordinateSystem
{
	 PTCS_Independent        =0,
	 PTCS_Relative           =1,
	 PTCS_Absolute           =2,
	 PTCS_MAX                =3,
};
// Enum EParticleDrawStyle is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleDrawStyle
{
	 PTDS_Regular            =0,
	 PTDS_AlphaBlend         =1,
	 PTDS_Modulated          =2,
	 PTDS_Translucent        =3,
	 PTDS_AlphaModulate_MightNotFogCorrectly=4,
	 PTDS_Darken             =5,
	 PTDS_Brighten           =6,
	 PTDS_MAX                =7,
};
// Enum EBlendMode is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EBlendMode
{
	 BM_MODULATE             =0,
	 BM_MODULATE2X           =1,
	 BM_MODULATE4X           =2,
	 BM_ADD                  =3,
	 BM_ADDSIGNED            =4,
	 BM_ADDSIGNED2X          =5,
	 BM_SUBTRACT             =6,
	 BM_ADDSMOOTH            =7,
	 BM_BLENDDIFFUSEALPHA    =8,
	 BM_BLENDTEXTUREALPHA    =9,
	 BM_BLENDFACTORALPHA     =10,
	 BM_BLENDTEXTUREALPHAPM  =11,
	 BM_BLENDCURRENTALPHA    =12,
	 BM_PREMODULATE          =13,
	 BM_MODULATEALPHA_ADDCOLOR=14,
	 BM_MODULATEINVALPHA_ADDCOLOR=15,
	 BM_MODULATEINVCOLOR_ADDALPHA=16,
	 BM_HACK                 =17,
	 BM_MAX                  =18,
};

// Enum EBeamEndPointType is declared in "..\Engine\Classes\BeamEmitter.uc"
enum EBeamEndPointType
{
	 PTEP_Velocity           =0,
	 PTEP_Distance           =1,
	 PTEP_Offset             =2,
	 PTEP_Actor              =3,
	 PTEP_TraceOffset        =4,
	 PTEP_OffsetAsAbsolute   =5,
	 PTEP_MAX                =6,
};



// Enum EParticleDirectionUsage is declared in "..\Engine\Classes\SpriteEmitter.uc"
enum EParticleDirectionUsage
{
	 PTDU_None               =0,
	 PTDU_Up                 =1,
	 PTDU_Right              =2,
	 PTDU_Forward            =3,
	 PTDU_Normal             =4,
	 PTDU_UpAndNormal        =5,
	 PTDU_RightAndNormal     =6,
	 PTDU_Scale              =7,
	 PTDU_MAX                =8,
};



// "event"	function whose parameters correspond to	"struct UPlayerInput_eventPlayerInput_Parms"	is declared	in "..\Engine\Classes\PlayerInput.uc"
struct UPlayerInput_eventPlayerInput_Parms
{
	  FLOAT DeltaTime;
};
// Struct FDoorBlockedInfo	is declared	in "..\Engine\Classes\ReachSpec.uc"
struct ENGINE_API FDoorBlockedInfo
{
    class ADoor* BlockedBy;
    BITFIELD bBlockedWhenOpenRight:1;
};




// Enum AI_LOD_Levels is declared in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
enum AI_LOD_Levels
{
	 AILOD_NONE              =0,
	 AILOD_MINIMAL           =1,
	 AILOD_IDLE              =2,
	 AILOD_NORMAL            =3,
	 AILOD_ALWAYS_ON         =4,
	 AILOD_MAX               =5,
};
// Enum ResourceTypes is declared in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
enum ResourceTypes
{
	 RT_DEFAULT              =0,
	 RT_VEHICLE              =1,
	 RT_GUNNER               =2,
	 RT_DRIVER               =3,
	 RT_TURRET               =4,
	 RT_CHARACTER            =5,
	 RT_SQUAD                =6,
	 RT_ARMS                 =7,
	 RT_LEGS                 =8,
	 RT_HEAD                 =9,
	 RT_MAX                  =10,
};

// "event"	function whose parameters correspond to	"struct UTyrion_ResourceBase_eventisActive_Parms"	is declared	in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
struct UTyrion_ResourceBase_eventisActive_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UTyrion_ResourceBase_eventresetGoals_Parms"	is declared	in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
struct UTyrion_ResourceBase_eventresetGoals_Parms
{
};
// "event"	function whose parameters correspond to	"struct UTyrion_ResourceBase_eventdeleteRemovedActions_Parms"	is declared	in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
struct UTyrion_ResourceBase_eventdeleteRemovedActions_Parms
{
};
// "event"	function whose parameters correspond to	"struct UTyrion_ResourceBase_eventInit_Parms"	is declared	in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
struct UTyrion_ResourceBase_eventInit_Parms
{
};
// Enum EMPMode is declared in "..\Engine\Classes\Repo.uc"
enum EMPMode
{
	 MPM_BarricadedSuspects  =0,
	 MPM_VIPEscort           =1,
	 MPM_RapidDeployment     =2,
	 MPM_COOP                =3,
	 MPM_SmashAndGrab        =4,
	 MPM_COOPQMM             =5,
	 MPM_MAX                 =6,
};

// "event"	function whose parameters correspond to	"struct URepo_eventShouldShowSubtitles_Parms"	is declared	in "..\Engine\Classes\Repo.uc"
struct URepo_eventShouldShowSubtitles_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct URepo_eventPostGameEngineInit_Parms"	is declared	in "..\Engine\Classes\Repo.uc"
struct URepo_eventPostGameEngineInit_Parms
{
};
// "event"	function whose parameters correspond to	"struct URepo_eventPostBeginPlay_Parms"	is declared	in "..\Engine\Classes\Repo.uc"
struct URepo_eventPostBeginPlay_Parms
{
};
// "event"	function whose parameters correspond to	"struct URepo_eventPreBeginPlay_Parms"	is declared	in "..\Engine\Classes\Repo.uc"
struct URepo_eventPreBeginPlay_Parms
{
};
// "event"	function whose parameters correspond to	"struct URepo_eventTick_Parms"	is declared	in "..\Engine\Classes\Repo.uc"
struct URepo_eventTick_Parms
{
	  FLOAT DeltaSeconds;
};
// "event"	function whose parameters correspond to	"struct URepo_eventOnDisconnected_Parms"	is declared	in "..\Engine\Classes\Repo.uc"
struct URepo_eventOnDisconnected_Parms
{
};
// "event"	function whose parameters correspond to	"struct URepo_eventPostLevelChange_Parms"	is declared	in "..\Engine\Classes\Repo.uc"
struct URepo_eventPostLevelChange_Parms
{
	  class UPlayer* thePlayer;
	  FString MapName;
};
// "event"	function whose parameters correspond to	"struct URepo_eventPreLevelChange_Parms"	is declared	in "..\Engine\Classes\Repo.uc"
struct URepo_eventPreLevelChange_Parms
{
	  class UPlayer* thePlayer;
	  FString MapName;
};
// Enum SpeechRecognitionConfidence is declared in "..\Engine\Classes\SpeechRecognition\SpeechManager.uc"
enum SpeechRecognitionConfidence
{
	 Confidence_Low          =0,
	 Confidence_Medium       =1,
	 Confidence_High         =2,
	 Confidence_MAX          =3,
};
// Struct FClientInterest	is declared	in "..\Engine\Classes\SpeechRecognition\SpeechManager.uc"
struct ENGINE_API FClientInterest
{
    class IISpeechClient* Client;
};


// "event"	function whose parameters correspond to	"struct USpeechManager_eventOnAudioLevelEvent_Parms"	is declared	in "..\Engine\Classes\SpeechRecognition\SpeechManager.uc"
struct USpeechManager_eventOnAudioLevelEvent_Parms
{
	  INT Value;
};
// "event"	function whose parameters correspond to	"struct USpeechManager_eventOnFalseRecognition_Parms"	is declared	in "..\Engine\Classes\SpeechRecognition\SpeechManager.uc"
struct USpeechManager_eventOnFalseRecognition_Parms
{
};
// "event"	function whose parameters correspond to	"struct USpeechManager_eventOnCommandRecognized_Parms"	is declared	in "..\Engine\Classes\SpeechRecognition\SpeechManager.uc"
struct USpeechManager_eventOnCommandRecognized_Parms
{
	  FName Rule;
	  TArray<FName> Value;
	  BYTE Confidence;
};
// "event"	function whose parameters correspond to	"struct USpeechManager_eventOnPhraseStart_Parms"	is declared	in "..\Engine\Classes\SpeechRecognition\SpeechManager.uc"
struct USpeechManager_eventOnPhraseStart_Parms
{
};
// Class	AActor is declared in "..\Engine\Classes\Actor.uc"
class ENGINE_API	AActor	: public UObject
{
public:
    BITFIELD bShouldReplicateDefaultProperties:1;
    BYTE LightType;
    BYTE LightEffect;
    FLOAT LightBrightness;
    FLOAT LightRadius;
    BYTE LightHue;
    BYTE LightSaturation;
    BYTE LightPeriod;
    BYTE LightPhase;
    BYTE LightCone;
    BITFIELD bCastsVolumetricShadows:1;
    BITFIELD bDisableShadowOptimisation:1;
    BITFIELD bDisableBspVolumetrics:1;
    BITFIELD bVolumetricShadowCast:1;
    BITFIELD bDoNotApproximateBumpmap:1;
    FLOAT BumpmapLODScale;
    BITFIELD bOnlyAffectCurrentZone:1;
    FLOAT MaxTraceDistance;
    BITFIELD bImportantDynamicLight:1;
    BITFIELD bGetOverlayMaterialFromBase:1;
    BITFIELD bGetSkinFromBase:1;
    BITFIELD bNeedPostRenderCallback:1;
    BITFIELD bIsMirror:1;
    BITFIELD bNeverDrawIfPlayerIsDrawn:1;
    BYTE Physics;
    BYTE DrawType;
    class UStaticMesh* StaticMesh;
    class AActor* Owner;
    class AActor* Base;
    FActorRenderDataPtr ActorRenderData;
    FLightRenderDataPtr LightRenderData;
    INT RenderRevision;
    BITFIELD UsesSubVisibility:1;
    BYTE StaticFilterState;
    TArrayNoInit<FBatchReference> StaticSectionBatches;
    FName ForcedVisibilityZoneTag;
    BITFIELD bSpecialLit:1;
    BITFIELD bActorShadows:1;
    BITFIELD bCorona:1;
    BITFIELD bLightingVisibility:1;
    BITFIELD bUseDynamicLights:1;
    BITFIELD bLightChanged:1;
    BITFIELD bStatic:1;
    BITFIELD bHidden:1;
    BITFIELD bNoDelete:1;
    BITFIELD bDeleteMe:1;
    BITFIELD bDisableTick:1;
    BITFIELD bDisableTouch:1;
    BITFIELD bTicked:1;
    BITFIELD bDynamicLight:1;
    BITFIELD bTimerLoop:1;
    BITFIELD bOnlyOwnerSee:1;
    BITFIELD bHighDetail:1;
    BITFIELD bSuperHighDetail:1;
    BITFIELD bOnlyDrawIfAttached:1;
    BITFIELD bStasis:1;
    BITFIELD bTrailerAllowRotation:1;
    BITFIELD bTrailerSameRotation:1;
    BITFIELD bTrailerPrePivot:1;
    BITFIELD bWorldGeometry:1;
    BITFIELD bAcceptsProjectors:1;
    BITFIELD bAcceptsShadowProjectors:1;
    BITFIELD bOrientOnSlope:1;
    BITFIELD bOnlyAffectPawns:1;
    BITFIELD bDisableSorting:1;
    BITFIELD bIgnoreEncroachers:1;
    BITFIELD bShowOctreeNodes:1;
    BITFIELD bWasSNFiltered:1;
    BITFIELD bNetTemporary:1;
    BITFIELD bOnlyRelevantToOwner:1;
    BITFIELD bNetDirty:1;
    BITFIELD bAlwaysRelevant:1;
    BITFIELD bReplicateInstigator:1;
    BITFIELD bReplicateMovement:1;
    BITFIELD bSkipActorPropertyReplication:1;
    BITFIELD bUpdateSimulatedPosition:1;
    BITFIELD bTearOff:1;
    BITFIELD bOnlyDirtyReplication:1;
    BITFIELD bReplicateAnimations:1;
    BITFIELD bNetInitialRotation:1;
    BITFIELD bCompressedPosition:1;
    BITFIELD bAlwaysZeroBoneOffset:1;
    BYTE RemoteRole;
    BYTE Role;
    INT NetTag;
    FLOAT NetUpdateTime;
    FLOAT NetUpdateFrequency;
    FLOAT NetPriority;
    class APawn* Instigator;
    FName AttachmentBone;
    class ALevelInfo* Level;
    class ULevel* XLevel;
    FLOAT LifeSpan;
    TArrayNoInit<class UObject*> OwnerGroups;
    FPointRegion Region;
    FLOAT TimerRate;
    class UMesh* Mesh;
    FLOAT LastRenderTime;
    FName Tag;
    TArrayNoInit<INT> Leaves;
    FName Event;
    class AInventory* Inventory;
    FLOAT TimerCounter;
    class UMeshInstance* MeshInstance;
    FLOAT LODBias;
    FName InitialState;
    FName Group;
    TArrayNoInit<class AActor*> Touching;
    TArrayNoInit<INT> OctreeNodes;
    FBox OctreeBox;
    FVector OctreeBoxCenter;
    FVector OctreeBoxRadii;
    class AActor* Deleted;
    FLOAT LatentFloat;
    TArrayNoInit<BYTE> LatentAnimChannelCount;
    INT CollisionTag;
    INT JoinedTag;
    class APhysicsVolume* PhysicsVolume;
    FVector Location;
    FRotator Rotation;
    FVector Velocity;
    FVector Acceleration;
    FVector CachedLocation;
    FRotator CachedRotation;
    FMatrix CachedLocalToWorld;
    FName AttachTag;
    TArrayNoInit<class AActor*> Attached;
    FVector RelativeLocation;
    FRotator RelativeRotation;
    BITFIELD bHardAttach:1;
    FMatrix HardRelMatrix;
    TArrayNoInit<FProjectorRenderInfoPtr> Projectors;
    TArrayNoInit<FStaticMeshProjectorRenderInfoPtr> StaticMeshProjectors;
    class UMaterial* Texture;
    class UStaticMeshInstance* StaticMeshInstance;
    class UModel* Brush;
    FLOAT DrawScale;
    FVector DrawScale3D;
    FVector PrePivot;
    TArrayNoInit<class UMaterial*> Skins;
    class UMaterial* RepSkin;
    BYTE AmbientGlow;
    BYTE MaxLights;
    BYTE MaxDynamicLights;
    class UConvexVolume* AntiPortal;
    FLOAT CullDistance;
    FLOAT ScaleGlow;
    BYTE Style;
    BITFIELD bUnlit:1;
    BITFIELD bShadowCast:1;
    BITFIELD bStaticLighting:1;
    BITFIELD bUseLightingFromBase:1;
    BITFIELD bHurtEntry:1;
    BITFIELD bGameRelevant:1;
    BITFIELD bCollideWhenPlacing:1;
    BITFIELD bTravel:1;
    BITFIELD bMovable:1;
    BITFIELD bDestroyInPainVolume:1;
    BITFIELD bCanBeDamaged:1;
    BITFIELD bShouldBaseAtStartup:1;
    BITFIELD bPendingDelete:1;
    BITFIELD bAnimByOwner:1;
    BITFIELD bOwnerNoSee:1;
    BITFIELD bCanTeleport:1;
    BITFIELD bClientAnim:1;
    BITFIELD bDisturbFluidSurface:1;
    BITFIELD bAlwaysTick:1;
    BYTE SoundOcclusion;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    BITFIELD bCollideActors:1;
    BITFIELD bCollideWorld:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockPlayers:1;
    BITFIELD bIsBlockedByIgnoresPawnBlockingFlags:1;
    BITFIELD bProjTarget:1;
    BITFIELD bBlockZeroExtentTraces:1;
    BITFIELD bBlockNonZeroExtentTraces:1;
    BITFIELD bAutoAlignToTerrain:1;
    BITFIELD bUseCylinderCollision:1;
    BITFIELD bBlockKarma:1;
    BITFIELD bBlockHavok:1;
    BITFIELD bNetNotify:1;
    BITFIELD bWeaponTestsPassThrough:1;
    BITFIELD bUseCollisionBoneBoundingBox:1;
    BITFIELD bIgnoreOutOfWorld:1;
    BITFIELD bBounce:1;
    BITFIELD bFixedRotationDir:1;
    BITFIELD bRotateToDesired:1;
    BITFIELD bInterpolating:1;
    BITFIELD bJustTeleported:1;
    FLOAT Mass;
    FLOAT Buoyancy;
    FRotator RotationRate;
    FRotator DesiredRotation;
    class AActor* PendingTouch;
    FVector ColLocation;
    class UHavokObject* HavokData;
    class UClass* HavokDataClass;
    FVector havokGameTickForce;
    FVector havokGameTickForcePosition;
    FAnimRep SimAnim;
    FAnimRep SpecialAnimRepInfo;
    FLOAT ServerNextUpdateTimeForRepAnims;
    BYTE ForceType;
    FLOAT ForceRadius;
    FLOAT ForceScale;
    BITFIELD bNetInitial:1;
    BITFIELD bNetOwner:1;
    BITFIELD bNetRelevant:1;
    BITFIELD bDemoRecording:1;
    BITFIELD bClientDemoRecording:1;
    BITFIELD bRepClientDemo:1;
    BITFIELD bClientDemoNetFunc:1;
    BITFIELD bDemoOwner:1;
    BITFIELD bNoRepMesh:1;
    BITFIELD bHiddenEd:1;
    BITFIELD bHiddenEdGroup:1;
    BITFIELD bDirectional:1;
    BITFIELD bSelected:1;
    BITFIELD bEdShouldSnap:1;
    BITFIELD bEdSnap:1;
    BITFIELD bTempEditor:1;
    BITFIELD bObsolete:1;
    BITFIELD bPathColliding:1;
    BITFIELD bPathTemp:1;
    BITFIELD bScriptInitialized:1;
    BITFIELD bLockLocation:1;
    class UClass* MessageClass;
    BITFIELD Examinable:1;
    BITFIELD bTriggerEffectEventsBeforeGameStarts:1;
    BITFIELD bNeedLifetimeEffectEvents:1;
    FName Label;
    FStringNoInit TriggeredBy;
    BITFIELD IsCoverForAIs:1;
    TArrayNoInit<class UMeshAnimation*> AnimationSetReferences;
    BITFIELD bSendDestructionNotification:1;
    BITFIELD bAlwaysProcessState:1;
	   DECLARE_FUNCTION(execGetRenderBoundingBoxCenter);
	   DECLARE_FUNCTION(execCopyMaterialsToSkins);
	   DECLARE_FUNCTION(execGetCurrentMaterial);
	   DECLARE_FUNCTION(execGetFireLocation);
	   DECLARE_FUNCTION(execGetLookLocation);
	   DECLARE_FUNCTION(execGetAimLocation);
	   DECLARE_FUNCTION(execMultiply_ColorFloat);
	   DECLARE_FUNCTION(execAdd_ColorColor);
	   DECLARE_FUNCTION(execMultiply_FloatColor);
	   DECLARE_FUNCTION(execSubtract_ColorColor);
	   DECLARE_FUNCTION(execCollidingActors);
	   DECLARE_FUNCTION(execVisibleCollidingActors);
	   DECLARE_FUNCTION(execVisibleActors);
	   DECLARE_FUNCTION(execRadiusActors);
	   DECLARE_FUNCTION(execTraceActors);
	   DECLARE_FUNCTION(execTouchingActors);
	   DECLARE_FUNCTION(execBasedActors);
	   DECLARE_FUNCTION(execChildActors);
	   DECLARE_FUNCTION(execDynamicActors);
	   DECLARE_FUNCTION(execAllActors);
	   DECLARE_FUNCTION(execMoveCacheEntry);
	   DECLARE_FUNCTION(execGetCacheEntry);
	   DECLARE_FUNCTION(execGetNextIntDesc);
	   DECLARE_FUNCTION(execGetNextInt);
	   DECLARE_FUNCTION(execGetURLMap);
	   DECLARE_FUNCTION(execGetNextSkin);
	   DECLARE_FUNCTION(execGetMapName);
	   DECLARE_FUNCTION(execSuggestFallVelocity);
	   DECLARE_FUNCTION(execPlayerCanSeeMe);
	   DECLARE_FUNCTION(execMakeNoise);
	   DECLARE_FUNCTION(execForceFeedbackSupported);
	   DECLARE_FUNCTION(execStopFeedbackEffect);
	   DECLARE_FUNCTION(execPlayFeedbackEffect);
	   DECLARE_FUNCTION(execGetSoundDuration);
	   DECLARE_FUNCTION(execDemoPlaySound);
	   DECLARE_FUNCTION(execPlayOwnedSound);
	   DECLARE_FUNCTION(execPlaySound);
	   DECLARE_FUNCTION(execSimulateSoundOnDedicatedServer);
	   DECLARE_FUNCTION(execSetTimer);
	   DECLARE_FUNCTION(execDestroy);
	   DECLARE_FUNCTION(execSpawn);
	   DECLARE_FUNCTION(execFastTrace);
	   DECLARE_FUNCTION(execGetLastTracedActor);
	   DECLARE_FUNCTION(execGetLastTracedBone);
	   DECLARE_FUNCTION(execTrace);
	   DECLARE_FUNCTION(execStopAllMusic);
	   DECLARE_FUNCTION(execStopMusic);
	   DECLARE_FUNCTION(execPlayMusic);
	   DECLARE_FUNCTION(execUnClock);
	   DECLARE_FUNCTION(execClock);
	   DECLARE_FUNCTION(execHavokReturnSkeletalActorToAnimationSystem);
	   DECLARE_FUNCTION(execHavokCollisionGroupChange);
	   DECLARE_FUNCTION(execHavokSlowSetCollisionEnabled);
	   DECLARE_FUNCTION(execHavokGetState);
	   DECLARE_FUNCTION(execHavokSetGameTickForce);
	   DECLARE_FUNCTION(execHavokSetBlocking);
	   DECLARE_FUNCTION(execHavokActivate);
	   DECLARE_FUNCTION(execHavokImpartCOMImpulse);
	   DECLARE_FUNCTION(execHavokGetLastTracedBone);
	   DECLARE_FUNCTION(execHavokSetAngularDamping);
	   DECLARE_FUNCTION(execHavokSetLinearDamping);
	   DECLARE_FUNCTION(execHavokSetLinearVelocityAll);
	   DECLARE_FUNCTION(execHavokSetAngularVelocity);
	   DECLARE_FUNCTION(execHavokSetLinearVelocity);
	   DECLARE_FUNCTION(execHavokGetAngularVelocity);
	   DECLARE_FUNCTION(execHavokGetLinearVelocity);
	   DECLARE_FUNCTION(execHavokImpartForce);
	   DECLARE_FUNCTION(execHavokImpartImpulse);
	   DECLARE_FUNCTION(execHavokIsActive);
	   DECLARE_FUNCTION(execOnlyAffectPawns);
	   DECLARE_FUNCTION(execSetPhysics);
	   DECLARE_FUNCTION(execFinishInterpolation);
	   DECLARE_FUNCTION(execDebugUnclock);
	   DECLARE_FUNCTION(execDebugClock);
	   DECLARE_FUNCTION(execDrawDebugLine);
	   DECLARE_FUNCTION(execGetRenderBoundingSphere);
	   DECLARE_FUNCTION(execAnimIsInGroup);
	   DECLARE_FUNCTION(execGetAnimParams);
	   DECLARE_FUNCTION(execSetBoneRotation);
	   DECLARE_FUNCTION(execSetBoneLocation);
	   DECLARE_FUNCTION(execSetBoneDirection);
	   DECLARE_FUNCTION(execSetBoneScale);
	   DECLARE_FUNCTION(execLockRootMotion);
	   DECLARE_FUNCTION(execUpdateAttachmentLocations);
	   DECLARE_FUNCTION(execDetachFromBone);
	   DECLARE_FUNCTION(execAttachToBone);
	   DECLARE_FUNCTION(execGetRootRotationDelta);
	   DECLARE_FUNCTION(execGetRootLocationDelta);
	   DECLARE_FUNCTION(execGetRootRotation);
	   DECLARE_FUNCTION(execGetRootLocation);
	   DECLARE_FUNCTION(execGetBoneRotation);
	   DECLARE_FUNCTION(execGetBoneCoords);
	   DECLARE_FUNCTION(execAnimGetChannelAlpha);
	   DECLARE_FUNCTION(execAnimBlendToAlpha);
	   DECLARE_FUNCTION(execAnimBlendParams);
	   DECLARE_FUNCTION(execBoneRefresh);
	   DECLARE_FUNCTION(execLinkMesh);
	   DECLARE_FUNCTION(execLinkSkelAnim);
	   DECLARE_FUNCTION(execGetNotifyChannel);
	   DECLARE_FUNCTION(execEnableChannelNotify);
	   DECLARE_FUNCTION(execCurrentLIPSincAnim);
	   DECLARE_FUNCTION(execIsPlayingLIPSincAnim);
	   DECLARE_FUNCTION(execHasLIPSincAnim);
	   DECLARE_FUNCTION(execStopLIPSincAnim);
	   DECLARE_FUNCTION(execPlayLIPSincAnim);
	   DECLARE_FUNCTION(execSetTweenMode);
	   DECLARE_FUNCTION(execGetAnimLength);
	   DECLARE_FUNCTION(execIsTweening);
	   DECLARE_FUNCTION(execGetAnimName);
	   DECLARE_FUNCTION(execSetAnimFrame);
	   DECLARE_FUNCTION(execFreezeAnimAt);
	   DECLARE_FUNCTION(execStopAnimating);
	   DECLARE_FUNCTION(execHasAnim);
	   DECLARE_FUNCTION(execFinishAnim);
	   DECLARE_FUNCTION(execIsAnimating);
	   DECLARE_FUNCTION(execTweenAnim);
	   DECLARE_FUNCTION(execLoopAnimAdditive);
	   DECLARE_FUNCTION(execPlayAnimAdditive);
	   DECLARE_FUNCTION(execLoopAnim);
	   DECLARE_FUNCTION(execPlayAnim);
	   DECLARE_FUNCTION(execGetMeshName);
	   DECLARE_FUNCTION(execSetOwner);
	   DECLARE_FUNCTION(execSetBase);
	   DECLARE_FUNCTION(execAutonomousPhysics);
	   DECLARE_FUNCTION(execMoveSmooth);
	   DECLARE_FUNCTION(execSetRelativeLocation);
	   DECLARE_FUNCTION(execSetRelativeRotation);
	   DECLARE_FUNCTION(execCanSetLocation);
	   DECLARE_FUNCTION(execSetRotation);
	   DECLARE_FUNCTION(execSetLocation);
	   DECLARE_FUNCTION(execMove);
	   DECLARE_FUNCTION(execSetDrawType);
	   DECLARE_FUNCTION(execSetStaticMesh);
	   DECLARE_FUNCTION(execSetDrawScale3D);
	   DECLARE_FUNCTION(execSetDrawScale);
	   DECLARE_FUNCTION(execSetCollisionSize);
	   DECLARE_FUNCTION(execSetCollision);
	   DECLARE_FUNCTION(execConstruct_ActorNameVectorRotator);
	   DECLARE_FUNCTION(execConstruct_Void);
	   DECLARE_FUNCTION(execAllocate);
	   DECLARE_FUNCTION(execstaticActorLabel);
	   DECLARE_FUNCTION(execactorLabel);
	   DECLARE_FUNCTION(execIsOverlapping);
	   DECLARE_FUNCTION(execError);
	   DECLARE_FUNCTION(execConsoleCommand);
	   DECLARE_FUNCTION(execAddDebugMessage);
	  FVector	eventGetRenderBoundingBoxCenter()
	  {
        AActor_eventGetRenderBoundingBoxCenter_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetRenderBoundingBoxCenter),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventonMessage(class UMessage* msg)
	  {
        AActor_eventonMessage_Parms Parms;
		   Parms.msg=msg;
        ProcessEvent(FindFunctionChecked(ENGINE_onMessage),&Parms);
	  }
	  void	eventCopyMaterialsToSkins(BITFIELD ShouldNotOverwriteExistingSkins)
	  {
        AActor_eventCopyMaterialsToSkins_Parms Parms;
		   Parms.ShouldNotOverwriteExistingSkins=ShouldNotOverwriteExistingSkins;
        ProcessEvent(FindFunctionChecked(ENGINE_CopyMaterialsToSkins),&Parms);
	  }
	  class UMaterial*	eventGetCurrentMaterial(INT Index)
	  {
        AActor_eventGetCurrentMaterial_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCurrentMaterial),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventUnTriggerEffectEvent(FName EffectEvent, FName ReferenceTag)
	  {
        AActor_eventUnTriggerEffectEvent_Parms Parms;
		   Parms.EffectEvent=EffectEvent;
		   Parms.ReferenceTag=ReferenceTag;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTriggerEffectEvent),&Parms);
	  }
	  BITFIELD	eventTriggerEffectEvent(FName EffectEvent, class AActor* Other, class UMaterial* TargetMaterial, FVector HitLocation, FRotator HitNormal, BITFIELD PlayOnOther, BITFIELD QueryOnly, class IIEffectObserver* Observer, FName ReferenceTag, FName SkipSubsystemWithThisName)
	  {
        AActor_eventTriggerEffectEvent_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.EffectEvent=EffectEvent;
		   Parms.Other=Other;
		   Parms.TargetMaterial=TargetMaterial;
		   Parms.HitLocation=HitLocation;
		   Parms.HitNormal=HitNormal;
		   Parms.PlayOnOther=PlayOnOther;
		   Parms.QueryOnly=QueryOnly;
		   Parms.Observer=Observer;
		   Parms.ReferenceTag=ReferenceTag;
		   Parms.SkipSubsystemWithThisName=SkipSubsystemWithThisName;
        ProcessEvent(FindFunctionChecked(ENGINE_TriggerEffectEvent),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventTriggerEvent(FName EventName, class AActor* Other, class APawn* EventInstigator)
	  {
        AActor_eventTriggerEvent_Parms Parms;
		   Parms.EventName=EventName;
		   Parms.Other=Other;
		   Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_TriggerEvent),&Parms);
	  }
	  void	eventTravelPostAccept()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_TravelPostAccept),NULL);
	  }
	  void	eventTravelPreAccept()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_TravelPreAccept),NULL);
	  }
	  void	eventUpdatePrecacheRenderData()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_UpdatePrecacheRenderData),NULL);
	  }
	  void	eventPostEditChange()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostEditChange),NULL);
	  }
	  void	eventPostLoadGame()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostLoadGame),NULL);
	  }
	  void	eventPostNetBeginPlay()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostNetBeginPlay),NULL);
	  }
	  void	eventSetInitialState()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
	  }
	  void	eventPostBeginPlay()
	  {
		  if(IsProbing(NAME_PostBeginPlay)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
		  }
	  }
	  void	eventBroadcastLocalizedMessage(class UClass* MessageClass, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
	  {
        AActor_eventBroadcastLocalizedMessage_Parms Parms;
		   Parms.MessageClass=MessageClass;
		   Parms.Switch=Switch;
		   Parms.RelatedPRI_1=RelatedPRI_1;
		   Parms.RelatedPRI_2=RelatedPRI_2;
		   Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalizedMessage),&Parms);
	  }
	  void	eventPreBeginPlay()
	  {
		  if(IsProbing(NAME_PreBeginPlay)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
		  }
	  }
	  void	eventPreScriptedTextureRendered(class UScriptedTexture* Tex)
	  {
        AActor_eventPreScriptedTextureRendered_Parms Parms;
		   Parms.Tex=Tex;
        ProcessEvent(FindFunctionChecked(ENGINE_PreScriptedTextureRendered),&Parms);
	  }
	  void	eventRenderTexture(class UScriptedTexture* Tex)
	  {
        AActor_eventRenderTexture_Parms Parms;
		   Parms.Tex=Tex;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderTexture),&Parms);
	  }
	  void	eventBeginPlay()
	  {
		  if(IsProbing(NAME_BeginPlay)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay),NULL);
		  }
	  }
	  void	eventPostTeleport(class ATeleporter* OutTeleporter)
	  {
        AActor_eventPostTeleport_Parms Parms;
		   Parms.OutTeleporter=OutTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTeleport),&Parms);
	  }
	  BITFIELD	eventPreTeleport(class ATeleporter* InTeleporter)
	  {
        AActor_eventPreTeleport_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.InTeleporter=InTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PreTeleport),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventDemoPlaySound(class USound* Sound, FLOAT Volume, BITFIELD bNoOverride, FLOAT InnerRadius, FLOAT OuterRadius, FLOAT Pitch, INT flags, FLOAT FadeInTime, BITFIELD Attenuate)
	  {
        AActor_eventDemoPlaySound_Parms Parms;
		   Parms.Sound=Sound;
		   Parms.Volume=Volume;
		   Parms.bNoOverride=bNoOverride;
		   Parms.InnerRadius=InnerRadius;
		   Parms.OuterRadius=OuterRadius;
		   Parms.Pitch=Pitch;
		   Parms.flags=flags;
		   Parms.FadeInTime=FadeInTime;
		   Parms.Attenuate=Attenuate;
        ProcessEvent(FindFunctionChecked(ENGINE_DemoPlaySound),&Parms);
	  }
	  void	eventTornOff()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_TornOff),NULL);
	  }
	  void	eventTakeHitImpulse(FVector HitLocation, FVector Momentum, class UClass* DamageType)
	  {
        AActor_eventTakeHitImpulse_Parms Parms;
		   Parms.HitLocation=HitLocation;
		   Parms.Momentum=Momentum;
		   Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeHitImpulse),&Parms);
	  }
	  void	eventPostTakeDamage(INT Damage, class APawn* EventInstigator, FVector HitLocation, FVector Momentum, class UClass* DamageType)
	  {
        AActor_eventPostTakeDamage_Parms Parms;
		   Parms.Damage=Damage;
		   Parms.EventInstigator=EventInstigator;
		   Parms.HitLocation=HitLocation;
		   Parms.Momentum=Momentum;
		   Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTakeDamage),&Parms);
	  }
	  void	eventTakeDamage(INT Damage, class APawn* EventInstigator, FVector HitLocation, FVector Momentum, class UClass* DamageType)
	  {
        AActor_eventTakeDamage_Parms Parms;
		   Parms.Damage=Damage;
		   Parms.EventInstigator=EventInstigator;
		   Parms.HitLocation=HitLocation;
		   Parms.Momentum=Momentum;
		   Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage),&Parms);
	  }
	  void	eventKilledBy(class APawn* EventInstigator)
	  {
        AActor_eventKilledBy_Parms Parms;
		   Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_KilledBy),&Parms);
	  }
	  void	eventFellOutOfWorld(BYTE KillType)
	  {
        AActor_eventFellOutOfWorld_Parms Parms;
		   Parms.KillType=KillType;
        ProcessEvent(FindFunctionChecked(ENGINE_FellOutOfWorld),&Parms);
	  }
	  void	eventUsedBy(class APawn* User)
	  {
        AActor_eventUsedBy_Parms Parms;
		   Parms.User=User;
        ProcessEvent(FindFunctionChecked(ENGINE_UsedBy),&Parms);
	  }
	  void	eventEndedRotation()
	  {
		  if(IsProbing(NAME_EndedRotation)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_EndedRotation),NULL);
		  }
	  }
	  void	eventFinishedInterpolation()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_FinishedInterpolation),NULL);
	  }
	  void	eventEncroachedBy(class AActor* Other)
	  {
        AActor_eventEncroachedBy_Parms Parms;
		  if(IsProbing(NAME_EncroachedBy)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachedBy),&Parms);
		  }
	  }
	  BITFIELD	eventEncroachingOn(class AActor* Other)
	  {
        AActor_eventEncroachingOn_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_EncroachingOn)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachingOn),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  class AActor*	eventSpecialHandling(class APawn* Other)
	  {
        AActor_eventSpecialHandling_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_SpecialHandling)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialHandling),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  void	eventDetach(class AActor* Other)
	  {
        AActor_eventDetach_Parms Parms;
		  if(IsProbing(NAME_Detach)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Detach),&Parms);
		  }
	  }
	  void	eventAttach(class AActor* Other)
	  {
        AActor_eventAttach_Parms Parms;
		  if(IsProbing(NAME_Attach)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Attach),&Parms);
		  }
	  }
	  void	eventBaseChange()
	  {
		  if(IsProbing(NAME_BaseChange)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_BaseChange),NULL);
		  }
	  }
	  void	eventBump(class AActor* Other)
	  {
        AActor_eventBump_Parms Parms;
		  if(IsProbing(NAME_Bump)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Bump),&Parms);
		  }
	  }
	  void	eventUnTouch(class AActor* Other)
	  {
        AActor_eventUnTouch_Parms Parms;
		  if(IsProbing(NAME_UnTouch)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTouch),&Parms);
		  }
	  }
	  void	eventPostTouch(class AActor* Other)
	  {
        AActor_eventPostTouch_Parms Parms;
		  if(IsProbing(NAME_PostTouch)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTouch),&Parms);
		  }
	  }
	  void	eventTouch(class AActor* Other)
	  {
        AActor_eventTouch_Parms Parms;
		  if(IsProbing(NAME_Touch)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Touch),&Parms);
		  }
	  }
	  void	eventPhysicsVolumeChange(class APhysicsVolume* NewVolume)
	  {
        AActor_eventPhysicsVolumeChange_Parms Parms;
		  if(IsProbing(NAME_PhysicsVolumeChange)) {
		   Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsVolumeChange),&Parms);
		  }
	  }
	  void	eventZoneChange(class AZoneInfo* NewZone)
	  {
        AActor_eventZoneChange_Parms Parms;
		  if(IsProbing(NAME_ZoneChange)) {
		   Parms.NewZone=NewZone;
        ProcessEvent(FindFunctionChecked(ENGINE_ZoneChange),&Parms);
		  }
	  }
	  void	eventLanded(FVector HitNormal)
	  {
        AActor_eventLanded_Parms Parms;
		  if(IsProbing(NAME_Landed)) {
		   Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_Landed),&Parms);
		  }
	  }
	  void	eventFalling()
	  {
		  if(IsProbing(NAME_Falling)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_Falling),NULL);
		  }
	  }
	  void	eventHitWall(FVector HitNormal, class AActor* HitWall)
	  {
        AActor_eventHitWall_Parms Parms;
		  if(IsProbing(NAME_HitWall)) {
		   Parms.HitNormal=HitNormal;
		   Parms.HitWall=HitWall;
        ProcessEvent(FindFunctionChecked(ENGINE_HitWall),&Parms);
		  }
	  }
	  void	eventTimer()
	  {
		  if(IsProbing(NAME_Timer)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_Timer),NULL);
		  }
	  }
	  void	eventEndEvent()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_EndEvent),NULL);
	  }
	  void	eventBeginEvent()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent),NULL);
	  }
	  void	eventUnTrigger(class AActor* Other, class APawn* EventInstigator)
	  {
        AActor_eventUnTrigger_Parms Parms;
		  if(IsProbing(NAME_UnTrigger)) {
		   Parms.Other=Other;
		   Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTrigger),&Parms);
		  }
	  }
	  void	eventTrigger(class AActor* Other, class APawn* EventInstigator)
	  {
        AActor_eventTrigger_Parms Parms;
		  if(IsProbing(NAME_Trigger)) {
		   Parms.Other=Other;
		   Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Trigger),&Parms);
		  }
	  }
	  void	eventPostNetReceive()
	  {
		  if(IsProbing(NAME_PostNetReceive)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostNetReceive),NULL);
		  }
	  }
	  void	eventTick(FLOAT DeltaTime)
	  {
        AActor_eventTick_Parms Parms;
		  if(IsProbing(NAME_Tick)) {
		   Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
		  }
	  }
	  void	eventLostChild(class AActor* Other)
	  {
        AActor_eventLostChild_Parms Parms;
		  if(IsProbing(NAME_LostChild)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_LostChild),&Parms);
		  }
	  }
	  void	eventGainedChild(class AActor* Other)
	  {
        AActor_eventGainedChild_Parms Parms;
		  if(IsProbing(NAME_GainedChild)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GainedChild),&Parms);
		  }
	  }
	  void	eventDestroyed()
	  {
		  if(IsProbing(NAME_Destroyed)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_Destroyed),NULL);
		  }
	  }
	  BITFIELD	eventHavokUpdateState(FHavokRigidBodyState& NewState)
	  {
        AActor_eventHavokUpdateState_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(ENGINE_HavokUpdateState),&Parms);
		   NewState=Parms.NewState;
		   return Parms.ReturnValue;
	  }
	  void	eventHavokActivate(BITFIELD Activate)
	  {
        AActor_eventHavokActivate_Parms Parms;
		   Parms.Activate=Activate;
        ProcessEvent(FindFunctionChecked(ENGINE_HavokActivate),&Parms);
	  }
	  BITFIELD	eventHavokIsActive()
	  {
        AActor_eventHavokIsActive_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_HavokIsActive),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventAnimEnd(INT Channel)
	  {
        AActor_eventAnimEnd_Parms Parms;
		  if(IsProbing(NAME_AnimEnd)) {
		   Parms.Channel=Channel;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEnd),&Parms);
		  }
	  }
	  void	eventLIPSincAnimEnd()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_LIPSincAnimEnd),NULL);
	  }
	  void	eventPostRenderCallback(BITFIELD InMainScene)
	  {
        AActor_eventPostRenderCallback_Parms Parms;
		   Parms.InMainScene=InMainScene;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRenderCallback),&Parms);
	  }
	  class UMaterial*	eventGetOverlayMaterial(INT Index)
	  {
        AActor_eventGetOverlayMaterial_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_GetOverlayMaterial),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(AActor,UObject,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AActor)
};

// Class	AAIRepository is declared in "..\Engine\Classes\AIRepository.uc"
class ENGINE_API	AAIRepository	: public AActor
{
public:
	   DECLARE_CLASS(AAIRepository,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AAIRepository)
};

// Class	AAmmunition is declared in "..\Engine\Classes\Equipment\Ammunition.uc"
class ENGINE_API	AAmmunition	: public AActor
{
public:
    BITFIELD bInstantHit:1;
    class UClass* ProjectileClass;
    FStringNoInit Description;
    FStringNoInit FriendlyName;
    class UMaterial* GUIImage;
    INT InternalDamage;
    INT ImpactMomentum;
    INT ShotsPerRound;
    BITFIELD RoundsNeverPenetrate:1;
	   DECLARE_CLASS(AAmmunition,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AAmmunition)
};

// Class	AAntiPortalActor is declared in "..\Engine\Classes\AntiPortalActor.uc"
class ENGINE_API	AAntiPortalActor	: public AActor
{
public:
	   DECLARE_CLASS(AAntiPortalActor,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AAntiPortalActor)
};

// Class	AAwarenessPoint is declared in "..\Engine\Classes\Awareness\AwarenessPoint.uc"
class ENGINE_API	AAwarenessPoint	: public AActor
{
public:
    BYTE creation;
    FLOAT minimumThreat;
    class UTexture* editorTextures[2];
    class AActor* basisActor;
    class ANavigationPoint* closestNavigationPoint;
    TArrayNoInit<FAwarenessConnection> connections;
	   DECLARE_CLASS(AAwarenessPoint,AActor,0|CLASS_Config,Engine)
    AAwarenessPoint();
    virtual void CheckForErrors();
    virtual void PostEditChange();
    virtual void PostEditLoad();
    virtual void PreEditDelete();
    virtual FVector GetAimLocation(AFiredWeapon* WeaponToAim);
    void CovertToDesignerPlaced();
    void UpdateTexture();
    void RemoveReferencesToThisPoint();
};

// Class	ABrush is declared in "..\Engine\Classes\Brush.uc"
class ENGINE_API	ABrush	: public AActor
{
public:
    BYTE CsgOper;
    class UObject* UnusedLightMesh;
    FVector PostPivot;
    FScale MainScale;
    FScale PostScale;
    FScale TempScale;
    FColor BrushColor;
    INT PolyFlags;
    BITFIELD bColored:1;
    class UMaterial* RenderMaterial;
    FVector RenderMaterialWorldSize;
	   DECLARE_CLASS(ABrush,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ABrush)
};

// Class	AVolume is declared in "..\Engine\Classes\Volume.uc"
class ENGINE_API	AVolume	: public ABrush
{
public:
    class AActor* AssociatedActor;
    FName AssociatedActorTag;
    INT LocationPriority;
    FStringNoInit LocationName;
    class ADecorationList* DecoList;
    BITFIELD bOccludedByGeometryInEditor:1;
	   DECLARE_FUNCTION(execEncompasses);
	   DECLARE_CLASS(AVolume,ABrush,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AVolume)
};

// Class	ABlockingVolume is declared in "..\Engine\Classes\BlockingVolume.uc"
class ENGINE_API	ABlockingVolume	: public AVolume
{
public:
    BITFIELD bClampFluid:1;
    BITFIELD bIsStairs:1;
	   DECLARE_CLASS(ABlockingVolume,AVolume,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ABlockingVolume)
};

// Class	ABlockingVolumePawnsOnly is declared in "..\Engine\Classes\BlockingVolumePawnsOnly.uc"
class ENGINE_API	ABlockingVolumePawnsOnly	: public ABlockingVolume
{
public:
    BITFIELD bOfficersOnly:1;
	   DECLARE_CLASS(ABlockingVolumePawnsOnly,ABlockingVolume,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ABlockingVolumePawnsOnly)
};

// Class	ACoverPlane is declared in "..\Engine\Classes\CoverPlane.uc"
class ENGINE_API	ACoverPlane	: public AVolume
{
public:
    BITFIELD CanBillBoard:1;
	   DECLARE_CLASS(ACoverPlane,AVolume,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ACoverPlane)
};

// Class	APhysicsVolume is declared in "..\Engine\Classes\PhysicsVolume.uc"
class ENGINE_API	APhysicsVolume	: public AVolume
{
public:
    BITFIELD bPainCausing:1;
    FVector ZoneVelocity;
    FVector Gravity;
    FLOAT GroundFriction;
    FLOAT TerminalVelocity;
    FLOAT DamagePerSec;
    class UClass* DamageType;
    INT Priority;
    class USound* EntrySound;
    class USound* ExitSound;
    class UClass* EntryActor;
    class UClass* ExitActor;
    FLOAT FluidFriction;
    FVector ViewFlash;
    FVector ViewFog;
    BITFIELD bDestructive:1;
    BITFIELD bNoInventory:1;
    BITFIELD bMoveProjectiles:1;
    BITFIELD bBounceVelocity:1;
    BITFIELD bNeutralZone:1;
    BITFIELD bWaterVolume:1;
    class AInfo* PainTimer;
    BITFIELD bDistanceFog:1;
    FColor DistanceFogColor;
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    FLOAT KExtraLinearDamping;
    FLOAT KExtraAngularDamping;
    FLOAT KBuoyancy;
    class APhysicsVolume* NextPhysicsVolume;
	  void	eventPawnLeavingVolume(class APawn* Other)
	  {
        APhysicsVolume_eventPawnLeavingVolume_Parms Parms;
		  if(IsProbing(NAME_PawnLeavingVolume)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnLeavingVolume),&Parms);
		  }
	  }
	  void	eventPawnEnteredVolume(class APawn* Other)
	  {
        APhysicsVolume_eventPawnEnteredVolume_Parms Parms;
		  if(IsProbing(NAME_PawnEnteredVolume)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnEnteredVolume),&Parms);
		  }
	  }
	  void	eventActorLeavingVolume(class AActor* Other)
	  {
        APhysicsVolume_eventActorLeavingVolume_Parms Parms;
		  if(IsProbing(NAME_ActorLeavingVolume)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeavingVolume),&Parms);
		  }
	  }
	  void	eventActorEnteredVolume(class AActor* Other)
	  {
        APhysicsVolume_eventActorEnteredVolume_Parms Parms;
		  if(IsProbing(NAME_ActorEnteredVolume)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEnteredVolume),&Parms);
		  }
	  }
	  void	eventPhysicsChangedFor(class AActor* Other)
	  {
        APhysicsVolume_eventPhysicsChangedFor_Parms Parms;
		  if(IsProbing(NAME_PhysicsChangedFor)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsChangedFor),&Parms);
		  }
	  }
	   DECLARE_CLASS(APhysicsVolume,AVolume,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APhysicsVolume)
};

// Class	ADefaultPhysicsVolume is declared in "..\Engine\Classes\DefaultPhysicsVolume.uc"
class ENGINE_API	ADefaultPhysicsVolume	: public APhysicsVolume
{
public:
	   DECLARE_CLASS(ADefaultPhysicsVolume,APhysicsVolume,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ADefaultPhysicsVolume)
};

// Class	AFluidVolume is declared in "..\Engine\Classes\FluidVolume\FluidVolume.uc"
class ENGINE_API	AFluidVolume	: public APhysicsVolume
{
public:
    class UCubemap* ReflectionMap;
    BYTE Transparency;
    FColor BaseColor;
    FColor TangentColor;
    FColor ReflectionModulator;
    FLOAT SubdivisionSize;
    BYTE EdgePolyBuffer;
    FLOAT WaveHeightScaler;
    FLOAT WaveSpeedScaler;
    class UFluidSurfaceParamaters* SurfaceParamaters;
    class UTexture* NormalMap;
    FLOAT RippleScale;
    BYTE RippleStrength;
    FVector RippleSpeed;
    class UTexture* Texture;
    FLOAT TextureScale;
    FVector TextureSpeed;
	   DECLARE_CLASS(AFluidVolume,APhysicsVolume,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AFluidVolume)
};

// Class	AController is declared in "..\Engine\Classes\Controller.uc"
class ENGINE_API	AController	: public AActor
{
public:
    class APawn* Pawn;
    INT PlayerNum;
    FLOAT SightCounter;
    FLOAT FovAngle;
    FLOAT Handedness;
    BITFIELD bIsPlayer:1;
    BITFIELD bGodMode:1;
    BITFIELD bLOSflag:1;
    BITFIELD bAdvancedTactics:1;
    BITFIELD bCanOpenDoors:1;
    BITFIELD bCanDoSpecial:1;
    BITFIELD bAdjusting:1;
    BITFIELD bPreparingMove:1;
    BITFIELD bControlAnimations:1;
    BITFIELD bEnemyInfoValid:1;
    BITFIELD bNotifyApex:1;
    BITFIELD bUsePlayerHearing:1;
    BITFIELD bJumpOverWall:1;
    BITFIELD bEnemyAcquired:1;
    BITFIELD bSoaking:1;
    BITFIELD bHuntPlayer:1;
    BITFIELD bAllowedToTranslocate:1;
    BITFIELD bAllowedToImpactJump:1;
    BYTE bLeanLeft;
    BYTE bLeanRight;
    BYTE bHoldCommand;
    BYTE bRun;
    BYTE bDuck;
    BYTE bFire;
    BYTE bAltFire;
    BYTE bVoiceTalk;
    FVector AdjustLoc;
    class AController* nextController;
    FLOAT Stimulus;
    FLOAT MoveTimer;
    class AActor* MoveTarget;
    FVector Destination;
    FVector FocalPoint;
    class AActor* Focus;
    class AMover* PendingMover;
    class AActor* GoalList[4];
    class ANavigationPoint* home;
    FLOAT MinHitWall;
    FLOAT RespawnPredictionTime;
    INT AcquisitionYawRate;
    class APawn* Enemy;
    class AActor* Target;
    FVector LastSeenPos;
    FVector LastSeeingPos;
    FLOAT LastSeenTime;
    FStringNoInit VoiceType;
    FLOAT OldMessageTime;
    class AActor* RouteCache[16];
    class UReachSpec* CurrentPath;
    FVector CurrentPathDir;
    class AActor* RouteGoal;
    FLOAT RouteDist;
    FLOAT LastRouteFind;
    BITFIELD bNearbyPathFound:1;
    FVector RouteGoalPoint;
    class UClass* PlayerReplicationInfoClass;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class UClass* PawnClass;
    class UClass* PreviousPawnClass;
    FLOAT GroundPitchTime;
    FVector ViewX;
    FVector ViewY;
    FVector ViewZ;
    class ANavigationPoint* StartSpot;
    FVector MonitorStartLoc;
    class APawn* MonitoredPawn;
    FLOAT MonitorMaxDistSq;
    class AActor* LastFailedReach;
    FLOAT FailedReachTime;
    FVector FailedReachLocation;
	   DECLARE_FUNCTION(execGetDistanceToSound);
	   DECLARE_FUNCTION(execInLatentExecution);
	   DECLARE_FUNCTION(execPickAnyTarget);
	   DECLARE_FUNCTION(execRemoveController);
	   DECLARE_FUNCTION(execAddController);
	   DECLARE_FUNCTION(execWaitForLanding);
	   DECLARE_FUNCTION(execPickWallAdjust);
	   DECLARE_FUNCTION(execEAdjustJump);
	   DECLARE_FUNCTION(execCanSee);
	   DECLARE_FUNCTION(execLineOfSightTo);
	   DECLARE_FUNCTION(execFinishRotation);
	  void	eventMonitoredPawnAlert()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_MonitoredPawnAlert),NULL);
	  }
	  void	eventEnemyNotVisible()
	  {
		  if(IsProbing(NAME_EnemyNotVisible)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_EnemyNotVisible),NULL);
		  }
	  }
	  void	eventSeeMonster(class APawn* Seen)
	  {
        AController_eventSeeMonster_Parms Parms;
		  if(IsProbing(NAME_SeeMonster)) {
		   Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeeMonster),&Parms);
		  }
	  }
	  void	eventSeePlayer(class APawn* Seen)
	  {
        AController_eventSeePlayer_Parms Parms;
		  if(IsProbing(NAME_SeePlayer)) {
		   Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeePlayer),&Parms);
		  }
	  }
	  void	eventHearNoise(FLOAT Loudness, class AActor* NoiseMaker)
	  {
        AController_eventHearNoise_Parms Parms;
		  if(IsProbing(NAME_HearNoise)) {
		   Parms.Loudness=Loudness;
		   Parms.NoiseMaker=NoiseMaker;
        ProcessEvent(FindFunctionChecked(ENGINE_HearNoise),&Parms);
		  }
	  }
	  void	eventSetupSpecialPathAbilities()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_SetupSpecialPathAbilities),NULL);
	  }
	  void	eventPrepareForMove(class ANavigationPoint* Goal, class UReachSpec* Path)
	  {
        AController_eventPrepareForMove_Parms Parms;
		  if(IsProbing(NAME_PrepareForMove)) {
		   Parms.Goal=Goal;
		   Parms.Path=Path;
        ProcessEvent(FindFunctionChecked(ENGINE_PrepareForMove),&Parms);
		  }
	  }
	  BITFIELD	eventAllowDetourTo(class ANavigationPoint* n)
	  {
        AController_eventAllowDetourTo_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.n=n;
        ProcessEvent(FindFunctionChecked(ENGINE_AllowDetourTo),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventNotifyMissedJump()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_NotifyMissedJump),NULL);
	  }
	  void	eventNotifyJumpApex()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_NotifyJumpApex),NULL);
	  }
	  void	eventNotifyHitMover(FVector HitNormal, class AMover* Wall)
	  {
        AController_eventNotifyHitMover_Parms Parms;
		   Parms.HitNormal=HitNormal;
		   Parms.Wall=Wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitMover),&Parms);
	  }
	  BITFIELD	eventNotifyBump(class AActor* Other)
	  {
        AController_eventNotifyBump_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_NotifyBump)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyBump),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventNotifyHitWall(FVector HitNormal, class AActor* Wall)
	  {
        AController_eventNotifyHitWall_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_NotifyHitWall)) {
		   Parms.HitNormal=HitNormal;
		   Parms.Wall=Wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitWall),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventNotifyLanded(FVector HitNormal)
	  {
        AController_eventNotifyLanded_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_NotifyLanded)) {
		   Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyLanded),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventNotifyHeadVolumeChange(class APhysicsVolume* NewVolume)
	  {
        AController_eventNotifyHeadVolumeChange_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_NotifyHeadVolumeChange)) {
		   Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHeadVolumeChange),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventNotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume)
	  {
        AController_eventNotifyPhysicsVolumeChange_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_NotifyPhysicsVolumeChange)) {
		   Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyPhysicsVolumeChange),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  void	eventLongFall()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_LongFall),NULL);
	  }
	  void	eventSoakStop(const FString& problem)
	  {
        AController_eventSoakStop_Parms Parms;
		   Parms.problem=problem;
        ProcessEvent(FindFunctionChecked(ENGINE_SoakStop),&Parms);
	  }
	  void	eventAIHearSound(class AActor* Actor, class USound* S, FVector SoundLocation, FVector Parameters, BITFIELD Attenuate)
	  {
        AController_eventAIHearSound_Parms Parms;
		  if(IsProbing(NAME_AIHearSound)) {
		   Parms.Actor=Actor;
		   Parms.S=S;
		   Parms.SoundLocation=SoundLocation;
		   Parms.Parameters=Parameters;
		   Parms.Attenuate=Attenuate;
        ProcessEvent(FindFunctionChecked(ENGINE_AIHearSound),&Parms);
		  }
	  }
	  void	eventMayFall()
	  {
		  if(IsProbing(NAME_MayFall)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_MayFall),NULL);
		  }
	  }
	   DECLARE_CLASS(AController,AActor,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AController)
};

// Class	APlayerController is declared in "..\Engine\Classes\PlayerController.uc"
class ENGINE_API	APlayerController	: public AController
{
public:
    class UPlayer* Player;
    BITFIELD bLookUpStairs:1;
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bCenterView:1;
    BITFIELD bBehindView:1;
    BITFIELD bFrozen:1;
    BITFIELD bPressedJump:1;
    BITFIELD bDoubleJump:1;
    BITFIELD bUpdatePosition:1;
    BITFIELD bIsTyping:1;
    BITFIELD bFixedCamera:1;
    BITFIELD bJumpStatus:1;
    BITFIELD bUpdating:1;
    BITFIELD bAlwaysLevel:1;
    BITFIELD bSetTurnRot:1;
    BITFIELD bCheatFlying:1;
    BITFIELD bFreeCamera:1;
    BITFIELD bZeroRoll:1;
    BITFIELD bCameraPositionLocked:1;
    BITFIELD bViewBot:1;
    BITFIELD UseFixedVisibility:1;
    BITFIELD bBlockCloseCamera:1;
    BITFIELD bValidBehindCamera:1;
    BITFIELD bForcePrecache:1;
    BITFIELD bClientDemo:1;
    BITFIELD bAllActorsRelevant:1;
    BITFIELD bShortConnectTimeOut:1;
    BITFIELD bPendingDestroy:1;
    BITFIELD bNoVoiceMessages:1;
    BITFIELD bNoVoiceTaunts:1;
    BITFIELD bNoAutoTaunts:1;
    BITFIELD bAutoTaunt:1;
    BITFIELD bSecondaryWeaponLast:1;
    BITFIELD bDynamicNetSpeed:1;
    BITFIELD bVoiceChatEnabled:1;
    BITFIELD bEnableInitialChatRoom:1;
    BYTE AnnouncerLevel;
    BYTE AnnouncerVolume;
    FLOAT AimingHelp;
    FLOAT MaxResponseTime;
    FLOAT WaitDelay;
    FLOAT aBaseX;
    FLOAT aBaseY;
    FLOAT aBaseZ;
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT aUp;
    FLOAT aLookUp;
    BYTE bStrafe;
    BYTE bSnapLevel;
    BYTE bLook;
    BYTE bFreeLook;
    BYTE bTurn180;
    BYTE bTurnToNearest;
    BYTE bXAxis;
    BYTE bYAxis;
    BYTE DoubleClickDir;
    INT ShowFlags;
    INT ExShowFlags;
    INT Misc1;
    INT Misc2;
    INT RendMap;
    FLOAT OrthoZoom;
    class AActor* ViewTarget;
    class AController* RealViewTarget;
    class APlayerController* DemoViewer;
    FLOAT CameraDist;
    FVector OldCameraLoc;
    FRotator OldCameraRot;
    TArrayNoInit<class UCameraEffect*> CameraEffects;
    FLOAT BaseFOV;
    FLOAT ZoomedFOV;
    FLOAT ZoomTime;
    FLOAT ZoomBezierPt1X;
    FLOAT ZoomBezierPt1Y;
    FLOAT ZoomBezierPt2X;
    FLOAT ZoomBezierPt2Y;
    FLOAT ZoomAlpha;
    BITFIELD WantsZoom:1;
    FVector FixedLocation;
    FRotator FixedRotation;
    FMatrix RenderWorldToCamera;
    FVector FlashScale;
    FVector FlashFog;
    FLOAT ConstantGlowScale;
    FVector ConstantGlowFog;
    BITFIELD bManualFogUpdate:1;
    FColor LastDistanceFogColor;
    FLOAT LastDistanceFogStart;
    FLOAT LastDistanceFogEnd;
    FLOAT CurrentDistanceFogEnd;
    FLOAT TimeSinceLastFogChange;
    INT LastZone;
    FVector TargetViewLocation;
    FRotator TargetViewRotation;
    FRotator BlendedTargetViewRotation;
    class AHUD* myHUD;
    FLOAT LastPlaySound;
    FLOAT LastPlaySpeech;
    FStringNoInit Song;
    BYTE Transition;
    class ASavedMove* SavedMoves;
    class ASavedMove* FreeMoves;
    class ASavedMove* PendingMove;
    FLOAT CurrentTimeStamp;
    FLOAT LastUpdateTime;
    FLOAT ServerTimeStamp;
    FLOAT TimeMargin;
    FLOAT ClientUpdateTime;
    FLOAT MaxTimeMargin;
    FStringNoInit ProgressMessage[4];
    FColor ProgressColor[4];
    FLOAT ProgressTimeOut;
    FStringNoInit QuickSaveString;
    FStringNoInit NoPauseMessage;
    FStringNoInit OwnCamera;
    class AVoiceChatReplicationInfo* VoiceReplicationInfo;
    class AGameReplicationInfo* GameReplicationInfo;
    FStringNoInit StatsUsername;
    FStringNoInit StatsPassword;
    class UClass* LocalMessageClass;
    FLOAT MaxShakeRoll;
    FVector MaxShakeOffset;
    FLOAT ShakeRollRate;
    FVector ShakeOffsetRate;
    FVector ShakeOffset;
    FLOAT ShakeRollTime;
    FVector ShakeOffsetTime;
    class APawn* TurnTarget;
    INT EnemyTurnSpeed;
    INT GroundPitch;
    FRotator TurnRot180;
    FVector OldFloor;
    class UCheatManager* CheatManager;
    class UClass* CheatClass;
    class UPlayerInput* PlayerInput;
    class UClass* InputClass;
    FVector FailedPathStart;
    INT DemoViewPitch;
    INT DemoViewYaw;
    BITFIELD bAlreadyNotifiedLevelOfGameStarted:1;
    class ASecurity* PlayerSecurity;
    FLOAT ForcePrecacheTime;
    FLOAT LastPingUpdate;
    FLOAT ExactPing;
    FLOAT OldPing;
    FLOAT SpectateSpeed;
    FLOAT DynamicPingThreshold;
    FLOAT NextSpeedChange;
    INT ClientCap;
    BITFIELD bEnableWeaponForceFeedback:1;
    BITFIELD bEnableDamageForceFeedback:1;
    BITFIELD bEnableGUIForceFeedback:1;
    BITFIELD bForceFeedbackSupported:1;
    FLOAT FOVBias;
    FLOAT LastDeltaTime;
    class IIControllableViewport* ActiveViewport;
    class IIControllableViewport* ServerItemViewport;
    class IIControllableViewport* ServerOfficerViewport;
    BITFIELD bIsObserving:1;
    BITFIELD bIgnoreNextRunRelease:1;
    BITFIELD bIgnoreNextCrouchRelease:1;
    FLOAT PostFullscreenManualFlushDelay;
    class ATimer* ManualFlushTimer;
    class UStatsInterface* Stats;
	   DECLARE_FUNCTION(execSuppressName);
	   DECLARE_FUNCTION(execGetLookAroundSpeed);
	   DECLARE_FUNCTION(execChangeVoiceChatter);
	   DECLARE_FUNCTION(execLeaveVoiceChat);
	   DECLARE_FUNCTION(execFlushInput);
	   DECLARE_FUNCTION(execClientHearSound);
	   DECLARE_FUNCTION(execFindStairRotation);
	   DECLARE_FUNCTION(execServerValidationResponse);
	   DECLARE_FUNCTION(execClientValidate);
	   DECLARE_FUNCTION(execPasteFromClipboard);
	   DECLARE_FUNCTION(execCopyToClipboard);
	   DECLARE_FUNCTION(execGetDefaultURL);
	   DECLARE_FUNCTION(execUpdateURL);
	   DECLARE_FUNCTION(execClientTravel);
	   DECLARE_FUNCTION(execSetViewTarget);
	   DECLARE_FUNCTION(execResetKeyboard);
	   DECLARE_FUNCTION(execGetEntryLevel);
	   DECLARE_FUNCTION(execConsoleCommand);
	   DECLARE_FUNCTION(execGetServerNetworkAddress);
	   DECLARE_FUNCTION(execGetPlayerNetworkAddress);
	   DECLARE_FUNCTION(execSetNetSpeed);
	  BITFIELD	eventVOIPIsIgnored(INT PlayerID)
	  {
        APlayerController_eventVOIPIsIgnored_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.PlayerID=PlayerID;
        ProcessEvent(FindFunctionChecked(ENGINE_VOIPIsIgnored),&Parms);
		   return Parms.ReturnValue;
	  }
	  FLOAT	eventGetLookAroundSpeed()
	  {
        APlayerController_eventGetLookAroundSpeed_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetLookAroundSpeed),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventStartClientDemoRec()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_StartClientDemoRec),NULL);
	  }
	  void	eventServerGetVoiceChatters(class APlayerController* Player)
	  {
        APlayerController_eventServerGetVoiceChatters_Parms Parms;
		   Parms.Player=Player;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerGetVoiceChatters),&Parms);
	  }
	  void	eventServerChangeVoiceChatter(class APlayerController* Player, INT IpAddr, INT Handle, BITFIELD Add)
	  {
        APlayerController_eventServerChangeVoiceChatter_Parms Parms;
		   Parms.Player=Player;
		   Parms.IpAddr=IpAddr;
		   Parms.Handle=Handle;
		   Parms.Add=Add;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerChangeVoiceChatter),&Parms);
	  }
	  void	eventClientCloseMenu(BITFIELD bCloseAll)
	  {
        APlayerController_eventClientCloseMenu_Parms Parms;
		   Parms.bCloseAll=bCloseAll;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientCloseMenu),&Parms);
	  }
	  void	eventClientOpenMenu(const FString& MenuClass, const FString& MenuName, BITFIELD bDisconnect, const FString& Msg1, const FString& Msg2, INT Msg3)
	  {
        APlayerController_eventClientOpenMenu_Parms Parms;
		   Parms.MenuClass=MenuClass;
		   Parms.MenuName=MenuName;
		   Parms.bDisconnect=bDisconnect;
		   Parms.Msg1=Msg1;
		   Parms.Msg2=Msg2;
		   Parms.Msg3=Msg3;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientOpenMenu),&Parms);
	  }
	  void	eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
	  {
        APlayerController_eventPlayerCalcView_Parms Parms;
		   Parms.ViewActor=ViewActor;
		   Parms.CameraLocation=CameraLocation;
		   Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
		   ViewActor=Parms.ViewActor;
		   CameraLocation=Parms.CameraLocation;
		   CameraRotation=Parms.CameraRotation;
	  }
	  void	eventRemoveCameraEffect(class UCameraEffect* ExEffect, BITFIELD ByClass)
	  {
        APlayerController_eventRemoveCameraEffect_Parms Parms;
		   Parms.ExEffect=ExEffect;
		   Parms.ByClass=ByClass;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveCameraEffect),&Parms);
	  }
	  void	eventAddCameraEffect(class UCameraEffect* NewEffect, BITFIELD UniqueClass, BITFIELD UniqueObject, BITFIELD RemoveConflicting)
	  {
        APlayerController_eventAddCameraEffect_Parms Parms;
		   Parms.NewEffect=NewEffect;
		   Parms.UniqueClass=UniqueClass;
		   Parms.UniqueObject=UniqueObject;
		   Parms.RemoveConflicting=RemoveConflicting;
        ProcessEvent(FindFunctionChecked(ENGINE_AddCameraEffect),&Parms);
	  }
	  void	eventPlayerTick(FLOAT DeltaTime)
	  {
        APlayerController_eventPlayerTick_Parms Parms;
		  if(IsProbing(NAME_PlayerTick)) {
		   Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTick),&Parms);
		  }
	  }
	  void	eventSetProgressTime(FLOAT t)
	  {
        APlayerController_eventSetProgressTime_Parms Parms;
		   Parms.t=t;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgressTime),&Parms);
	  }
	  void	eventSetProgressMessage(INT Index, const FString& S, FColor C)
	  {
        APlayerController_eventSetProgressMessage_Parms Parms;
		   Parms.Index=Index;
		   Parms.S=S;
		   Parms.C=C;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgressMessage),&Parms);
	  }
	  void	eventPreClientTravel()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel),NULL);
	  }
	  void	eventOnConnectionFailed()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_OnConnectionFailed),NULL);
	  }
	  void	eventOnFinishedPrecaching(BITFIELD doExtraFlush)
	  {
        APlayerController_eventOnFinishedPrecaching_Parms Parms;
		   Parms.doExtraFlush=doExtraFlush;
        ProcessEvent(FindFunctionChecked(ENGINE_OnFinishedPrecaching),&Parms);
	  }
	  void	eventTeamMessage(class APlayerReplicationInfo* PRI, const FString& S, FName Type, const FString& Location)
	  {
        APlayerController_eventTeamMessage_Parms Parms;
		   Parms.PRI=PRI;
		   Parms.S=S;
		   Parms.Type=Type;
		   Parms.Location=Location;
        ProcessEvent(FindFunctionChecked(ENGINE_TeamMessage),&Parms);
	  }
	  void	eventClientMessage(const FString& S, FName Type)
	  {
        APlayerController_eventClientMessage_Parms Parms;
		   Parms.S=S;
		   Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
	  }
	  void	eventReceiveLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
	  {
        APlayerController_eventReceiveLocalizedMessage_Parms Parms;
		   Parms.Message=Message;
		   Parms.Switch=Switch;
		   Parms.RelatedPRI_1=RelatedPRI_1;
		   Parms.RelatedPRI_2=RelatedPRI_2;
		   Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveLocalizedMessage),&Parms);
	  }
	  void	eventInitInputSystem()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_InitInputSystem),NULL);
	  }
	  void	eventClientSetViewTarget(class AActor* A)
	  {
        APlayerController_eventClientSetViewTarget_Parms Parms;
		   Parms.A=A;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientSetViewTarget),&Parms);
	  }
	  INT	eventClientHearSound(class AActor* Actor, class USound* S, FVector SoundLocation, FVector Parameters, FLOAT InnerRadius, INT flags, FLOAT FadeInTime, BITFIELD Attenuate)
	  {
        APlayerController_eventClientHearSound_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Actor=Actor;
		   Parms.S=S;
		   Parms.SoundLocation=SoundLocation;
		   Parms.Parameters=Parameters;
		   Parms.InnerRadius=InnerRadius;
		   Parms.flags=flags;
		   Parms.FadeInTime=FadeInTime;
		   Parms.Attenuate=Attenuate;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientHearSound),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventServerValidationResponse(const FString& R)
	  {
        APlayerController_eventServerValidationResponse_Parms Parms;
		   Parms.R=R;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerValidationResponse),&Parms);
	  }
	  void	eventClientValidate(const FString& C)
	  {
        APlayerController_eventClientValidate_Parms Parms;
		   Parms.C=C;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientValidate),&Parms);
	  }
	  void	eventWindowFocusRegained()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_WindowFocusRegained),NULL);
	  }
	  void	eventWindowFocusLost()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_WindowFocusLost),NULL);
	  }
	  void	eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
	  {
        APlayerController_eventClientTravel_Parms Parms;
		   Parms.URL=URL;
		   Parms.TravelType=TravelType;
		   Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
	  }
	   DECLARE_CLASS(APlayerController,AController,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APlayerController)
};

// Class	ACamera is declared in "..\Engine\Classes\Camera.uc"
class ENGINE_API	ACamera	: public APlayerController
{
public:
	   DECLARE_CLASS(ACamera,APlayerController,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ACamera)
};

// Class	AScoutController is declared in "..\Engine\Classes\ScoutController.uc"
class ENGINE_API	AScoutController	: public AController
{
public:
	   DECLARE_CLASS(AScoutController,AController,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AScoutController)
};

// Class	ADecoVolumeObject is declared in "..\Engine\Classes\DecoVolumeObject.uc"
class ENGINE_API	ADecoVolumeObject	: public AActor
{
public:
	   DECLARE_CLASS(ADecoVolumeObject,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ADecoVolumeObject)
};

// Class	ADecoration is declared in "..\Engine\Classes\Decoration.uc"
class ENGINE_API	ADecoration	: public AActor
{
public:
    class UClass* EffectWhenDestroyed;
    BITFIELD bPushable:1;
    BITFIELD bDamageable:1;
    BITFIELD bPushSoundPlaying:1;
    BITFIELD bSplash:1;
    class USound* PushSound;
    class USound* EndPushSound;
    INT numLandings;
    class UClass* contents;
    INT NumFrags;
    class UTexture* FragSkin;
    class UClass* FragType;
    FVector FragMomentum;
    INT Health;
    FLOAT SplashTime;
	   DECLARE_CLASS(ADecoration,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ADecoration)
};

// Class	AEmitter is declared in "..\Engine\Classes\Emitter.uc"
class ENGINE_API	AEmitter	: public AActor
{
public:
    TArrayNoInit<class UParticleEmitter*> Emitters;
    BITFIELD AutoDestroy:1;
    BITFIELD AutoReset:1;
    BITFIELD DisableFogging:1;
    BITFIELD RotationAndVelocityFromOwner:1;
    FRangeVector GlobalOffsetRange;
    FRange TimeTillResetRange;
    INT Initialized;
    FBox BoundingBox;
    FLOAT EmitterRadius;
    FLOAT EmitterHeight;
    BITFIELD ActorForcesEnabled:1;
    FVector GlobalOffset;
    FLOAT TimeTillReset;
    BITFIELD UseParticleProjectors:1;
    class UParticleMaterial* ParticleMaterial;
    BITFIELD DeleteParticleEmitters:1;
    BITFIELD bPlaying:1;
    BITFIELD bStoppedOverTime:1;
	   DECLARE_FUNCTION(execKill);
	  void	eventPreAutoDestroyed()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PreAutoDestroyed),NULL);
	  }
	  void	eventStopEmitters(BITFIELD bStopOverTime)
	  {
        AEmitter_eventStopEmitters_Parms Parms;
		   Parms.bStopOverTime=bStopOverTime;
        ProcessEvent(FindFunctionChecked(ENGINE_StopEmitters),&Parms);
	  }
	  void	eventPlayEmitters()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PlayEmitters),NULL);
	  }
	   DECLARE_CLASS(AEmitter,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AEmitter)
};

// Class	ASpawnableEmitter is declared in "..\Engine\Classes\SpawnableEmitter.uc"
class ENGINE_API	ASpawnableEmitter	: public AEmitter
{
public:
	   DECLARE_CLASS(ASpawnableEmitter,AEmitter,0|CLASS_Config,Engine)
    void CheckForErrors();
};

// Class	AEquipment is declared in "..\Engine\Classes\Equipment\Equipment.uc"
class ENGINE_API	AEquipment	: public AActor
{
public:
	   DECLARE_CLASS(AEquipment,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AEquipment)
};

// Class	AHandheldEquipment is declared in "..\Engine\Classes\Equipment\HandheldEquipment.uc"
class ENGINE_API	AHandheldEquipment	: public AEquipment
{
public:
    INT Range;
    class UClass* FirstPersonModelClass;
    class UClass* ThirdPersonModelClass;
    class UClass* MPFirstPersonModelClass;
    class UClass* MPThirdPersonModelClass;
    FStringNoInit Description;
    FStringNoInit FriendlyName;
    class UMaterial* GUIImage;
    BITFIELD ShouldLowReady:1;
    FLOAT ZoomedFOV;
    FLOAT ZoomTime;
    class UMaterial* ZoomBlurOverlay;
    FName LightstickThrowAnimPostfix;
    BYTE Slot;
    BYTE ThePocket;
    class AHandheldEquipmentModel* FirstPersonModel;
    class AHandheldEquipmentModel* ThirdPersonModel;
    BYTE EquippingStatus;
    BYTE UnequippingStatus;
    BYTE UsingStatus;
    BYTE MeleeingStatus;
    FLOAT EquipAnimationRate;
    FLOAT UnequipAnimationRate;
    FLOAT UseAnimationRate;
    FLOAT MeleeAnimationRate;
    BITFIELD InstantUnequip:1;
    BITFIELD bAbleToMelee:1;
    BITFIELD MeleeAnimNotifierTriggered:1;
    FLOAT MeleeRange;
    FLOAT MeleeDamage;
    FLOAT MeleePlayerStingDuration;
    FLOAT MeleeHeavilyArmoredPlayerStingDuration;
    FLOAT MeleeNonArmoredPlayerStingDuration;
    FLOAT MeleeAIStingDuration;
    BITFIELD Available:1;
    BITFIELD UnavailableAfterUsed:1;
    BITFIELD EquipOtherAfterUsed:1;
    BITFIELD PlayerCanUnequip:1;
    BITFIELD ShouldHaveFirstPersonModel:1;
    BITFIELD ShouldHaveThirdPersonModel:1;
    class AHandheldEquipmentPickup* Pickup;
    FLOAT RagdollDeathImpactMomentumMultiplier;
    INT AvailableCount;
	   DECLARE_FUNCTION(execGetThirdPersonModel);
	   DECLARE_FUNCTION(execGetFirstPersonModel);
	   DECLARE_FUNCTION(execInFirstPersonView);
	  void	eventGetPerfectFireStart(FVector& outLocation, FRotator& outDirection)
	  {
        AHandheldEquipment_eventGetPerfectFireStart_Parms Parms;
		   Parms.outLocation=outLocation;
		   Parms.outDirection=outDirection;
        ProcessEvent(FindFunctionChecked(ENGINE_GetPerfectFireStart),&Parms);
		   outLocation=Parms.outLocation;
		   outDirection=Parms.outDirection;
	  }
	  class AHandheldEquipmentModel*	eventGetThirdPersonModel()
	  {
        AHandheldEquipment_eventGetThirdPersonModel_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetThirdPersonModel),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(AHandheldEquipment,AEquipment,0|CLASS_Config,Engine)
    // Automatically updates the correct value of bOwnerNoSee based on
    // the current view and what this equipment is attached to.
    virtual UBOOL Tick( FLOAT DeltaSeconds, ELevelTick TickType );

    // Returns true if this weapon is currently being rendered in 1st person view,
    // otherwise returns false to indicate 3rd person view
    UBOOL InFirstPersonView();
};

// Class	AWeapon is declared in "..\Engine\Classes\Equipment\Weapon.uc"
class ENGINE_API	AWeapon	: public AHandheldEquipment
{
public:
    BITFIELD bIsLessLethal:1;
	   DECLARE_CLASS(AWeapon,AHandheldEquipment,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AWeapon)
};

// Class	AFiredWeapon is declared in "..\Engine\Classes\Equipment\FiredWeapon.uc"
class ENGINE_API	AFiredWeapon	: public AWeapon
{
public:
    TArrayNoInit<FString> PlayerAmmoOption;
    TArrayNoInit<FEnemyAmmo> EnemyUsesAmmo;
    class UClass* AmmoClass;
    class AAmmunition* Ammo;
    BITFIELD bHasAmmoBandolier:1;
    FVector ThirdPersonFireOffset;
    FLOAT MuzzleVelocity;
    BITFIELD bCanShootThroughGlass:1;
    BITFIELD bAimAtHead:1;
    FLOAT NextFireTime;
    BYTE ReloadingStatus;
    FLOAT ReloadAnimationRate;
    INT DeathFired;
    FLOAT aimerror;
    FLOAT PendingAimErrorPenalty;
    FLOAT MaxAimError;
    FLOAT SmallAimErrorRecoveryRate;
    FLOAT LargeAimErrorRecoveryRate;
    FLOAT AimErrorBreakingPoint;
    FLOAT LookAimErrorQuantizationFactor;
    FLOAT LookAimErrorPenaltyFactor;
    FLOAT MaxLookAimErrorPenalty;
    FLOAT InjuredAimErrorPenalty;
    FLOAT MaxInjuredAimErrorPenalty;
    FLOAT DamagedAimErrorPenalty;
    FLOAT EquippedAimErrorPenalty;
    FLOAT FiredAimErrorPenalty;
    FLOAT WalkToRunAimErrorPenalty;
    FLOAT StandToWalkAimErrorPenalty;
    FLOAT StandingAimError;
    FLOAT WalkingAimError;
    FLOAT RunningAimError;
    FLOAT CrouchingAimError;
    FLOAT RecoilBackDuration;
    FLOAT RecoilForeDuration;
    FLOAT RecoilMagnitude;
    FLOAT AutoFireRecoilMagnitudeIncrement;
    BITFIELD DebugPerfectAim:1;
    BITFIELD DebugDrawTraceFire:1;
    BITFIELD DebugDrawAccuracyCone:1;
    BITFIELD HasAttachedFlashlight:1;
    FVector FlashlightPosition_1stPerson;
    FRotator FlashlightRotation_1stPerson;
    FVector FlashlightPosition_3rdPerson;
    FRotator FlashlightRotation_3rdPerson;
    BITFIELD FlashlightProjection_IsInitializing:1;
    FName FlashlightProjection_StartBoneName;
    FLOAT FlashlightProjection_LastTestTime;
    BITFIELD FlashlightProjection_LastTestResult:1;
    FVector FlashlightProjection_LastTestSuccessfulHitLocation;
    FLOAT FlashlightProjection_LastSuccessfulTestTime;
    FLOAT FlashlightProjection_CurrentBrightnessAlpha;
    class UClass* FlashlightSpotLightClass;
    class UClass* FlashlightPointLightClass;
    class UClass* FlashlightCoronaLightClass;
    FLOAT PointLightDistanceFraction;
    FLOAT PointLightRadiusScale;
    FLOAT PointLightDistanceFadeRate;
    class ALight* FlashlightDynamicLight;
    class AActor* FlashlightReferenceActor;
    BITFIELD DebugDrawFlashlightDir:1;
    INT FlashlightUseFancyLights;
    FLOAT MinFlashlightBrightness;
    FLOAT MinFlashlightRadius;
    FLOAT FlashlightFirstPersonDistance;
    FLOAT MaxFlashlightDistance;
    FLOAT ThirdPersonFlashlightRadiusPenalty;
    BITFIELD bHighEndGraphicsBoard:1;
    FLOAT BaseFlashlightBrightness;
    FLOAT BaseFlashlightRadius;
    TArrayNoInit<BYTE> AvailableFireMode;
    BYTE CurrentFireMode;
    INT FireModeIndex;
    INT BurstShotCount;
    INT BurstShotsRemaining;
    FLOAT BurstRateFactor;
    INT AutoFireShotIndex;
    BITFIELD PerfectAimNextShot:1;
    FLOAT OverrideArmDamageModifier;
    BITFIELD OfficerWontEquipAsPrimary:1;
	   DECLARE_FUNCTION(execIsFlashlightProjectionVisible);
	   DECLARE_FUNCTION(execIsFlashlightInitialized);
	   DECLARE_FUNCTION(execIsFlashlightOn);
	   DECLARE_FUNCTION(execGetBaseAimError);
	   DECLARE_FUNCTION(execApplyRandomOffsetToRotation);
	   DECLARE_CLASS(AFiredWeapon,AWeapon,0|CLASS_Config,Engine)
    UBOOL IsFlashlightInitialized();
    UBOOL IsFlashlightOn();
    UBOOL IsFlashlightProjectionVisible();
    void  FlashlightProjectionLineCheck(FCheckResult & Hit, const FVector & End, const FVector & Start);
    static void ApplyRandomOffsetToRotation(const FRotator & OriginalRotation, float OffsetHalfAngleRadians, FRotator & NewRotation);
};

// Class	AProtectiveEquipment is declared in "..\Engine\Classes\Equipment\ProtectiveEquipment.uc"
class ENGINE_API	AProtectiveEquipment	: public AEquipment
{
public:
    FName AttachmentBone;
    BYTE ProtectedRegion;
    FLOAT MomentumToPenetrate;
    FRange PenetratedDamageFactor;
    FRange BlockedDamageFactor;
    class UMesh* WearerMesh;
    class UMaterial* FirstPersonOverlay;
    FStringNoInit Description;
    FStringNoInit FriendlyName;
    class UMaterial* GUIImage;
	   DECLARE_CLASS(AProtectiveEquipment,AEquipment,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AProtectiveEquipment)
};

// Class	AFluidSurfaceOscillator is declared in "..\Engine\Classes\FluidSurfaceOscillator.uc"
class ENGINE_API	AFluidSurfaceOscillator	: public AActor
{
public:
    class AFluidSurfaceInfo* FluidInfo;
    FLOAT Frequency;
    BYTE Phase;
    FLOAT Strength;
    FLOAT Radius;
    FLOAT OscTime;
	   DECLARE_CLASS(AFluidSurfaceOscillator,AActor,0|CLASS_Config,Engine)
	void UpdateOscillation( FLOAT DeltaTime );
	virtual void PostEditChange();
	virtual void Destroy();
};

// Class	AGenericExternalCamera is declared in "..\Engine\Classes\ExternalCameras\GenericExternalCamera.uc"
class ENGINE_API	AGenericExternalCamera	: public AActor
{
public:
    class UScriptedTexture* CameraTexture;
    INT ResolutionX;
    INT ResolutionY;
    INT OptimizedRadius;
    INT UpdateRate;
    INT FOV;
    BYTE OptimizeFor;
    BITFIELD bTimerHasElapsed:1;
    class ATimer* RenderTimer;
	   DECLARE_CLASS(AGenericExternalCamera,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AGenericExternalCamera)
};

// Class	AMirrorCamera is declared in "..\Engine\Classes\ExternalCameras\MirrorCamera.uc"
class ENGINE_API	AMirrorCamera	: public AGenericExternalCamera
{
public:
    FLOAT MirrorOffset;
    class UShader* ReferenceShader;
    class UScriptedTexture* MirrorTexture;
    class UTexScaler* MirrorScaler;
    class UMaterial* MirrorMaterial;
    class AMirror* OwnerMirror;
	   DECLARE_FUNCTION(execCreateNewScriptedTexture);
	   DECLARE_FUNCTION(execInitialize);
	   DECLARE_CLASS(AMirrorCamera,AGenericExternalCamera,0|CLASS_Config,Engine)
    UScriptedTexture* CreateScriptedTexture( const TCHAR* BaseName );
};

// Class	AHUD is declared in "..\Engine\Classes\HUD.uc"
class ENGINE_API	AHUD	: public AActor
{
public:
    class UFont* SmallFont;
    class UFont* MedFont;
    class UFont* BigFont;
    class UFont* LargeFont;
    FStringNoInit HUDConfigWindowType;
    class AHUD* nextHUD;
    class APlayerController* PlayerOwner;
    FStringNoInit ProgressFontName;
    class UFont* ProgressFontFont;
    FLOAT ProgressFadeTime;
    FColor MOTDColor;
    class AScoreBoard* ScoreBoard;
    BITFIELD bHideHUD:1;
    BITFIELD bShowScores:1;
    BITFIELD bShowDebugInfo:1;
    BITFIELD bHideCenterMessages:1;
    BITFIELD bBadConnectionAlert:1;
    BITFIELD bMessageBeep:1;
    FLOAT HudCanvasScale;
    FStringNoInit LoadingMessage;
    FStringNoInit SavingMessage;
    FStringNoInit ConnectingMessage;
    FStringNoInit PausedMessage;
    FStringNoInit PrecachingMessage;
    class UMovie* Movie;
    INT MoviePosX;
    INT MoviePosY;
    FLOAT TexMovieTop;
    FLOAT TexMovieLeft;
    FLOAT TexMovieBottom;
    FLOAT TexMovieRight;
    BITFIELD TexMovieTranslucent:1;
    class UMovieTexture* TextureMovie;
    FColor ConsoleColor;
    INT ConsoleMessageCount;
    INT ConsoleFontSize;
    INT MessageFontOffset;
    FConsoleMessage TextMessages[8];
    FLOAT ConsoleMessagePosX;
    FLOAT ConsoleMessagePosY;
    FStringNoInit FontArrayNames[9];
    class UFont* FontArrayFonts[9];
    INT FontScreenWidthMedium[9];
    INT FontScreenWidthSmall[9];
    FLOAT LastVoiceGain;
    FLOAT LastVoiceGainTime;
    INT LastPlayerIDTalking;
    FLOAT LastPlayerIDTalkingTime;
	   DECLARE_FUNCTION(execDraw3DCone);
	   DECLARE_FUNCTION(execDraw3DCylinder);
	   DECLARE_FUNCTION(execDraw3DCircle);
	   DECLARE_FUNCTION(execDraw3DLine);
	  void	eventAddDebugBox(FVector Center, FLOAT Diameter, FColor Color, FLOAT LifeSpan)
	  {
        AHUD_eventAddDebugBox_Parms Parms;
		   Parms.Center=Center;
		   Parms.Diameter=Diameter;
		   Parms.Color=Color;
		   Parms.LifeSpan=LifeSpan;
        ProcessEvent(FindFunctionChecked(ENGINE_AddDebugBox),&Parms);
	  }
	  void	eventClearDebugLines()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_ClearDebugLines),NULL);
	  }
	  void	eventRemoveDebugLine(INT Index)
	  {
        AHUD_eventRemoveDebugLine_Parms Parms;
		   Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveDebugLine),&Parms);
	  }
	  INT	eventAddDebugLine(FVector EndA, FVector EndB, FColor Color, FLOAT LifeSpan)
	  {
        AHUD_eventAddDebugLine_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.EndA=EndA;
		   Parms.EndB=EndB;
		   Parms.Color=Color;
		   Parms.LifeSpan=LifeSpan;
        ProcessEvent(FindFunctionChecked(ENGINE_AddDebugLine),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventPostRender(class UCanvas* Canvas)
	  {
        AHUD_eventPostRender_Parms Parms;
		   Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
	  }
	  void	eventShowUpgradeMenu()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_ShowUpgradeMenu),NULL);
	  }
	  void	eventConnectFailure(const FString& FailCode, const FString& URL)
	  {
        AHUD_eventConnectFailure_Parms Parms;
		   Parms.FailCode=FailCode;
		   Parms.URL=URL;
        ProcessEvent(FindFunctionChecked(ENGINE_ConnectFailure),&Parms);
	  }
	  void	eventWorldSpaceOverlays()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_WorldSpaceOverlays),NULL);
	  }
	   DECLARE_CLASS(AHUD,AActor,0|CLASS_Transient|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AHUD)
};

// Class	AHandheldEquipmentModel is declared in "..\Engine\Classes\Equipment\HandheldEquipmentModel.uc"
class ENGINE_API	AHandheldEquipmentModel	: public AActor
{
public:
    FName EquipAnimation;
    FName UnequipAnimation;
    FName UseAnimation;
    FName MeleeAnimation;
    TArrayNoInit<FIdleAnimation> HolderIdleAnimations;
    INT IdleChanceSum;
    FName HolderLowReadyIdleAnimation;
    FName HolderDisorientedLowReadyIdleAnimation;
    FName HolderEquipAnimation;
    FName HolderUnequipAnimation;
    FName HolderUseAnimation;
    FName HolderMeleeAnimation;
    FLOAT HolderEquipTweenTime;
    FName HolderUnequipFromMPCuffedAnimation;
    FName EquippedSocket;
    FName UnequippedSocket;
    TArrayNoInit<FString> ExtraAnimationSets;
    INT HolderEquipAnimationChannel;
    INT HolderUnEquipAnimationChannel;
    INT HolderUseAnimationChannel;
    INT HolderMeleeAnimationChannel;
    BITFIELD bIsEquipped:1;
    class AHandheldEquipment* HandheldEquipment;
    BITFIELD IsBusy:1;
    FName HolderAnimationRootBone;
    FName SelectedUseAnimation;
    FName SelectedHolderUseAnimation;
    FLOAT SelectedUseAnimationRate;
    FLOAT SelectedHolderUseAnimationRate;
    FName SelectedMeleeAnimation;
    FName SelectedHolderMeleeAnimation;
    FLOAT MeleeTweenTime;
    class UStaticMesh* DroppedStaticMesh;
    BITFIELD bIsDropped:1;
    BITFIELD WasPrimary:1;
    FVector MostRecentLocation;
    BITFIELD bNotifiedOfWeaponAtRest:1;
    INT AtRestCountdown;
    FVector AtRestLocation;
    FRotator AtRestRotation;
    FStringNoInit PrecomputedUniqueID;
	  void	eventNotifyClientsDroppedWeaponAtRest()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_NotifyClientsDroppedWeaponAtRest),NULL);
	  }
	   DECLARE_CLASS(AHandheldEquipmentModel,AActor,0|CLASS_Config,Engine)
    virtual void PreRenderCallback(UBOOL MainScene, FLevelSceneNode* SceneNode, FRenderInterface* RI);
    virtual void TickSpecial(FLOAT deltaSeconds);
};

// Class	AHands is declared in "..\Engine\Classes\Equipment\Hands.uc"
class ENGINE_API	AHands	: public AActor
{
public:
    FVector PlayerViewOffset;
    TArrayNoInit<FString> AnimationGroups;
    TArrayNoInit<FVector> HandsPass;
    INT NotUsed;
    FLOAT PreThrowTweenTime;
    FLOAT PreThrowRootBone;
    BITFIELD bIsLowReady:1;
    FLOAT NextIdleTweenTime;
	   DECLARE_CLASS(AHands,AActor,0|CLASS_Config,Engine)
    // Automatically updates the correct value of bOwnerNoSee based on
    // the current view.
    virtual UBOOL Tick( FLOAT DeltaSeconds, ELevelTick TickType );
    virtual void PreRenderCallback(UBOOL MainScene, FLevelSceneNode* SceneNode, FRenderInterface* RI);
};

// Class	AHavokActor is declared in "..\Engine\Classes\HavokActor.uc"
class ENGINE_API	AHavokActor	: public AActor
{
public:
    BITFIELD bAcceptsShotImpulse:1;
    FLOAT MomentumToHavokImpulseConversionFactor;
    FLOAT OverrideMomentumToPenetrate;
    FLOAT MaxImpulseToMassRatio;
	   DECLARE_CLASS(AHavokActor,AActor,0|CLASS_Config,Engine)
#ifdef UNREAL_HAVOK
	virtual void Spawned();
#endif
};

// Class	AHavokConstraint is declared in "..\Engine\Classes\HavokConstraint.uc"
class ENGINE_API	AHavokConstraint	: public AHavokActor
{
public:
    INT hkConstraintPtr;
    BITFIELD hkInitCalled:1;
    class AActor* hkAttachedActorA;
    FName hkAttachedSubPartA;
    class AActor* hkAttachedActorB;
    FName hkAttachedSubPartB;
    BITFIELD bDisableCollisions:1;
    FLOAT fMaxForceToBreak;
    FLOAT fSpecificStrength;
    FLOAT fSpecificDamping;
    BYTE AutoComputeLocals;
    FVector LocalPosA;
    FVector LocalAxisA;
    FVector LocalPerpAxisA;
    FVector LocalPosB;
    FVector LocalAxisB;
    FVector LocalPerpAxisB;
	   DECLARE_FUNCTION(execComputeLocalValues);
	   DECLARE_FUNCTION(execActivateAttachedBodies);
	   DECLARE_FUNCTION(execUpdateConstraintDetails);
	   DECLARE_FUNCTION(execRecreateConstraint);
	   DECLARE_CLASS(AHavokConstraint,AHavokActor,0|CLASS_Config,Engine)
#ifdef UNREAL_HAVOK
  
	virtual bool HavokInitActor();
	virtual void HavokQuitActor();
	virtual void HavokScriptMoveUpdate(FLOAT dt);

	virtual void Spawned(); // override the default (rigidbody) one in HavokActor

	virtual void PostEditChange(); // this wil auto recreate the constraint if not in Editor
	virtual void PostEditMove();

	virtual void RecreateConstraint(); // call this if you change of the constraint data and the attached body names and change tto/from 0 for damping and strength values (requires extra constraint layer to be changed)
    virtual void UpdateConstraintDetails(); // call this if you just change of the updateable constraint data (limits, positions etc, not the attached bodies though)
	virtual void ActivateAttachedBodies(); // called automatically when you update the constraint, but you can use it anytime.
	virtual void AutoComputeLocalValues(); // compute the Local Axis based on some set other axis (either from the other Actor or from this constraint actor itself). Called automatically on create and update.
	
	virtual void PrivateSetupExtraData(); // internal call
	virtual void PrivateUpdateExtraData(); // internal call
	virtual void* GetRigidBodyPtrA(); // internal call
	virtual void* GetRigidBodyPtrB(); // internal call
	virtual void* GetBaseConstraint(); // internal call

	virtual void CheckForErrors(); // used for checking that this constraint is valid during map build
	virtual void RenderEditorSelected(FLevelSceneNode* SceneNode,FRenderInterface* RI, FDynamicActor* FDA);
	virtual UBOOL CheckOwnerUpdated();

#endif
};

// Class	AHavok6DOFConstraint is declared in "..\Engine\Classes\Havok6DOFConstraint.uc"
class ENGINE_API	AHavok6DOFConstraint	: public AHavokConstraint
{
public:
    BITFIELD bConstrainAngular:1;
    BITFIELD bConstrainLinear:1;
    INT pivotAIndex;
    INT pivotBIndex;
    INT basisAIndex;
    INT basisBIndex;
	   DECLARE_CLASS(AHavok6DOFConstraint,AHavokConstraint,0|CLASS_Config,Engine)
#ifdef UNREAL_HAVOK
	virtual bool HavokInitActor();
	virtual void UpdateConstraintDetails();
#endif
};

// Class	AHavokBSConstraint is declared in "..\Engine\Classes\HavokBSConstraint.uc"
class ENGINE_API	AHavokBSConstraint	: public AHavokConstraint
{
public:
	   DECLARE_CLASS(AHavokBSConstraint,AHavokConstraint,0|CLASS_Config,Engine)
#ifdef UNREAL_HAVOK
	virtual bool HavokInitActor();
	virtual void UpdateConstraintDetails();
#endif
};

// Class	AHavokConeLimitConstraint is declared in "..\Engine\Classes\HavokConeLimitConstraint.uc"
class ENGINE_API	AHavokConeLimitConstraint	: public AHavokConstraint
{
public:
    FLOAT hkHalfAngle;
    INT basisAIndex;
    INT basisBIndex;
    INT coneIndex;
	   DECLARE_CLASS(AHavokConeLimitConstraint,AHavokConstraint,0|CLASS_Config,Engine)
#ifdef UNREAL_HAVOK
	virtual bool HavokInitActor();
	virtual void UpdateConstraintDetails();
#endif
};

// Class	AHavokHingeConstraint is declared in "..\Engine\Classes\HavokHingeConstraint.uc"
class ENGINE_API	AHavokHingeConstraint	: public AHavokConstraint
{
public:
    BYTE hkHingeType;
    BYTE hkHingeMotorType;
    BITFIELD hkMotorActive:1;
    FLOAT hkDesiredAngVel;
    FLOAT hkMaxForce;
    FLOAT hkMotorDamping;
    FLOAT hkDesiredAngleA;
    FLOAT hkDesiredAngleB;
    BITFIELD hkUseDesiredAngleB:1;
    FLOAT hkCurrentAngle;
	   DECLARE_CLASS(AHavokHingeConstraint,AHavokConstraint,0|CLASS_Config,Engine)
#ifdef UNREAL_HAVOK
	virtual bool HavokInitActor();
	virtual void UpdateConstraintDetails();
#endif
};

// Class	AHavokPrismaticConstraint is declared in "..\Engine\Classes\HavokPrismaticConstraint.uc"
class ENGINE_API	AHavokPrismaticConstraint	: public AHavokConstraint
{
public:
	   DECLARE_CLASS(AHavokPrismaticConstraint,AHavokConstraint,0|CLASS_Config,Engine)
#ifdef UNREAL_HAVOK
	virtual bool HavokInitActor();
	virtual void UpdateConstraintDetails();
#endif
};

// Class	AHavokWeakOrientationConstraint is declared in "..\Engine\Classes\HavokWeakOrientationConstraint.uc"
class ENGINE_API	AHavokWeakOrientationConstraint	: public AHavokConstraint
{
public:
	   DECLARE_CLASS(AHavokWeakOrientationConstraint,AHavokConstraint,0|CLASS_Config,Engine)
#ifdef UNREAL_HAVOK
	virtual bool HavokInitActor();
	virtual void HavokQuitActor(); // removes the Action, not constraint
	virtual void UpdateConstraintDetails();
	virtual void* GetBaseConstraint(); // returns the Action, not constraint
#endif
};

// Class	AInfo is declared in "..\Engine\Classes\Info.uc"
class ENGINE_API	AInfo	: public AActor
{
public:
	   DECLARE_CLASS(AInfo,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AInfo)
};

// Class	AFileLog is declared in "..\Engine\Classes\FileLog.uc"
class ENGINE_API	AFileLog	: public AInfo
{
public:
    INT LogAr;
    FStringNoInit LogFileName;
	   DECLARE_FUNCTION(execLogf);
	   DECLARE_FUNCTION(execCloseLog);
	   DECLARE_FUNCTION(execOpenLog);
	   DECLARE_CLASS(AFileLog,AInfo,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AFileLog)
};

// Class	AGameInfo is declared in "..\Engine\Classes\GameInfo.uc"
class ENGINE_API	AGameInfo	: public AInfo
{
public:
    BITFIELD bChangingLevels:1;
    BITFIELD bRestartLevel:1;
    BITFIELD bPauseable:1;
    BITFIELD bCanChangeSkin:1;
    BITFIELD bTeamGame:1;
    BITFIELD bGameEnded:1;
    BITFIELD bOverTime:1;
    BITFIELD bAlternateMode:1;
    BITFIELD bCanViewOthers:1;
    BITFIELD bDelayedStart:1;
    BITFIELD bWaitingToStartMatch:1;
    BITFIELD bChangeLevels:1;
    BITFIELD bAlreadyChanged:1;
    BITFIELD bLoggingGame:1;
    BITFIELD bEnableStatLogging:1;
    BITFIELD bAllowWeaponThrowing:1;
    BITFIELD bAllowBehindView:1;
    BITFIELD bAdminCanPause:1;
    BITFIELD bGameRestarted:1;
    BITFIELD bKeepSamePlayerStart:1;
    BITFIELD bPostGameStarted:1;
    FLOAT GameDifficulty;
    INT GoreLevel;
    FLOAT AutoAim;
    FLOAT GameSpeed;
    FLOAT StartTime;
    FStringNoInit DefaultPlayerClassName;
    FStringNoInit ScoreBoardType;
    FStringNoInit BotMenuType;
    FStringNoInit RulesMenuType;
    FStringNoInit SettingsMenuType;
    FStringNoInit GameUMenuType;
    FStringNoInit MultiplayerUMenuType;
    FStringNoInit GameOptionsMenuType;
    FStringNoInit HUDType;
    FStringNoInit MapListType;
    FStringNoInit MapPrefix;
    FStringNoInit BeaconName;
    INT MaxSpectators;
    INT NumSpectators;
    INT MaxPlayers;
    INT NumPlayers;
    INT NumBots;
    INT CurrentID;
    FStringNoInit DefaultPlayerName;
    FStringNoInit GameName;
    FStringNoInit GameModeString;
    FLOAT FearCostFallOff;
    INT GoalScore;
    INT MaxLives;
    INT TimeLimit;
    class UClass* DeathMessageClass;
    class UClass* GameMessageClass;
    FName OtherMesgGroup;
    FStringNoInit MutatorClass;
    class AMutator* BaseMutator;
    FStringNoInit AccessControlClass;
    class AAccessControl* AccessControl;
    class AGameRules* GameRulesModifiers;
    FStringNoInit BroadcastHandlerClass;
    class ABroadcastHandler* BroadcastHandler;
    class UClass* PlayerControllerClass;
    FStringNoInit PlayerControllerClassName;
    class UClass* GameReplicationInfoClass;
    class AGameReplicationInfo* GameReplicationInfo;
    BITFIELD bWelcomePending:1;
    class UClass* VoiceReplicationInfoClass;
    class AVoiceChatReplicationInfo* VoiceReplicationInfo;
    TArrayNoInit<FVoiceChatterInfo> VoiceChatters;
    FStringNoInit SecurityClass;
    FStringNoInit ScreenShotName;
    FStringNoInit DecoTextName;
    FStringNoInit Acronym;
    FStringNoInit GIPropsDisplayText[11];
    FStringNoInit GIPropsExtras[2];
    BITFIELD bGameStarted:1;
	   DECLARE_FUNCTION(execParseKillMessage);
	   DECLARE_FUNCTION(execGetNetworkNumber);
	   DECLARE_FUNCTION(execFindOpenSpot);
	  void	eventBroadcastLocalized(class AActor* Sender, class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
	  {
        AGameInfo_eventBroadcastLocalized_Parms Parms;
		   Parms.Sender=Sender;
		   Parms.Message=Message;
		   Parms.Switch=Switch;
		   Parms.RelatedPRI_1=RelatedPRI_1;
		   Parms.RelatedPRI_2=RelatedPRI_2;
		   Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalized),&Parms);
	  }
	  void	eventBroadcast(class AActor* Sender, const FString& msg, FName Type, class APlayerController* Target)
	  {
        AGameInfo_eventBroadcast_Parms Parms;
		   Parms.Sender=Sender;
		   Parms.msg=msg;
		   Parms.Type=Type;
		   Parms.Target=Target;
        ProcessEvent(FindFunctionChecked(ENGINE_Broadcast),&Parms);
	  }
	  void	eventAcceptInventory(class APawn* PlayerPawn)
	  {
        AGameInfo_eventAcceptInventory_Parms Parms;
		   Parms.PlayerPawn=PlayerPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory),&Parms);
	  }
	  void	eventPostLogin(class APlayerController* NewPlayer)
	  {
        AGameInfo_eventPostLogin_Parms Parms;
		   Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLogin),&Parms);
	  }
	  class APlayerController*	eventLogin(const FString& Portal, const FString& Options, FString& Error)
	  {
        AGameInfo_eventLogin_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Portal=Portal;
		   Parms.Options=Options;
		   Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
		   Error=Parms.Error;
		   return Parms.ReturnValue;
	  }
	  void	eventPreLogin(const FString& Options, const FString& Address, FString& Error, FString& FailCode)
	  {
        AGameInfo_eventPreLogin_Parms Parms;
		   Parms.Options=Options;
		   Parms.Address=Address;
		   Parms.Error=Error;
		   Parms.FailCode=FailCode;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogin),&Parms);
		   Error=Parms.Error;
		   FailCode=Parms.FailCode;
	  }
	  FString	eventGetBeaconText()
	  {
        AGameInfo_eventGetBeaconText_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventInitGame(const FString& Options, FString& Error)
	  {
        AGameInfo_eventInitGame_Parms Parms;
		   Parms.Options=Options;
		   Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_InitGame),&Parms);
		   Error=Parms.Error;
	  }
	  void	eventDetailChange()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
	  }
	  void	eventGameEnding()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_GameEnding),NULL);
	  }
	   DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};

// Class	AGameStats is declared in "..\Engine\Classes\GameStats.uc"
class ENGINE_API	AGameStats	: public AInfo
{
public:
    class AFileLog* TempLog;
    class AGameReplicationInfo* GRI;
    BITFIELD bShowBots:1;
	   DECLARE_FUNCTION(execGetMapFileName);
	   DECLARE_FUNCTION(execGetStatsIdentifier);
	   DECLARE_CLASS(AGameStats,AInfo,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AGameStats)
};

// Class	AInternetInfo is declared in "..\Engine\Classes\InternetInfo.uc"
class ENGINE_API	AInternetInfo	: public AInfo
{
public:
	   DECLARE_CLASS(AInternetInfo,AInfo,0|CLASS_Transient|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};

// Class	AMutator is declared in "..\Engine\Classes\Mutator.uc"
class ENGINE_API	AMutator	: public AInfo
{
public:
    class AMutator* NextMutator;
    FStringNoInit GroupName;
    FStringNoInit FriendlyName;
    FStringNoInit Description;
    BITFIELD bUserAdded:1;
	   DECLARE_CLASS(AMutator,AInfo,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AMutator)
};

// Class	AReplicationInfo is declared in "..\Engine\Classes\ReplicationInfo.uc"
class ENGINE_API	AReplicationInfo	: public AInfo
{
public:
	   DECLARE_CLASS(AReplicationInfo,AInfo,0|CLASS_Config,Engine)
	INT* GetOptimizedRepList( BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

// Class	AGameReplicationInfo is declared in "..\Engine\Classes\GameReplicationInfo.uc"
class ENGINE_API	AGameReplicationInfo	: public AReplicationInfo
{
public:
    FStringNoInit GameName;
    FStringNoInit GameClass;
    BITFIELD bTeamGame:1;
    BITFIELD bStopCountDown:1;
    BITFIELD bMatchHasBegun:1;
    BITFIELD bTeamSymbolsUpdated:1;
    INT RemainingTime;
    INT ElapsedTime;
    INT RemainingMinute;
    FLOAT SecondCount;
    INT GoalScore;
    INT TimeLimit;
    INT MaxLives;
    class ATeamInfo* Teams[3];
    FStringNoInit ServerName;
    FStringNoInit ShortName;
    FStringNoInit AdminName;
    FStringNoInit AdminEmail;
    INT ServerRegion;
    FStringNoInit MOTDLine1;
    FStringNoInit MOTDLine2;
    FStringNoInit MOTDLine3;
    FStringNoInit MOTDLine4;
    class AActor* Winner;
    class AVoiceChatReplicationInfo* VoiceReplicationInfo;
    TArrayNoInit<class APlayerReplicationInfo*> PRIArray;
    FVector FlagPos;
    BYTE CarriedObjectState[2];
    INT MatchID;
	   DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AGameReplicationInfo)
};

// Class	APlayerReplicationInfo is declared in "..\Engine\Classes\PlayerReplicationInfo.uc"
class ENGINE_API	APlayerReplicationInfo	: public AReplicationInfo
{
public:
    FLOAT Score;
    FLOAT Deaths;
    INT Ping;
    class AVolume* PlayerVolume;
    class AZoneInfo* PlayerZone;
    INT NumLives;
    FStringNoInit PlayerName;
    FStringNoInit CharacterName;
    FStringNoInit OldCharacterName;
    FStringNoInit OldName;
    FStringNoInit PreviousName;
    INT PlayerID;
    class ATeamInfo* Team;
    INT TeamID;
    class UClass* VoiceType;
    BITFIELD bAdmin:1;
    BITFIELD bIsFemale:1;
    BITFIELD bIsSpectator:1;
    BITFIELD bOnlySpectator:1;
    BITFIELD bWaitingPlayer:1;
    BITFIELD bReadyToPlay:1;
    BITFIELD bOutOfLives:1;
    BITFIELD bBot:1;
    BITFIELD bWelcomed:1;
    BITFIELD bReceivedPing:1;
    BITFIELD bHasFlag:1;
    INT StartTime;
    FStringNoInit StringDead;
    FStringNoInit StringSpectating;
    FStringNoInit StringUnknown;
    INT GoalsScored;
    INT Kills;
    class AVoiceChatReplicationInfo* VoiceInfo;
    BITFIELD bRegisteredChatRoom:1;
    class AVoiceChatRoom* PrivateChatRoom;
    INT ActiveChannel;
    INT VoiceMemberMask;
    BYTE VoiceID;
	  void	eventClientNameChange()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_ClientNameChange),NULL);
	  }
	  void	eventUpdateCharacter()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_UpdateCharacter),NULL);
	  }
	   DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APlayerReplicationInfo)
};

// Class	ATeamInfo is declared in "..\Engine\Classes\TeamInfo.uc"
class ENGINE_API	ATeamInfo	: public AReplicationInfo
{
public:
    FStringNoInit TeamName;
    INT Size;
    FLOAT Score;
    INT TeamIndex;
    FColor TeamColor;
    FColor AltTeamColor;
    class AActor* HomeBase;
    class UClass* DefaultPlayerClass;
    FStringNoInit ColorNames[4];
    class UMaterial* TeamIcon;
	   DECLARE_CLASS(ATeamInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ATeamInfo)
};

// Class	AVoiceChatReplicationInfo is declared in "..\Engine\Classes\VoiceChatReplicationInfo.uc"
class ENGINE_API	AVoiceChatReplicationInfo	: public AReplicationInfo
{
public:
    INT PublicMask;
    INT LocalMask;
    TArrayNoInit<class AVoiceChatRoom*> Channels;
    TArrayNoInit<FString> PublicChannelNames;
    FStringNoInit VCDisplayText[6];
    FStringNoInit VCDescText[6];
    class AGameReplicationInfo* GRI;
    class UClass* ChatRoomClass;
    TArrayNoInit<FVoiceChatCodec> InstalledCodec;
    TArrayNoInit<FString> VoIPInternetCodecs;
    TArrayNoInit<FString> VoIPLANCodecs;
    BITFIELD bEnableVoiceChat:1;
    BITFIELD bAllowLocalBroadcast:1;
    INT MaxChatters;
    INT DefaultChannel;
    FLOAT LocalBroadcastRange;
    FLOAT DefaultBroadcastRadius;
    FLOAT BroadcastRadius;
    BITFIELD bPrivateChat:1;
    BITFIELD bRefresh:1;
	  INT	eventGetChannelIndex(const FString& ChannelTitle, INT TeamIndex)
	  {
        AVoiceChatReplicationInfo_eventGetChannelIndex_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.ChannelTitle=ChannelTitle;
		   Parms.TeamIndex=TeamIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_GetChannelIndex),&Parms);
		   return Parms.ReturnValue;
	  }
	  INT	eventGetChannelCount()
	  {
        AVoiceChatReplicationInfo_eventGetChannelCount_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetChannelCount),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(AVoiceChatReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)

	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

// Class	ASecurity is declared in "..\Engine\Classes\Security.uc"
class ENGINE_API	ASecurity	: public AInfo
{
public:
    INT LastType;
    FStringNoInit LastParams[2];
	   DECLARE_FUNCTION(execNativePerform);
	  void	eventServerCallback(INT SecType, const FString& data)
	  {
        ASecurity_eventServerCallback_Parms Parms;
		   Parms.SecType=SecType;
		   Parms.data=data;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerCallback),&Parms);
	  }
	   DECLARE_CLASS(ASecurity,AInfo,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ASecurity)
};

// Class	AVoiceChatRoom is declared in "..\Engine\Classes\VoiceChatRoom.uc"
class ENGINE_API	AVoiceChatRoom	: public AInfo
{
public:
    class AGameReplicationInfo* GRI;
    class AVoiceChatReplicationInfo* VoiceChatManager;
    class AVoiceChatRoom* Parent;
    TArrayNoInit<class AVoiceChatRoom*> Children;
    FStringNoInit Password;
    INT ChannelIndex;
    BITFIELD bLocal:1;
    INT TeamIndex;
	  BITFIELD	eventIsMember(class APlayerReplicationInfo* PRI, BITFIELD bNoCascade)
	  {
        AVoiceChatRoom_eventIsMember_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.PRI=PRI;
		   Parms.bNoCascade=bNoCascade;
        ProcessEvent(FindFunctionChecked(ENGINE_IsMember),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(AVoiceChatRoom,AInfo,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AVoiceChatRoom)
};

// Class	AZoneInfo is declared in "..\Engine\Classes\ZoneInfo.uc"
class ENGINE_API	AZoneInfo	: public AInfo
{
public:
    class ASkyZoneInfo* SkyZone;
    FName ZoneTag;
    FStringNoInit LocationName;
    FLOAT KillZ;
    BYTE KillZType;
    BITFIELD bSoftKillZ:1;
    BITFIELD bTerrainZone:1;
    BITFIELD bDistanceFog:1;
    BITFIELD bClearToFogColor:1;
    TArrayNoInit<class ATerrainInfo*> Terrains;
    BITFIELD bUseFlashlight:1;
    FVector AmbientVector;
    BYTE AmbientBrightness;
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    FLOAT AmbientXGroundRatio;
    FColor DistanceFogColor;
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    FLOAT DistanceFogBlendTime;
    BYTE DistanceFogType;
    FLOAT DistanceFogExpBias;
    FLOAT DistanceFogClipBias;
    BITFIELD bClipToDistanceFog:1;
    class UTexture* EnvironmentMap;
    FLOAT TexUPanSpeed;
    FLOAT TexVPanSpeed;
    class UI3DL2Listener* ZoneEffect;
    BITFIELD bLonelyZone:1;
    TArrayNoInit<class AZoneInfo*> ManualExcludes;
    TArrayNoInit<class ANavigationPoint*> ZonePropagationNodes;
    FName ZoneSoundTag;
    TArrayNoInit<FName> EffectsContexts;
	   DECLARE_FUNCTION(execZoneActors);
	  void	eventActorLeaving(class AActor* Other)
	  {
        AZoneInfo_eventActorLeaving_Parms Parms;
		  if(IsProbing(NAME_ActorLeaving)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving),&Parms);
		  }
	  }
	  void	eventActorEntered(class AActor* Other)
	  {
        AZoneInfo_eventActorEntered_Parms Parms;
		  if(IsProbing(NAME_ActorEntered)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered),&Parms);
		  }
	  }
	   DECLARE_CLASS(AZoneInfo,AInfo,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AZoneInfo)
};

// Class	ALevelInfo is declared in "..\Engine\Classes\LevelInfo.uc"
class ENGINE_API	ALevelInfo	: public AZoneInfo
{
public:
    FLOAT TimeDilation;
    FLOAT TimeSeconds;
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    FLOAT PauseDelay;
    FStringNoInit Title;
    FStringNoInit Author;
    class UMaterial* Screenshot;
    FStringNoInit Description;
    TArrayNoInit<BYTE> SupportedModes;
    INT IdealPlayerCountMin;
    INT IdealPlayerCountMax;
    BYTE PhysicsDetailLevel;
    FLOAT KarmaTimeScale;
    FLOAT RagdollTimeScale;
    INT MaxRagdolls;
    FLOAT KarmaGravScale;
    BITFIELD bKStaticFriction:1;
    BITFIELD bKNoInit:1;
    BITFIELD bHavokDisabled:1;
    FLOAT HavokStepTimeQuantum;
    FStringNoInit HavokMoppCodeFilename;
    INT HavokBroadPhaseDimension;
    BYTE HavokSolverType;
    BITFIELD bUseCustomSolver:1;
    FLOAT DecalStayScale;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    class APlayerReplicationInfo* Pauser;
    class ULevelSummary* Summary;
    FStringNoInit VisibleGroups;
    FStringNoInit SelectedGroups;
    BITFIELD HideFromMenus:1;
    BITFIELD bLonePlayer:1;
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BYTE DetailMode;
    BITFIELD bDropDetail:1;
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bLowSoundDetail:1;
    BITFIELD bPathsRebuilt:1;
    BITFIELD bHasPathNodes:1;
    BITFIELD bCapFramerate:1;
    BITFIELD bLevelChange:1;
    BITFIELD bNeverPrecache:1;
    FVector CameraLocationDynamic;
    FVector CameraLocationTop;
    FVector CameraLocationFront;
    FVector CameraLocationSide;
    FRotator CameraRotationDynamic;
    FStringNoInit Song;
    FLOAT PlayerDoppler;
    FLOAT MusicVolumeOverride;
    FLOAT Brightness;
    class UTexture* DefaultTexture;
    class UTexture* WireframeTexture;
    class UTexture* WhiteSquareTexture;
    class UTexture* LargeVertex;
    INT HubStackLevel;
    BYTE LevelAction;
    class AGameReplicationInfo* GRI;
    BYTE NetMode;
    FStringNoInit ComputerName;
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    FStringNoInit BuildVersion;
    FStringNoInit ModName;
    TArrayNoInit<FRelevancyInfo> RelevancyInformation;
    FStringNoInit DefaultGameType;
    FStringNoInit PreCacheGame;
    class AGameInfo* Game;
    FLOAT DefaultGravity;
    class ANavigationPoint* NavigationPointList;
    class AController* ControllerList;
    class APlayerController* LocalPlayerController;
    class APawn* PawnList;
    TArrayNoInit<class AAwarenessPoint*> AwarenessPointList;
    FStringNoInit NextURL;
    BITFIELD bNextItems:1;
    FLOAT NextSwitchCountdown;
    class UObjectPool* ObjectPool;
    TArrayNoInit<class UMaterial*> PrecacheMaterials;
    TArrayNoInit<class UStaticMesh*> PrecacheStaticMeshes;
    TArrayNoInit<class UMesh*> PrecacheMeshes;
    BYTE Platform;
    class UIGEffectsSystemBase* EffectsSystem;
    TArrayNoInit<class AActor*> InterestedActorsGameStarted;
    class UMessageDispatcher* MessageDispatcher;
    class ATyrion_Setup* AI_Setup;
    BITFIELD bGameStarted:1;
    FStringNoInit AIRepositoryClassName;
    class AAIRepository* AIRepo;
    BITFIELD EnemiesAlwaysTalkToHostages:1;
    BITFIELD IsCOOPServer:1;
    BITFIELD IsPlayingCOOP:1;
    class AActor* CurrentServerSettings;
    class AActor* PendingServerSettings;
    BITFIELD TickSpecialEnabled:1;
    class IISpawningManager* SpawningManager;
    BITFIELD AnalyzeBallistics:1;
    BITFIELD IsTraining:1;
    BITFIELD DebugFlag:1;
    BITFIELD NoEnemyHostageConversations:1;
    FLOAT MoveRepSize;
    class APlayerController* ReplicationViewer;
    class AActor* ReplicationViewTarget;
    FStringNoInit MassiveZoneName;
	   DECLARE_FUNCTION(execGetLocalPlayerController);
	   DECLARE_FUNCTION(execUnRegisterNotifyActorDestroyed);
	   DECLARE_FUNCTION(execRegisterNotifyActorDestroyed);
	   DECLARE_FUNCTION(execUnRegisterNotifyPawnDied);
	   DECLARE_FUNCTION(execRegisterNotifyPawnDied);
	   DECLARE_FUNCTION(execGetAddressURL);
	   DECLARE_FUNCTION(execIsDemoBuild);
	   DECLARE_FUNCTION(execGetLocalURL);
	   DECLARE_FUNCTION(execGetEngine);
	   DECLARE_FUNCTION(execIsTheEntryLevel);
	   DECLARE_FUNCTION(execIsEntry);
	   DECLARE_FUNCTION(execDetailChange);
	   DECLARE_FUNCTION(execHavokGetNextFreeSystemLayer);
	   DECLARE_FUNCTION(execHavokSetCollisionLayerEnabled);
	   DECLARE_FUNCTION(execGetGameSpyManager);
	  void	eventAT_Tick(FLOAT Delta)
	  {
        ALevelInfo_eventAT_Tick_Parms Parms;
		   Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_AT_Tick),&Parms);
	  }
	  void	eventAT_Exec(FVector Location)
	  {
        ALevelInfo_eventAT_Exec_Parms Parms;
		   Parms.Location=Location;
        ProcessEvent(FindFunctionChecked(ENGINE_AT_Exec),&Parms);
	  }
	  void	eventAT_Begin()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_AT_Begin),NULL);
	  }
	  void	eventServerTravel(const FString& URL, BITFIELD bItems)
	  {
        ALevelInfo_eventServerTravel_Parms Parms;
		   Parms.URL=URL;
		   Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel),&Parms);
	  }
	  void	eventAddPrecacheStaticMesh(class UStaticMesh* stat)
	  {
        ALevelInfo_eventAddPrecacheStaticMesh_Parms Parms;
		   Parms.stat=stat;
        ProcessEvent(FindFunctionChecked(ENGINE_AddPrecacheStaticMesh),&Parms);
	  }
	  void	eventAddPrecacheMaterial(class UMaterial* Mat)
	  {
        ALevelInfo_eventAddPrecacheMaterial_Parms Parms;
		   Parms.Mat=Mat;
        ProcessEvent(FindFunctionChecked(ENGINE_AddPrecacheMaterial),&Parms);
	  }
	  void	eventAddPrecacheMesh(class UMesh* Mesh)
	  {
        ALevelInfo_eventAddPrecacheMesh_Parms Parms;
		   Parms.Mesh=Mesh;
        ProcessEvent(FindFunctionChecked(ENGINE_AddPrecacheMesh),&Parms);
	  }
	  void	eventFillRenderPrecacheArrays()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_FillRenderPrecacheArrays),NULL);
	  }
	   DECLARE_CLASS(ALevelInfo,AZoneInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ALevelInfo)
};

// Class	ASkyZoneInfo is declared in "..\Engine\Classes\SkyZoneInfo.uc"
class ENGINE_API	ASkyZoneInfo	: public AZoneInfo
{
public:
	   DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

// Class	AWarpZoneInfo is declared in "..\Engine\Classes\WarpZoneInfo.uc"
class ENGINE_API	AWarpZoneInfo	: public AZoneInfo
{
public:
    FStringNoInit OtherSideURL;
    FName ThisTag;
    BITFIELD bNoTeleFrag:1;
    INT iWarpZone;
    FCoords WarpCoords;
    class AWarpZoneInfo* OtherSideActor;
    class UObject* OtherSideLevel;
    FStringNoInit Destinations[8];
    INT numDestinations;
	   DECLARE_FUNCTION(execUnWarp);
	   DECLARE_FUNCTION(execWarp);
	  void	eventForceGenerate()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate),NULL);
	  }
	  void	eventGenerate()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_Generate),NULL);
	  }
	   DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AWarpZoneInfo)
};

// Class	AInventory is declared in "..\Engine\Classes\Inventory.uc"
class ENGINE_API	AInventory	: public AActor
{
public:
    BYTE InventoryGroup;
    BYTE GroupOffset;
    BITFIELD bDisplayableInv:1;
    FVector PlayerViewOffset;
    FRotator PlayerViewPivot;
    BITFIELD bDrawingFirstPerson:1;
    FLOAT BobDamping;
    FStringNoInit ItemName;
	   DECLARE_CLASS(AInventory,AActor,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AInventory)
};

// Class	AKActor is declared in "..\Engine\Classes\KActor.uc"
class ENGINE_API	AKActor	: public AActor
{
public:
    BITFIELD bKTakeShot:1;
    TArrayNoInit<class USound*> ImpactSounds;
    FLOAT ImpactVolume;
    class UClass* ImpactEffect;
    BITFIELD bOrientImpactEffect:1;
    FLOAT ImpactInterval;
    FLOAT LastImpactTime;
    FLOAT MomentumToKarmaImpulseConversionFactor;
    FLOAT OverrideMomentumToPenetrate;
	  void	eventKImpact(class AActor* Other, FVector Pos, FVector impactVel, FVector impactNorm)
	  {
        AKActor_eventKImpact_Parms Parms;
		   Parms.Other=Other;
		   Parms.Pos=Pos;
		   Parms.impactVel=impactVel;
		   Parms.impactNorm=impactNorm;
        ProcessEvent(FindFunctionChecked(ENGINE_KImpact),&Parms);
	  }
	   DECLARE_CLASS(AKActor,AActor,0|CLASS_Config,Engine)
	virtual void Spawned();
};

// Class	AKeypoint is declared in "..\Engine\Classes\Keypoint.uc"
class ENGINE_API	AKeypoint	: public AActor
{
public:
	   DECLARE_CLASS(AKeypoint,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};

// Class	AClipMarker is declared in "..\Engine\Classes\ClipMarker.uc"
class ENGINE_API	AClipMarker	: public AKeypoint
{
public:
	   DECLARE_CLASS(AClipMarker,AKeypoint,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};

// Class	ADecorationList is declared in "..\Engine\Classes\DecorationList.uc"
class ENGINE_API	ADecorationList	: public AKeypoint
{
public:
    TArrayNoInit<FDecorationType> Decorations;
	   DECLARE_CLASS(ADecorationList,AKeypoint,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ADecorationList)
};

// Class	APolyMarker is declared in "..\Engine\Classes\PolyMarker.uc"
class ENGINE_API	APolyMarker	: public AKeypoint
{
public:
	   DECLARE_CLASS(APolyMarker,AKeypoint,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APolyMarker)
};

// Class	ALight is declared in "..\Engine\Classes\Light.uc"
class ENGINE_API	ALight	: public AActor
{
public:
    FLOAT MinCoronaSize;
    FLOAT MaxCoronaSize;
    FLOAT CoronaRotation;
    FLOAT CoronaRotationOffset;
    BITFIELD UseOwnFinalBlend:1;
	   DECLARE_CLASS(ALight,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ALight)
};

// Class	AMirror is declared in "..\Engine\Classes\ExternalCameras\Mirror.uc"
class ENGINE_API	AMirror	: public AActor
{
public:
    class AMirrorCamera* MyCamera;
    INT MirrorSkinIndex;
    FStringNoInit DefaultMirrorMaterialString;
    class UMaterial* DefaultMirrorMaterial;
	   DECLARE_FUNCTION(execInitialize);
	   DECLARE_FUNCTION(execSetMirrorsEnabled);
	   DECLARE_CLASS(AMirror,AActor,0|CLASS_Config,Engine)
	virtual void CheckForErrors();
    virtual void PostEditAdd(GroupFactory& Grouper);
	virtual void PostEditChange();
	virtual void PostEditLoad();
    
    static void SetMirrorsEnabled(UBOOL Enabled); // turn realtime mirrors on/off globally
    static UBOOL GetMirrorsEnabled();
    
  private:
    static UBOOL bMirrorsEnabled;
};

// Class	AMover is declared in "..\Engine\Classes\Mover.uc"
class ENGINE_API	AMover	: public AActor
{
public:
    BYTE MoverEncroachType;
    BYTE MoverGlideType;
    BYTE BumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    FLOAT MoveTime;
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    INT EncroachDamage;
    BITFIELD bTriggerOnceOnly:1;
    BITFIELD bSlave:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bDamageTriggered:1;
    BITFIELD bDynamicLightMover:1;
    BITFIELD bUseShortestRotation:1;
    BITFIELD bIsLeader:1;
    FName PlayerBumpEvent;
    FName BumpEvent;
    class AActor* SavedTrigger;
    FLOAT DamageThreshold;
    INT numTriggerEvents;
    class AMover* Leader;
    class AMover* Follower;
    FName ReturnGroup;
    FLOAT DelayTime;
    class USound* OpeningSound;
    class USound* OpenedSound;
    class USound* ClosingSound;
    class USound* ClosedSound;
    class USound* LoopSound;
    FName OpeningEvent;
    FName OpenedEvent;
    FName ClosingEvent;
    FName ClosedEvent;
    FName LoopEvent;
    FVector KeyPos[24];
    FRotator KeyRot[24];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator OldRot;
    FRotator SavedRot;
    FLOAT PhysAlpha;
    FLOAT PhysRate;
    class ANavigationPoint* myMarker;
    BITFIELD bOpening:1;
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bClosed:1;
    BITFIELD bPlayerOnly:1;
    BITFIELD bAutoDoor:1;
    BITFIELD bNoAIRelevance:1;
    FVector SimOldPos;
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    INT ClientUpdate;
    TArrayNoInit<class AAntiPortalActor*> AntiPortals;
    FName AntiPortalTag;
	  void	eventKeyFrameReached()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_KeyFrameReached),NULL);
	  }
	   DECLARE_CLASS(AMover,AActor,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AMover)
};

// Class	ANavigationPoint is declared in "..\Engine\Classes\NavigationPoint.uc"
class ENGINE_API	ANavigationPoint	: public AActor
{
public:
    TArrayNoInit<class UReachSpec*> PathList;
    FName ProscribedPaths[4];
    FName ForcedPaths[4];
    INT visitedWeight;
    INT bestPathWeight;
    class ANavigationPoint* nextNavigationPoint;
    class ANavigationPoint* nextOrdered;
    class ANavigationPoint* prevOrdered;
    class ANavigationPoint* previousPath;
    INT cost;
    INT ExtraCost;
    INT TransientCost;
    INT FearCost;
    BITFIELD bAlreadyVisited:1;
    BITFIELD bEndPoint:1;
    BITFIELD bTransientEndPoint:1;
    BITFIELD taken:1;
    BITFIELD bPropagatesSound:1;
    BITFIELD bBlocked:1;
    BITFIELD bOneWayPath:1;
    BITFIELD bNeverUseStrafing:1;
    BITFIELD bAlwaysUseStrafing:1;
    BITFIELD bForceNoStrafing:1;
    BITFIELD bAutoBuilt:1;
    BITFIELD bSpecialMove:1;
    BITFIELD bNoAutoConnect:1;
    BITFIELD bNotBased:1;
    BITFIELD bPathsChanged:1;
    BITFIELD bDestinationOnly:1;
    BITFIELD bSourceOnly:1;
    BITFIELD bSpecialForced:1;
    BITFIELD bMustBeReachable:1;
    FLOAT InventoryDist;
    FStringNoInit RoomName;
    FName InternalRoomName;
    TArrayNoInit<FVisibleAwarenessPoint> VisibleAwarenessPoints;
    class AAwarenessPoint* ClosestAwarenessPoint;
    FLOAT ClosestAwarenessPointDistance;
    FLOAT TimeOfLastSpawn;
    TArrayNoInit<FOcclusionNodeInformation> OcclusionNodes;
    TMap<FName,FOcclusionNodeInformation> OcclusionMap;
	   DECLARE_FUNCTION(execGetRoomName);
	   DECLARE_FUNCTION(execInitOcclusionMap);
	  BITFIELD	eventSuggestMovePreparation(class APawn* Other)
	  {
        ANavigationPoint_eventSuggestMovePreparation_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SuggestMovePreparation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FLOAT	eventDetourWeight(class APawn* Other, FLOAT PathWeight)
	  {
        ANavigationPoint_eventDetourWeight_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Other=Other;
		   Parms.PathWeight=PathWeight;
        ProcessEvent(FindFunctionChecked(ENGINE_DetourWeight),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventAccept(class AActor* Incoming, class AActor* Source)
	  {
        ANavigationPoint_eventAccept_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Incoming=Incoming;
		   Parms.Source=Source;
        ProcessEvent(FindFunctionChecked(ENGINE_Accept),&Parms);
		   return Parms.ReturnValue;
	  }
	  INT	eventSpecialCost(class APawn* Seeker, class UReachSpec* Path)
	  {
        ANavigationPoint_eventSpecialCost_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Seeker=Seeker;
		   Parms.Path=Path;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialCost),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(ANavigationPoint,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ANavigationPoint)
};

// Class	ADoor is declared in "..\Engine\Classes\Door.uc"
class ENGINE_API	ADoor	: public ANavigationPoint
{
public:
    BYTE DesiredPosition;
    FLOAT SoundPropagationDistancePenalty;
    BYTE PendingPosition;
    TArrayNoInit<class APawn*> CurrentlyMovingThroughDoor;
	   DECLARE_FUNCTION(execIsEmptyDoorway);
	   DECLARE_FUNCTION(execIsWedged);
	   DECLARE_FUNCTION(execIsLocked);
	   DECLARE_FUNCTION(execIsBroken);
	   DECLARE_FUNCTION(execIsOpening);
	   DECLARE_FUNCTION(execIsOpen);
	   DECLARE_FUNCTION(execIsClosing);
	   DECLARE_FUNCTION(execIsClosed);
	   DECLARE_FUNCTION(execIsOpeningRight);
	   DECLARE_FUNCTION(execIsOpeningLeft);
	   DECLARE_FUNCTION(execIsOpenRight);
	   DECLARE_FUNCTION(execIsOpenLeft);
	  void	eventDesiredPositionChanged()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_DesiredPositionChanged),NULL);
	  }
	  BITFIELD	eventIsEmptyDoorway()
	  {
        ADoor_eventIsEmptyDoorway_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsEmptyDoorway),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(ADoor,ANavigationPoint,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ADoor)
};

// Class	ALiftCenter is declared in "..\Engine\Classes\LiftCenter.uc"
class ENGINE_API	ALiftCenter	: public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT MaxDist2D;
    FVector LiftOffset;
	   DECLARE_CLASS(ALiftCenter,ANavigationPoint,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ALiftCenter)
};

// Class	ALiftExit is declared in "..\Engine\Classes\LiftExit.uc"
class ENGINE_API	ALiftExit	: public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    BYTE SuggestedKeyFrame;
    BYTE KeyFrame;
	   DECLARE_CLASS(ALiftExit,ANavigationPoint,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ALiftExit)
};

// Class	APathNode is declared in "..\Engine\Classes\PathNode.uc"
class ENGINE_API	APathNode	: public ANavigationPoint
{
public:
	   DECLARE_CLASS(APathNode,ANavigationPoint,0|CLASS_Config,Engine)
	virtual UBOOL ReviewPath(APawn* Scout);
	virtual void CheckSymmetry(ANavigationPoint* Other);
	virtual INT AddMyMarker(AActor *S);
};

// Class	ASmallNavigationPoint is declared in "..\Engine\Classes\SmallNavigationPoint.uc"
class ENGINE_API	ASmallNavigationPoint	: public ANavigationPoint
{
public:
	   DECLARE_CLASS(ASmallNavigationPoint,ANavigationPoint,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ASmallNavigationPoint)
};

// Class	APlayerStart is declared in "..\Engine\Classes\PlayerStart.uc"
class ENGINE_API	APlayerStart	: public ASmallNavigationPoint
{
public:
    BITFIELD bSinglePlayerStart:1;
    BITFIELD bEnabled:1;
    FLOAT LastSpawnCampTime;
	   DECLARE_CLASS(APlayerStart,ASmallNavigationPoint,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APlayerStart)
};

// Class	ATeleporter is declared in "..\Engine\Classes\Teleporter.uc"
class ENGINE_API	ATeleporter	: public ASmallNavigationPoint
{
public:
    FStringNoInit URL;
    FName ProductRequired;
    BITFIELD bChangesVelocity:1;
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    FVector TargetVelocity;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FLOAT LastFired;
	   DECLARE_CLASS(ATeleporter,ASmallNavigationPoint,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ATeleporter)
};

// Class	AWarpZoneMarker is declared in "..\Engine\Classes\WarpZoneMarker.uc"
class ENGINE_API	AWarpZoneMarker	: public ASmallNavigationPoint
{
public:
    class AWarpZoneInfo* markedWarpZone;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
	   DECLARE_CLASS(AWarpZoneMarker,ASmallNavigationPoint,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AWarpZoneMarker)
};

// Class	ANote is declared in "..\Engine\Classes\Note.uc"
class ENGINE_API	ANote	: public AActor
{
public:
    FStringNoInit Text;
	   DECLARE_CLASS(ANote,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ANote)
};

// Class	APawn is declared in "..\Engine\Classes\Pawn.uc"
class ENGINE_API	APawn	: public AActor
{
public:
    class AController* Controller;
    FVector m_LastSteerDirection;
    FLOAT m_LastSteerDirectionTime;
    class UTyrion_ResourceBase* CharacterAI;
    class UTyrion_ResourceBase* MovementAI;
    class UTyrion_ResourceBase* WeaponAI;
    BITFIELD logTyrion:1;
    BITFIELD logAI:1;
    class APawn* nextPawn;
    BITFIELD bDisplayBattleDebug:1;
    FLOAT NetRelevancyTime;
    class APlayerController* LastRealViewer;
    class AActor* LastViewer;
    FLOAT RelevancyPropogationDistance;
    FLOAT RelevancyLOSDistance;
    BITFIELD bJustLanded:1;
    BITFIELD bUpAndOut:1;
    BITFIELD bIsWalking:1;
    BITFIELD bWarping:1;
    BITFIELD bWantsToCrouch:1;
    BITFIELD bIsCrouched:1;
    BITFIELD bTryToUncrouch:1;
    BITFIELD bCanCrouch:1;
    BITFIELD bIsCurrentMeshRenderZValid:1;
    FLOAT CurrentMeshRenderZ;
    class AController* LastUnPossessedController;
    BITFIELD bForceCrouch:1;
    BITFIELD bWantsToLeanLeft:1;
    BITFIELD bWantsToLeanRight:1;
    BYTE DesiredLeanState;
    BYTE LeanState;
    INT LeanLockedYaw;
    FLOAT LeanAlpha;
    FLOAT LeanTransitionDuration;
    FLOAT LeanHorizontalDistance;
    BITFIELD bCrawler:1;
    BITFIELD bReducedSpeed:1;
    BITFIELD bJumpCapable:1;
    BITFIELD bCanJump:1;
    BITFIELD bCanWalk:1;
    BITFIELD bCanSwim:1;
    BITFIELD bCanFly:1;
    BITFIELD bCanStrafe:1;
    BITFIELD bCanDoubleJump:1;
    BITFIELD bAvoidLedges:1;
    BITFIELD bStopAtLedges:1;
    BITFIELD bNoJumpAdjust:1;
    BITFIELD bCountJumps:1;
    BITFIELD bSimulateGravity:1;
    BITFIELD bUpdateEyeheight:1;
    BITFIELD bIgnoreForces:1;
    BITFIELD bNoVelocityUpdate:1;
    BITFIELD bCanWalkOffLedges:1;
    BITFIELD bCanBeBaseForPawns:1;
    BITFIELD bClientCollision:1;
    BITFIELD bSimGravityDisabled:1;
    BITFIELD bDirectHitWall:1;
    BITFIELD bHavokCharacterCollisions:1;
    BITFIELD bHavokInitCalled:1;
    FLOAT bHavokCharacterCollisionExtraRadius;
    BITFIELD bThumped:1;
    BITFIELD bInvulnerableBody:1;
    BITFIELD bIsFemale:1;
    BITFIELD bAutoActivate:1;
    BITFIELD bUpdatingDisplay:1;
    BITFIELD bAmbientCreature:1;
    BITFIELD bLOSHearing:1;
    BITFIELD bSameZoneHearing:1;
    BITFIELD bAdjacentZoneHearing:1;
    BITFIELD bMuffledHearing:1;
    BITFIELD bAroundCornerHearing:1;
    BITFIELD bDontPossess:1;
    BITFIELD bRollToDesired:1;
    BITFIELD bCachedRelevant:1;
    BITFIELD bUseCompressedPosition:1;
    BITFIELD bWeaponBob:1;
    BITFIELD bHideRegularHUD:1;
    BITFIELD bSpecialHUD:1;
    BITFIELD bSpecialCalcView:1;
    BITFIELD bIsTyping:1;
    BYTE Visibility;
    FLOAT DesiredSpeed;
    FLOAT MaxDesiredSpeed;
    FLOAT HearingThreshold;
    FLOAT Alertness;
    FLOAT SightRadius;
    FLOAT PeripheralVision;
    FLOAT SkillModifier;
    FLOAT AvgPhysicsTime;
    FLOAT MeleeRange;
    class ANavigationPoint* Anchor;
    class ANavigationPoint* LastAnchor;
    FLOAT FindAnchorFailedTime;
    FLOAT LastValidAnchorTime;
    FVector LastValidAnchorLocation;
    FLOAT LastDistanceToAnchor;
    FLOAT DestinationOffset;
    FLOAT NextPathRadius;
    FVector SerpentineDir;
    FLOAT SerpentineDist;
    FLOAT SerpentineTime;
    FLOAT UncrouchTime;
    FLOAT SpawnTime;
    FLOAT VisionCounter;
    FRange VisionUpdateRange;
    TArrayNoInit<class APawn*> ViewablePawns;
    FLOAT NextPathReachabilityRetestedTime;
    BITFIELD bAlwaysUseWalkAimErrorWhenMoving:1;
    FLOAT GroundSpeed;
    FLOAT WaterSpeed;
    FLOAT AirSpeed;
    FLOAT LadderSpeed;
    FLOAT AccelRate;
    FLOAT JumpZ;
    FLOAT AirControl;
    FLOAT MaxFallSpeed;
    FVector ConstantAcceleration;
    FLOAT ReachedDestinationThreshold;
    FStringNoInit OwnerName;
    FLOAT BaseEyeHeight;
    FLOAT CrouchEyeHeight;
    FLOAT EyeHeight;
    FVector Floor;
    FLOAT SplashTime;
    FLOAT CrouchHeight;
    FLOAT CrouchRadius;
    FLOAT OldZ;
    class APhysicsVolume* HeadVolume;
    INT Health;
    FLOAT LastPainTime;
    class UClass* ReducedDamageType;
    FLOAT HeadScale;
    FVector noise1spot;
    FLOAT noise1time;
    class APawn* noise1other;
    FLOAT noise1loudness;
    FVector noise2spot;
    FLOAT noise2time;
    class APawn* noise2other;
    FLOAT noise2loudness;
    FLOAT LastPainSound;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    FVector WalkBob;
    FLOAT SoundDampening;
    FLOAT DamageScaling;
    FStringNoInit MenuName;
    class AShadowProjector* Shadow;
    class UClass* BloodEffect;
    class UClass* LowGoreBlood;
    FStringNoInit ControllerClassName;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    FName LandMovementState;
    FName WaterMovementState;
    class APlayerStart* LastStartSpot;
    FLOAT LastStartTime;
    FName AnimAction;
    FVector DeathHitLocation;
    FVector KillerLocation;
    class UClass* DeathHitDamageType;
    FVector DeathHitMomentum;
    BITFIELD bPhysicsAnimUpdate:1;
    BITFIELD bWasCrouched:1;
    BITFIELD bWasWalking:1;
    BITFIELD bWasOnGround:1;
    BITFIELD bInitializeAnimation:1;
    BITFIELD bPlayedDeath:1;
    BYTE OldPhysics;
    FLOAT OldRotYaw;
    FVector OldAcceleration;
    FLOAT BaseMovementRate;
    FName MovementAnims[4];
    FName TurnLeftAnim;
    FName TurnRightAnim;
    FLOAT BlendChangeTime;
    FLOAT MovementBlendStartTime;
    FLOAT ForwardStrafeBias;
    FLOAT BackwardStrafeBias;
    FCompressedPosition PawnPosition;
    FLOAT FirstPersonFOV;
    class AHands* Hands;
    BITFIELD bRenderHands:1;
    class AHandheldEquipment* ActiveItem;
    class AHandheldEquipment* PendingItem;
    BYTE DesiredItemPocket;
    BITFIELD HasEquippedFirstItemYet:1;
    FLOAT CollisionSoftRadiusOffset;
    INT LastCollisionAvoidanceTick;
    BITFIELD bCollisionAvoidanceEnabled:1;
    BITFIELD bAvoidingCollision:1;
    class ADoor* MovingThroughDoor;
    class UCollisionAvoidanceNotifier* CollisionAvoidanceNotifier;
    TArrayNoInit<class USkeletalRegionInformation*> SkeletalRegionInformation;
    TArrayNoInit<class AProtectiveEquipment*> SkeletalRegionProtection;
    FLOAT AccumulatedLimbInjury;
    BITFIELD bNotifiedDeathListeners:1;
	   DECLARE_FUNCTION(execFindAnchor);
	   DECLARE_FUNCTION(execGetActiveItem);
	   DECLARE_FUNCTION(execIsCompliant);
	   DECLARE_FUNCTION(execIsAThreat);
	   DECLARE_FUNCTION(execIsLowerBodyInjured);
	   DECLARE_FUNCTION(execIsInjured);
	   DECLARE_FUNCTION(execIsIncapacitated);
	   DECLARE_FUNCTION(execIsConscious);
	   DECLARE_FUNCTION(execIsDead);
	   DECLARE_FUNCTION(execNotifyPawnDeathListeners);
	   DECLARE_FUNCTION(execGetAdditionalBaseAimError);
	   DECLARE_FUNCTION(execGetPathfindingDistanceToPoint);
	   DECLARE_FUNCTION(execGetPathfindingDistanceToActor);
	   DECLARE_FUNCTION(execGetRoomName);
	   DECLARE_FUNCTION(execIsInRoom);
	   DECLARE_FUNCTION(execGetYawEdgeAlpha);
	   DECLARE_FUNCTION(execAddViewablePawn);
	   DECLARE_FUNCTION(execEyePosition);
	   DECLARE_FUNCTION(execCanLean);
	   DECLARE_FUNCTION(execGetLeanYawRanges);
	   DECLARE_FUNCTION(execUnLean);
	   DECLARE_FUNCTION(execLean);
	   DECLARE_FUNCTION(execLineOfSightTo);
	   DECLARE_FUNCTION(execForceCrouchThisTick);
	   DECLARE_FUNCTION(execReachedLocation);
	   DECLARE_FUNCTION(execReachedDestination);
	   DECLARE_FUNCTION(execClearRouteCache);
	   DECLARE_FUNCTION(execIsDoorBlockedForPawn);
	   DECLARE_FUNCTION(execFitsAtLocation);
	   DECLARE_FUNCTION(execIsLocationReachable);
	   DECLARE_FUNCTION(execIsActorReachable);
	   DECLARE_FUNCTION(execCanSee);
	   DECLARE_FUNCTION(execRemovePawn);
	   DECLARE_FUNCTION(execAddPawn);
	  BITFIELD	eventShouldPlayWalkingAnimations()
	  {
        APawn_eventShouldPlayWalkingAnimations_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldPlayWalkingAnimations),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventApplyRotationOffset(FVector& Acceleration)
	  {
        APawn_eventApplyRotationOffset_Parms Parms;
		   Parms.Acceleration=Acceleration;
        ProcessEvent(FindFunctionChecked(ENGINE_ApplyRotationOffset),&Parms);
		   Acceleration=Parms.Acceleration;
	  }
	  void	eventBecomeRagdoll()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_BecomeRagdoll),NULL);
	  }
	  FRotator	eventViewRotationOffset()
	  {
        APawn_eventViewRotationOffset_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ViewRotationOffset),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventOnCollisionAvoidanceMoveTo(FVector MoveToLocation)
	  {
        APawn_eventOnCollisionAvoidanceMoveTo_Parms Parms;
		   Parms.MoveToLocation=MoveToLocation;
        ProcessEvent(FindFunctionChecked(ENGINE_OnCollisionAvoidanceMoveTo),&Parms);
	  }
	  void	eventDesiredItemPocketChanged()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_DesiredItemPocketChanged),NULL);
	  }
	  void	eventPlayLandingAnimation(FLOAT impactVel)
	  {
        APawn_eventPlayLandingAnimation_Parms Parms;
		   Parms.impactVel=impactVel;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayLandingAnimation),&Parms);
	  }
	  void	eventPlayFalling()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PlayFalling),NULL);
	  }
	  void	eventPlayJump()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PlayJump),NULL);
	  }
	  void	eventChangeAnimation()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_ChangeAnimation),NULL);
	  }
	  void	eventPlayDying(class UClass* DamageType, FVector HitLoc, FVector HitMomentum, FVector inKillerLocation)
	  {
        APawn_eventPlayDying_Parms Parms;
		   Parms.DamageType=DamageType;
		   Parms.HitLoc=HitLoc;
		   Parms.HitMomentum=HitMomentum;
		   Parms.inKillerLocation=inKillerLocation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayDying),&Parms);
	  }
	  void	eventSetAnimAction(FName NewAction)
	  {
        APawn_eventSetAnimAction_Parms Parms;
		   Parms.NewAction=NewAction;
        ProcessEvent(FindFunctionChecked(ENGINE_SetAnimAction),&Parms);
	  }
	  void	eventHeadVolumeChange(class APhysicsVolume* newHeadVolume)
	  {
        APawn_eventHeadVolumeChange_Parms Parms;
		  if(IsProbing(NAME_HeadVolumeChange)) {
		   Parms.newHeadVolume=newHeadVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_HeadVolumeChange),&Parms);
		  }
	  }
	  BITFIELD	eventCanMoveFreely()
	  {
        APawn_eventCanMoveFreely_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CanMoveFreely),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventIsLowerBodyInjured()
	  {
        APawn_eventIsLowerBodyInjured_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsLowerBodyInjured),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventIsInjured()
	  {
        APawn_eventIsInjured_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsInjured),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventisAlive()
	  {
        APawn_eventisAlive_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_isAlive),&Parms);
		   return Parms.ReturnValue;
	  }
	  class APawn*	eventGetCurrentAssignment()
	  {
        APawn_eventGetCurrentAssignment_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCurrentAssignment),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventIsArrested()
	  {
        APawn_eventIsArrested_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsArrested),&Parms);
		   return Parms.ReturnValue;
	  }
	  FLOAT	eventGetAdditionalBaseAimError()
	  {
        APawn_eventGetAdditionalBaseAimError_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetAdditionalBaseAimError),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventNotifyEndedCollisionAvoidance()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_NotifyEndedCollisionAvoidance),NULL);
	  }
	  void	eventNotifyBeganCollisionAvoidance()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_NotifyBeganCollisionAvoidance),NULL);
	  }
	  BITFIELD	eventIsStunned()
	  {
        APawn_eventIsStunned_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_IsStunned),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventUpdateEyeHeight(FLOAT DeltaTime)
	  {
        APawn_eventUpdateEyeHeight_Parms Parms;
		  if(IsProbing(NAME_UpdateEyeHeight)) {
		   Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateEyeHeight),&Parms);
		  }
	  }
	  void	eventOnLeanStateChange()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_OnLeanStateChange),NULL);
	  }
	  void	eventStartCrouch(FLOAT HeightAdjust)
	  {
        APawn_eventStartCrouch_Parms Parms;
		   Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_StartCrouch),&Parms);
	  }
	  void	eventEndCrouch(FLOAT HeightAdjust)
	  {
        APawn_eventEndCrouch_Parms Parms;
		   Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_EndCrouch),&Parms);
	  }
	  void	eventModifyVelocity(FLOAT DeltaTime, FVector OldVelocity)
	  {
        APawn_eventModifyVelocity_Parms Parms;
		  if(IsProbing(NAME_ModifyVelocity)) {
		   Parms.DeltaTime=DeltaTime;
		   Parms.OldVelocity=OldVelocity;
        ProcessEvent(FindFunctionChecked(ENGINE_ModifyVelocity),&Parms);
		  }
	  }
	  void	eventClientMessage(const FString& S, FName Type)
	  {
        APawn_eventClientMessage_Parms Parms;
		   Parms.S=S;
		   Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
	  }
	  void	eventSetWalking(BITFIELD bNewIsWalking)
	  {
        APawn_eventSetWalking_Parms Parms;
		   Parms.bNewIsWalking=bNewIsWalking;
        ProcessEvent(FindFunctionChecked(ENGINE_SetWalking),&Parms);
	  }
	  INT	eventGetTeamNumber()
	  {
        APawn_eventGetTeamNumber_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetTeamNumber),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventSetHeadScale(FLOAT NewScale)
	  {
        APawn_eventSetHeadScale_Parms Parms;
		   Parms.NewScale=NewScale;
        ProcessEvent(FindFunctionChecked(ENGINE_SetHeadScale),&Parms);
	  }
	  BITFIELD	eventHavokCharacterCollision(FHavokCharacterObjectInteractionEvent data, FHavokCharacterObjectInteractionResult& res)
	  {
        APawn_eventHavokCharacterCollision_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.data=data;
		   Parms.res=res;
        ProcessEvent(FindFunctionChecked(ENGINE_HavokCharacterCollision),&Parms);
		   res=Parms.res;
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanHit(class AActor* Target)
	  {
        APawn_eventCanHit_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Target=Target;
        ProcessEvent(FindFunctionChecked(ENGINE_CanHit),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventCanHitTargetAt(class AActor* Target, FVector AILocation)
	  {
        APawn_eventCanHitTargetAt_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Target=Target;
		   Parms.AILocation=AILocation;
        ProcessEvent(FindFunctionChecked(ENGINE_CanHitTargetAt),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventIgnoresSeenPawnsOfType(class UClass* SeenType)
	  {
        APawn_eventIgnoresSeenPawnsOfType_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.SeenType=SeenType;
        ProcessEvent(FindFunctionChecked(ENGINE_IgnoresSeenPawnsOfType),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(APawn,AActor,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APawn)
};

// Class	AScout is declared in "..\Engine\Classes\Scout.uc"
class ENGINE_API	AScout	: public APawn
{
public:
    FLOAT MaxLandingVelocity;
    class AActor* WalkMoveHitActor;
    FVector WalkMoveHitLocation;
    FStringNoInit WalkMoveHitMessage;
	   DECLARE_CLASS(AScout,APawn,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AScout)
};

// Class	AProjectile is declared in "..\Engine\Classes\Projectile.uc"
class ENGINE_API	AProjectile	: public AActor
{
public:
    FLOAT speed;
    FLOAT MaxSpeed;
    FLOAT TossZ;
    class AActor* ZeroCollider;
    BITFIELD bSwitchToZeroCollision:1;
    FLOAT Damage;
    FLOAT DamageRadius;
    FLOAT MomentumTransfer;
    class UClass* MyDamageType;
    class USound* SpawnSound;
    class USound* ImpactSound;
    class UClass* ExplosionDecal;
    FLOAT ExploWallOut;
	   DECLARE_CLASS(AProjectile,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AProjectile)
};

// Class	AProjector is declared in "..\Engine\Classes\Projector.uc"
class ENGINE_API	AProjector	: public AActor
{
public:
    BYTE MaterialBlendingOp;
    BYTE FrameBufferBlendingOp;
    class UMaterial* ProjTexture;
    INT FOV;
    INT MaxTraceDistance;
    BITFIELD bProjectBSP:1;
    BITFIELD bProjectTerrain:1;
    BITFIELD bProjectStaticMesh:1;
    BITFIELD bProjectParticles:1;
    BITFIELD bProjectActor:1;
    BITFIELD bLevelStatic:1;
    BITFIELD bClipBSP:1;
    BITFIELD bClipStaticMesh:1;
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bGradient:1;
    BITFIELD bProjectOnBackfaces:1;
    BITFIELD bProjectOnAlpha:1;
    BITFIELD bProjectOnParallelBSP:1;
    BITFIELD bShiftNearClip:1;
    FLOAT NearClipShiftAmount;
    FName ProjectTag;
    BITFIELD bDynamicAttach:1;
    BITFIELD bNoProjectOnOwner:1;
    FLOAT FadeInTime;
    FPlane FrustumPlanes[6];
    FVector FrustumVertices[8];
    FBox Box;
    FProjectorRenderInfoPtr RenderInfo;
    class UTexture* GradientTexture;
    FMatrix GradientMatrix;
    FMatrix Matrix;
    FVector OldLocation;
	   DECLARE_FUNCTION(execUpdateMatrix);
	   DECLARE_FUNCTION(execDetachActor);
	   DECLARE_FUNCTION(execAttachActor);
	   DECLARE_FUNCTION(execAbandonProjector);
	   DECLARE_FUNCTION(execDetachProjector);
	   DECLARE_FUNCTION(execAttachProjector);
	  void	eventPreRenderCallback()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PreRenderCallback),NULL);
	  }
	   DECLARE_CLASS(AProjector,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AProjector)
};

// Class	AShadowProjector is declared in "..\Engine\Classes\ShadowProjector.uc"
class ENGINE_API	AShadowProjector	: public AProjector
{
public:
    class AActor* ShadowActor;
    FVector LightDirection;
    FLOAT LightDistance;
    BITFIELD RootMotion:1;
    BITFIELD bBlobShadow:1;
    BITFIELD bShadowActive:1;
    BITFIELD bDebugShadow:1;
    FLOAT ShadowExtraBoundary;
    FLOAT ShadowExtraDrawScale;
    class UShadowBitmapMaterial* ShadowTexture;
    INT Resolution;
	   DECLARE_FUNCTION(execUpdateShadow);
	   DECLARE_FUNCTION(execUpdateDetailSetting);
	   DECLARE_CLASS(AShadowProjector,AProjector,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AShadowProjector)
};

// Class	ASpawnerBase is declared in "..\Engine\Classes\SpawnerBase.uc"
class ENGINE_API	ASpawnerBase	: public AActor
{
public:
	   DECLARE_CLASS(ASpawnerBase,AActor,0|CLASS_Config,Engine)
	virtual void BuildDebugPatrolInfo(APawn* pScout) {}
};

// Class	AStaticMeshActor is declared in "..\Engine\Classes\StaticMeshActor.uc"
class ENGINE_API	AStaticMeshActor	: public AActor
{
public:
    BITFIELD bExactProjectileCollision:1;
    FLOAT OverrideMomentumToPenetrate;
	   DECLARE_CLASS(AStaticMeshActor,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AStaticMeshActor)
};

// Class	AMassiveStaticMesh is declared in "..\Engine\Classes\MassiveAdClient\MassiveStaticMesh.uc"
class ENGINE_API	AMassiveStaticMesh	: public AStaticMeshActor
{
public:
    FStringNoInit MassiveAdTargetName;
    INT MassiveAdMaterialIndex;
    class UObject* MassiveTarget;
    BITFIELD bLogImpressionData:1;
	  FString	eventGetMassiveAdTargetName()
	  {
        AMassiveStaticMesh_eventGetMassiveAdTargetName_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetMassiveAdTargetName),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(AMassiveStaticMesh,AStaticMeshActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AMassiveStaticMesh)
};

// Class	ASwatProjectile is declared in "..\Engine\Classes\Equipment\SwatProjectile.uc"
class ENGINE_API	ASwatProjectile	: public AActor
{
public:
	   DECLARE_CLASS(ASwatProjectile,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ASwatProjectile)
};

// Class	ATimer is declared in "..\Engine\Classes\Timer.uc"
class ENGINE_API	ATimer	: public AActor
{
public:
    FLOAT InitialTime;
    BITFIELD Looping:1;
    BITFIELD Running:1;
    FLOAT LastStartTime;
    FLOAT LastDuration;
    FScriptDelegate __TimerDelegate__Delegate;
	  FLOAT	eventGetLastDuration()
	  {
        ATimer_eventGetLastDuration_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetLastDuration),&Parms);
		   return Parms.ReturnValue;
	  }
	  FLOAT	eventGetLastStartTime()
	  {
        ATimer_eventGetLastStartTime_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetLastStartTime),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	delegateTimerDelegate()
	  {
		   ProcessDelegate(ENGINE_TimerDelegate,&__TimerDelegate__Delegate,NULL);
	  }
	   DECLARE_CLASS(ATimer,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ATimer)
};

// Class	ATriggers is declared in "..\Engine\Classes\Triggers.uc"
class ENGINE_API	ATriggers	: public AActor
{
public:
	   DECLARE_CLASS(ATriggers,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ATriggers)
};

// Class	ALineOfSightTrigger is declared in "..\Engine\Classes\LineOfSightTrigger.uc"
class ENGINE_API	ALineOfSightTrigger	: public ATriggers
{
public:
    FLOAT MaxViewDist;
    FLOAT OldTickTime;
    BITFIELD bEnabled:1;
    BITFIELD bTriggered:1;
    FName SeenActorTag;
    class AActor* SeenActor;
    INT MaxViewAngle;
    FLOAT RequiredViewDir;
	  void	eventPlayerSeesMe(class APlayerController* P)
	  {
        ALineOfSightTrigger_eventPlayerSeesMe_Parms Parms;
		   Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerSeesMe),&Parms);
	  }
	   DECLARE_CLASS(ALineOfSightTrigger,ATriggers,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ALineOfSightTrigger)
};

// Class	ATrigger is declared in "..\Engine\Classes\Trigger.uc"
class ENGINE_API	ATrigger	: public ATriggers
{
public:
    BYTE TriggerType;
    FStringNoInit Message;
    BITFIELD bTriggerOnceOnly:1;
    BITFIELD bInitiallyActive:1;
    class UClass* ClassProximityType;
    FLOAT RepeatTriggerTime;
    FLOAT ReTriggerDelay;
    FLOAT TriggerTime;
    FLOAT DamageThreshold;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    BITFIELD bSavedInitialCollision:1;
    BITFIELD bSavedInitialActive:1;
	   DECLARE_CLASS(ATrigger,ATriggers,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ATrigger)
};

// Class	ATyrion_Setup is declared in "..\Engine\Classes\TyrionInterface\Tyrion_Setup.uc"
class ENGINE_API	ATyrion_Setup	: public AActor
{
public:
	   DECLARE_FUNCTION(execcopyParameters);
	   DECLARE_FUNCTION(execmakeSafeOuter);
	   DECLARE_CLASS(ATyrion_Setup,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ATyrion_Setup)
};

// Class	AxWeatherEffect is declared in "..\Engine\Classes\Effects\xWeatherEffect.uc"
class ENGINE_API	AxWeatherEffect	: public AActor
{
public:
    BYTE WeatherType;
    INT numParticles;
    INT numActive;
    FBox Box;
    FVector eyePos;
    FVector eyeDir;
    FVector spawnOrigin;
    FVector eyeMoveVec;
    FLOAT eyeVel;
    FLOAT deviation;
    FLOAT maxPclEyeDist;
    FLOAT numCols;
    FLOAT numRows;
    FLOAT numFrames;
    FLOAT texU;
    FLOAT texV;
    BITFIELD noReference:1;
    FVector spawnVecU;
    FVector spawnVecV;
    FVector spawnVel;
    FRangeVector Position;
    FRange speed;
    FRange Life;
    FRange Size;
    FRange EyeSizeClamp;
    BITFIELD bForceAffected:1;
    TArrayNoInit<FWeatherPcl> pcl;
    TArrayNoInit<class AVolume*> pclBlockers;
	   DECLARE_CLASS(AxWeatherEffect,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AxWeatherEffect)
};

// Class	UAnimNotify is declared in "..\Engine\Classes\AnimNotify.uc"
class ENGINE_API	UAnimNotify	: public UObject
{
public:
    INT Revision;
	   DECLARE_CLASS(UAnimNotify,UObject,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner ) {};
	// UObject interface.
	virtual void PostEditChange();
};

// Class	UAnimNotify_DestroyEffect is declared in "..\Engine\Classes\AnimNotify_DestroyEffect.uc"
class ENGINE_API	UAnimNotify_DestroyEffect	: public UAnimNotify
{
public:
    FName DestroyTag;
    BITFIELD bExpireParticles:1;
	   DECLARE_CLASS(UAnimNotify_DestroyEffect,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

// Class	UAnimNotify_Effect is declared in "..\Engine\Classes\AnimNotify_Effect.uc"
class ENGINE_API	UAnimNotify_Effect	: public UAnimNotify
{
public:
    class UClass* EffectClass;
    FName Bone;
    FVector OffsetLocation;
    FRotator OffsetRotation;
    BITFIELD Attach:1;
    FName Tag;
    FLOAT DrawScale;
    FVector DrawScale3D;
    class AActor* LastSpawnedEffect;
	   DECLARE_CLASS(UAnimNotify_Effect,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

// Class	UAnimNotify_LIPSinc is declared in "..\Engine\Classes\AnimNotify_LIPSinc.uc"
class ENGINE_API	UAnimNotify_LIPSinc	: public UAnimNotify
{
public:
    FName LIPSincAnimName;
    FLOAT Volume;
    INT Radius;
    FLOAT Pitch;
	   DECLARE_CLASS(UAnimNotify_LIPSinc,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

// Class	UAnimNotify_Script is declared in "..\Engine\Classes\AnimNotify_Script.uc"
class ENGINE_API	UAnimNotify_Script	: public UAnimNotify
{
public:
    FName NotifyName;
	   DECLARE_CLASS(UAnimNotify_Script,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

// Class	UAnimNotify_Scripted is declared in "..\Engine\Classes\AnimNotify_Scripted.uc"
class ENGINE_API	UAnimNotify_Scripted	: public UAnimNotify
{
public:
	  void	eventNotify(class AActor* Owner)
	  {
        UAnimNotify_Scripted_eventNotify_Parms Parms;
		   Parms.Owner=Owner;
        ProcessEvent(FindFunctionChecked(ENGINE_Notify),&Parms);
	  }
	   DECLARE_CLASS(UAnimNotify_Scripted,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

// Class	UAnimNotify_Sound is declared in "..\Engine\Classes\AnimNotify_Sound.uc"
class ENGINE_API	UAnimNotify_Sound	: public UAnimNotify
{
public:
    class USound* Sound;
    FLOAT Volume;
    INT Radius;
	   DECLARE_CLASS(UAnimNotify_Sound,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

// Class	UCheatManager is declared in "..\Engine\Classes\CheatManager.uc"
class ENGINE_API	UCheatManager	: public UObject
{
public:
    FRotator LockedRotation;
    FStringNoInit LookingAtString;
	   DECLARE_CLASS(UCheatManager,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UCheatManager)
};

// Class	UPerlinNoise is declared in "..\Engine\Classes\Noise\PerlinNoise.uc"
class ENGINE_API	UPerlinNoise	: public UDeleteableObject
{
public:
	   DECLARE_FUNCTION(execReinitialize);
	   DECLARE_FUNCTION(execNoise3);
	   DECLARE_FUNCTION(execNoise2);
	   DECLARE_FUNCTION(execNoise1);
	   DECLARE_CLASS(UPerlinNoise,UDeleteableObject,0,Engine)
    //Constructor
    UPerlinNoise::UPerlinNoise();

    //Overridden from UObject, called via the destructor implemented in this
    //  class's DECLARE_CLASS macro.
	virtual void Destroy();

    class FPerlinNoise* Generator;
};

// Class	UFluidSurfaceParamaters is declared in "..\Engine\Classes\FluidVolume\FluidSurfaceParamaters.uc"
class ENGINE_API	UFluidSurfaceParamaters	: public UObject
{
public:
    FPlane WaveHeights;
    FPlane WaveSpeeds;
    FPlane WaveOffsets;
    FPlane WaveXSizes;
    FPlane WaveYSizes;
	   DECLARE_CLASS(UFluidSurfaceParamaters,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UFluidSurfaceParamaters)
};

// Class	UGameSpyManager is declared in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
class ENGINE_API	UGameSpyManager	: public UObject
{
public:
    class UGameEngine* Engine;
    BITFIELD bAvailable:1;
    BITFIELD bFailedAvailabilityCheck:1;
    BITFIELD bInitAsServer:1;
    BITFIELD bInitAsClient:1;
    BITFIELD bInitialised:1;
    BITFIELD bFailedInitialisation:1;
    BITFIELD bServer:1;
    BITFIELD bTrackingStats:1;
    BITFIELD bStatsDevServer:1;
    BITFIELD bStatsInitalised:1;
    BITFIELD bStatsNewGame:1;
    BITFIELD bUsingPresence:1;
    BITFIELD bPresenceInitalised:1;
    BITFIELD bIsUserProfileConnected:1;
    FStringNoInit SavedProfileNickname;
    FStringNoInit SavedProfileEmail;
    FStringNoInit SavedProfilePassword;
    FStringNoInit CurrentProfilePassword;
    INT SavedProfileID;
    BITFIELD bServerUpdateFinished:1;
    INT currentServerIndex;
    TArrayNoInit<BYTE> ServerKeyIds;
    TArrayNoInit<FString> ServerKeyNames;
    TArrayNoInit<BYTE> PlayerKeyIds;
    TArrayNoInit<FString> PlayerKeyNames;
    TArrayNoInit<BYTE> TeamKeyIds;
    TArrayNoInit<FString> TeamKeyNames;
    TArrayNoInit<BYTE> CustomServerKeyIds;
    TArrayNoInit<FString> CustomServerKeyNames;
    TArrayNoInit<BYTE> CustomPlayerKeyIds;
    TArrayNoInit<FString> CustomPlayerKeyNames;
    TArrayNoInit<BYTE> CustomTeamKeyIds;
    TArrayNoInit<FString> CustomTeamKeyNames;
    TArrayNoInit<BYTE> InitialKeyIds;
    FStringNoInit ProductVersionID;
    FStringNoInit ProductRegionID;
    FStringNoInit BaseFilePlanetPatchURL;
    INT InitialQueryPort;
    FScriptDelegate __OnQueryPatchResult__Delegate;
    FScriptDelegate __OnServerReceivedStatsResponse__Delegate;
	   DECLARE_FUNCTION(execConnectStats);
	   DECLARE_FUNCTION(execQueryPatch);
	   DECLARE_FUNCTION(execIsHostCDKeyValid);
	   DECLARE_FUNCTION(execSendServerStateChanged);
	   DECLARE_FUNCTION(execCleanUpGameSpy);
	   DECLARE_FUNCTION(execAuthenticateProfile);
	   DECLARE_FUNCTION(execRegisterUniqueNick);
	   DECLARE_FUNCTION(execDisconnectUserAccount);
	   DECLARE_FUNCTION(execSendStatResponseIfNeeded);
	   DECLARE_FUNCTION(execConnectUserAccount);
	   DECLARE_FUNCTION(execCheckUserAccount);
	   DECLARE_FUNCTION(execCreateUserAccount);
	   DECLARE_FUNCTION(execSendStatSnapshot);
	   DECLARE_FUNCTION(execStatsGetPlayerIndex);
	   DECLARE_FUNCTION(execAccumulatePlayerStatInt);
	   DECLARE_FUNCTION(execAccumulateServerStatInt);
	   DECLARE_FUNCTION(execSetPlayerStatInt);
	   DECLARE_FUNCTION(execSetServerStatInt);
	   DECLARE_FUNCTION(execSetPlayerStatStr);
	   DECLARE_FUNCTION(execSetServerStatStr);
	   DECLARE_FUNCTION(execStatsRemovePlayer);
	   DECLARE_FUNCTION(execStatsNewPlayer);
	   DECLARE_FUNCTION(execServerSendStatChallenge);
	   DECLARE_FUNCTION(execStatsGetStatResponse);
	   DECLARE_FUNCTION(execStatsGetPID);
	   DECLARE_FUNCTION(execStatsHasPIDAndResponse);
	   DECLARE_FUNCTION(execStatsNewGameStarted);
	   DECLARE_FUNCTION(execGetNextServer);
	   DECLARE_FUNCTION(execGetServerPort);
	   DECLARE_FUNCTION(execGetServerIpAddress);
	   DECLARE_FUNCTION(execCancelUpdate);
	   DECLARE_FUNCTION(execUpdateServer);
	   DECLARE_FUNCTION(execLANUpdateServerList);
	   DECLARE_FUNCTION(execUpdateServerList);
	   DECLARE_FUNCTION(execSendGameSpyGameModeChange);
	   DECLARE_FUNCTION(execGetPlayerObject);
	   DECLARE_FUNCTION(execGetLevelInfo);
	   DECLARE_FUNCTION(execInitGameSpyClient);
	  void	eventOnLevelDestroyed()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_OnLevelDestroyed),NULL);
	  }
	  void	eventNotifyServerReceivePIDResponse(class APlayerController* P, INT statusCode)
	  {
        UGameSpyManager_eventNotifyServerReceivePIDResponse_Parms Parms;
		   Parms.P=P;
		   Parms.statusCode=statusCode;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyServerReceivePIDResponse),&Parms);
	  }
	  void	delegateOnServerReceivedStatsResponse(class APlayerController* P, INT statusCode)
	  {
        UGameSpyManager_eventOnServerReceivedStatsResponse_Parms Parms;
		   Parms.P=P;
		   Parms.statusCode=statusCode;
		   ProcessDelegate(ENGINE_OnServerReceivedStatsResponse,&__OnServerReceivedStatsResponse__Delegate,&Parms);
	  }
	  FString	eventGetProductRegionID()
	  {
        UGameSpyManager_eventGetProductRegionID_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetProductRegionID),&Parms);
		   return Parms.ReturnValue;
	  }
	  FString	eventGetProductVersionID()
	  {
        UGameSpyManager_eventGetProductVersionID_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetProductVersionID),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	delegateOnQueryPatchResult(BITFIELD bNeeded, BITFIELD bMandatory, const FString& versionName, const FString& URL)
	  {
        UGameSpyManager_eventOnQueryPatchResult_Parms Parms;
		   Parms.bNeeded=bNeeded;
		   Parms.bMandatory=bMandatory;
		   Parms.versionName=versionName;
		   Parms.URL=URL;
		   ProcessDelegate(ENGINE_OnQueryPatchResult,&__OnQueryPatchResult__Delegate,&Parms);
	  }
	  void	eventQueryPatchCompleted(BITFIELD bNeeded, BITFIELD bMandatory, const FString& versionName, INT FilePlanetID, const FString& URL)
	  {
        UGameSpyManager_eventQueryPatchCompleted_Parms Parms;
		   Parms.bNeeded=bNeeded;
		   Parms.bMandatory=bMandatory;
		   Parms.versionName=versionName;
		   Parms.FilePlanetID=FilePlanetID;
		   Parms.URL=URL;
        ProcessEvent(FindFunctionChecked(ENGINE_QueryPatchCompleted),&Parms);
	  }
	  FString	eventGetPatchDownloadURL(INT FilePlanetID)
	  {
        UGameSpyManager_eventGetPatchDownloadURL_Parms Parms;
		   Parms.FilePlanetID=FilePlanetID;
        ProcessEvent(FindFunctionChecked(ENGINE_GetPatchDownloadURL),&Parms);
		   return Parms.ReturnValue;
	  }
	  INT	eventShouldAdvertiseServerOnInternet()
	  {
        UGameSpyManager_eventShouldAdvertiseServerOnInternet_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldAdvertiseServerOnInternet),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventShouldCheckClientCDKeys()
	  {
        UGameSpyManager_eventShouldCheckClientCDKeys_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldCheckClientCDKeys),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventProfileCheckResult(BYTE Result, INT profileId)
	  {
        UGameSpyManager_eventProfileCheckResult_Parms Parms;
		   Parms.Result=Result;
		   Parms.profileId=profileId;
        ProcessEvent(FindFunctionChecked(ENGINE_ProfileCheckResult),&Parms);
	  }
	  void	eventProfileCreateResult(BYTE Result, INT profileId)
	  {
        UGameSpyManager_eventProfileCreateResult_Parms Parms;
		   Parms.Result=Result;
		   Parms.profileId=profileId;
        ProcessEvent(FindFunctionChecked(ENGINE_ProfileCreateResult),&Parms);
	  }
	  void	eventEmailAlreadyTaken()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_EmailAlreadyTaken),NULL);
	  }
	  FString	eventGetGameSpyPassword()
	  {
        UGameSpyManager_eventGetGameSpyPassword_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetGameSpyPassword),&Parms);
		   return Parms.ReturnValue;
	  }
	  FString	eventGetGameSpyProfileId()
	  {
        UGameSpyManager_eventGetGameSpyProfileId_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetGameSpyProfileId),&Parms);
		   return Parms.ReturnValue;
	  }
	  INT	eventGetNumTeams()
	  {
        UGameSpyManager_eventGetNumTeams_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetNumTeams),&Parms);
		   return Parms.ReturnValue;
	  }
	  FString	eventGetValueForTeamKey(INT Key, INT Index)
	  {
        UGameSpyManager_eventGetValueForTeamKey_Parms Parms;
		   Parms.Key=Key;
		   Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_GetValueForTeamKey),&Parms);
		   return Parms.ReturnValue;
	  }
	  FString	eventGetValueForPlayerKey(INT Key, INT Index)
	  {
        UGameSpyManager_eventGetValueForPlayerKey_Parms Parms;
		   Parms.Key=Key;
		   Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_GetValueForPlayerKey),&Parms);
		   return Parms.ReturnValue;
	  }
	  FString	eventGetValueForKey(INT Key)
	  {
        UGameSpyManager_eventGetValueForKey_Parms Parms;
		   Parms.Key=Key;
        ProcessEvent(FindFunctionChecked(ENGINE_GetValueForKey),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventUpdateComplete()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_UpdateComplete),NULL);
	  }
	  void	eventUpdatedServerData(INT ServerID, const FString& ipAddress, INT Ping, TArray<FString> serverData, TArray<FString> playerData, TArray<FString> teamData)
	  {
        UGameSpyManager_eventUpdatedServerData_Parms Parms;
		   Parms.ServerID=ServerID;
		   Parms.ipAddress=ipAddress;
		   Parms.Ping=Ping;
		   Parms.serverData=serverData;
		   Parms.playerData=playerData;
		   Parms.teamData=teamData;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdatedServerData),&Parms);
	  }
	  void	eventAuthenticatedProfileResult(INT profileId, INT authenticated, const FString& Error)
	  {
        UGameSpyManager_eventAuthenticatedProfileResult_Parms Parms;
		   Parms.profileId=profileId;
		   Parms.authenticated=authenticated;
		   Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_AuthenticatedProfileResult),&Parms);
	  }
	  void	eventUniqueNickRegistrationResult(BYTE Result)
	  {
        UGameSpyManager_eventUniqueNickRegistrationResult_Parms Parms;
		   Parms.Result=Result;
        ProcessEvent(FindFunctionChecked(ENGINE_UniqueNickRegistrationResult),&Parms);
	  }
	  void	eventUserConnectionResult(BYTE Result, INT profileId, const FString& UniqueNick)
	  {
        UGameSpyManager_eventUserConnectionResult_Parms Parms;
		   Parms.Result=Result;
		   Parms.profileId=profileId;
		   Parms.UniqueNick=UniqueNick;
        ProcessEvent(FindFunctionChecked(ENGINE_UserConnectionResult),&Parms);
	  }
	  void	eventInitGameSpyData()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_InitGameSpyData),NULL);
	  }
	  void	eventOnLevelChange()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_OnLevelChange),NULL);
	  }
	  void	eventGameSpyInitialised()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_GameSpyInitialised),NULL);
	  }
	   DECLARE_CLASS(UGameSpyManager,UObject,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UGameSpyManager)
};

// Class	UHavokObject is declared in "..\Engine\Classes\HavokObject.uc"
class ENGINE_API	UHavokObject	: public UObject
{
public:
    BITFIELD hkInitCalled:1;
	   DECLARE_CLASS(UHavokObject,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UHavokObject)
};

// Class	UHavokRigidBody is declared in "..\Engine\Classes\HavokRigidBody.uc"
class ENGINE_API	UHavokRigidBody	: public UHavokObject
{
public:
    INT hkEntityPtr;
    INT hkUprightConstraintPtr;
    BITFIELD bHighDetailOnly:1;
    BITFIELD bClientOnly:1;
    FLOAT hkMass;
    BITFIELD hkStabilizedInertia:1;
    FLOAT hkFriction;
    FLOAT hkRestitution;
    FLOAT hkLinearDamping;
    FLOAT hkAngularDamping;
    BITFIELD hkActive:1;
    BITFIELD hkKeyframed:1;
    FVector hkLinearVel;
    FVector hkAngularVel;
    INT hkCollisionLayer;
    INT hkCollisionSystemGroup;
    INT hkCollisionSubpartID;
    INT hkCollisionSubpartIgnoreID;
    BYTE hkForceUpright;
    FLOAT hkForceUprightStrength;
    FLOAT hkForceUprightDamping;
	   DECLARE_CLASS(UHavokRigidBody,UHavokObject,0,Engine)
#	ifdef UNREAL_HAVOK
		void PostEditChange();
#	endif
};

// Class	UHavokSkeletalSystem is declared in "..\Engine\Classes\HavokSkeletalSystem.uc"
class ENGINE_API	UHavokSkeletalSystem	: public UHavokObject
{
public:
    INT RigidBodySystemNumber;
    INT RigidBodyRootBoneIndex;
    INT RigidBodyLastBoneIndex;
    INT CachedLastRigidBodyRootBoneIndex;
    INT BodyCollisionListener;
    BITFIELD useIntrusionDrivenUpdates:1;
    INT hkPhantom;
    FStringNoInit SkeletonPhysicsFile;
    BITFIELD hkActive:1;
    FLOAT hkJointFriction;
	   DECLARE_CLASS(UHavokSkeletalSystem,UHavokObject,0|CLASS_Config,Engine)
#ifdef UNREAL_HAVOK
	void PostEditChange();
#endif
};

// Class	UI3DL2Listener is declared in "..\Engine\Classes\I3DL2Listener.uc"
class ENGINE_API	UI3DL2Listener	: public UObject
{
public:
    FLOAT EnvironmentSize;
    FLOAT EnvironmentDiffusion;
    INT Room;
    INT RoomHF;
    INT RoomLF;
    FLOAT DecayTime;
    FLOAT DecayHFRatio;
    FLOAT DecayLFRatio;
    INT Reflections;
    FLOAT ReflectionsDelay;
    FVector ReflectionsPan;
    INT Reverb;
    FLOAT ReverbDelay;
    FVector ReverbPan;
    FLOAT EchoTime;
    FLOAT EchoDepth;
    FLOAT ModulationTime;
    FLOAT ModulationDepth;
    FLOAT RoomRolloffFactor;
    FLOAT AirAbsorptionHF;
    FLOAT HFReference;
    FLOAT LFReference;
    BITFIELD bDecayTimeScale:1;
    BITFIELD bReflectionsScale:1;
    BITFIELD bReflectionsDelayScale:1;
    BITFIELD bReverbScale:1;
    BITFIELD bReverbDelayScale:1;
    BITFIELD bEchoTimeScale:1;
    BITFIELD bModulationTimeScale:1;
    BITFIELD bDecayHFLimit:1;
    INT Environment;
    INT Updated;
	   DECLARE_CLASS(UI3DL2Listener,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UI3DL2Listener)
};

// Class	IICanBeArrested is declared in "..\Engine\Classes\Equipment\ICanBeArrested.uc"
class ENGINE_API	IICanBeArrested	: public UObject
{
public:
	  BITFIELD IsArrested()
	  {
        IICanBeArrested_IsArrested_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(ENGINE_IsArrested),&Parms);
		   return Parms.ReturnValue;
	  }
	  FLOAT GetQualifyTimeForArrest(class APawn* Arrester)
	  {
        IICanBeArrested_GetQualifyTimeForArrest_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Arrester=Arrester;
        ProcessFunction(FindFunctionChecked(ENGINE_GetQualifyTimeForArrest),&Parms);
		   return Parms.ReturnValue;
	  }
	  void OnArrestInterrupted(class APawn* Arrester)
	  {
        IICanBeArrested_OnArrestInterrupted_Parms Parms;
		   Parms.Arrester=Arrester;
        ProcessFunction(FindFunctionChecked(ENGINE_OnArrestInterrupted),&Parms);
	  }
	  void OnArrested(class APawn* Arrester)
	  {
        IICanBeArrested_OnArrested_Parms Parms;
		   Parms.Arrester=Arrester;
        ProcessFunction(FindFunctionChecked(ENGINE_OnArrested),&Parms);
	  }
	  void OnArrestBegan(class APawn* Arrester)
	  {
        IICanBeArrested_OnArrestBegan_Parms Parms;
		   Parms.Arrester=Arrester;
        ProcessFunction(FindFunctionChecked(ENGINE_OnArrestBegan),&Parms);
	  }
	  BITFIELD IsBeingArrestedNow()
	  {
        IICanBeArrested_IsBeingArrestedNow_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(ENGINE_IsBeingArrestedNow),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD CanBeArrestedNow()
	  {
        IICanBeArrested_CanBeArrestedNow_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(ENGINE_CanBeArrestedNow),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(IICanBeArrested,UObject,0|CLASS_Interface,Engine)
	   NO_DEFAULT_CONSTRUCTOR(IICanBeArrested)
};

// Class	IICanBeUsed is declared in "..\Engine\Classes\ICanBeUsed.uc"
class ENGINE_API	IICanBeUsed	: public UObject
{
public:
	  FString UniqueID()
	  {
        IICanBeUsed_UniqueID_Parms Parms;
        ProcessFunction(FindFunctionChecked(ENGINE_UniqueID),&Parms);
		   return Parms.ReturnValue;
	  }
	  void PostUsed()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostUsed),NULL);
	  }
	  void OnUsed(class APawn* Other)
	  {
        IICanBeUsed_OnUsed_Parms Parms;
		   Parms.Other=Other;
        ProcessFunction(FindFunctionChecked(ENGINE_OnUsed),&Parms);
	  }
	  BITFIELD CanBeUsedNow()
	  {
        IICanBeUsed_CanBeUsedNow_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(ENGINE_CanBeUsedNow),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(IICanBeUsed,UObject,0|CLASS_Interface,Engine)
	   NO_DEFAULT_CONSTRUCTOR(IICanBeUsed)
};

// Class	IIControllableViewport is declared in "..\Engine\Classes\ExternalCameras\IControllableViewport.uc"
class ENGINE_API	IIControllableViewport	: public UObject
{
public:
	  class IIControllableThroughViewport* GetCurrentControllable()
	  {
        IIControllableViewport_GetCurrentControllable_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(ENGINE_GetCurrentControllable),&Parms);
		   return Parms.ReturnValue;
	  }
	  void HandleReload()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_HandleReload),NULL);
	  }
	  void HandleAltFire()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_HandleAltFire),NULL);
	  }
	  void HandleFire(BITFIELD OnServer, FVector CameraLocation, FRotator CameraRotation)
	  {
        IIControllableViewport_HandleFire_Parms Parms;
		   Parms.OnServer=OnServer;
		   Parms.CameraLocation=CameraLocation;
		   Parms.CameraRotation=CameraRotation;
        ProcessFunction(FindFunctionChecked(ENGINE_HandleFire),&Parms);
	  }
	  void ViewportCalcView(FVector& CameraLocation, FRotator& CameraRotation)
	  {
        IIControllableViewport_ViewportCalcView_Parms Parms;
		   Parms.CameraLocation=CameraLocation;
		   Parms.CameraRotation=CameraRotation;
        ProcessFunction(FindFunctionChecked(ENGINE_ViewportCalcView),&Parms);
		   CameraLocation=Parms.CameraLocation;
		   CameraRotation=Parms.CameraRotation;
	  }
	  void SetInput(INT dMouseX, INT dMouseY)
	  {
        IIControllableViewport_SetInput_Parms Parms;
		   Parms.dMouseX=dMouseX;
		   Parms.dMouseY=dMouseY;
        ProcessFunction(FindFunctionChecked(ENGINE_SetInput),&Parms);
	  }
	  BITFIELD CanIssueCommands()
	  {
        IIControllableViewport_CanIssueCommands_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(ENGINE_CanIssueCommands),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD ShouldControlViewport()
	  {
        IIControllableViewport_ShouldControlViewport_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(ENGINE_ShouldControlViewport),&Parms);
		   return Parms.ReturnValue;
	  }
	  FName GetControllingStateName()
	  {
        IIControllableViewport_GetControllingStateName_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessFunction(FindFunctionChecked(ENGINE_GetControllingStateName),&Parms);
		   return Parms.ReturnValue;
	  }
	  void OnEndControlling()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_OnEndControlling),NULL);
	  }
	  void OnBeginControlling()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_OnBeginControlling),NULL);
	  }
	   DECLARE_CLASS(IIControllableViewport,UObject,0|CLASS_Interface,Engine)
	   NO_DEFAULT_CONSTRUCTOR(IIControllableViewport)
};

// Class	IIEffectObserver is declared in "..\Engine\Classes\IEffectObserver.uc"
class ENGINE_API	IIEffectObserver	: public UObject
{
public:
	  void OnEffectInitialized(class AActor* inInitializedEffect)
	  {
        IIEffectObserver_OnEffectInitialized_Parms Parms;
		   Parms.inInitializedEffect=inInitializedEffect;
        ProcessFunction(FindFunctionChecked(ENGINE_OnEffectInitialized),&Parms);
	  }
	  void OnEffectStopped(class AActor* inStoppedEffect, BITFIELD Completed)
	  {
        IIEffectObserver_OnEffectStopped_Parms Parms;
		   Parms.inStoppedEffect=inStoppedEffect;
		   Parms.Completed=Completed;
        ProcessFunction(FindFunctionChecked(ENGINE_OnEffectStopped),&Parms);
	  }
	  void OnEffectStarted(class AActor* inStartedEffect)
	  {
        IIEffectObserver_OnEffectStarted_Parms Parms;
		   Parms.inStartedEffect=inStartedEffect;
        ProcessFunction(FindFunctionChecked(ENGINE_OnEffectStarted),&Parms);
	  }
	   DECLARE_CLASS(IIEffectObserver,UObject,0|CLASS_Interface,Engine)
	   NO_DEFAULT_CONSTRUCTOR(IIEffectObserver)
};

// Class	UIGEffectsSystemBase is declared in "..\Engine\Classes\IGEffectsSystemBase.uc"
class ENGINE_API	UIGEffectsSystemBase	: public UObject
{
public:
    BITFIELD ShowCaptions:1;
	   DECLARE_CLASS(UIGEffectsSystemBase,UObject,0,Engine)
    virtual void Init(AActor* Owner);
};

// Class	IIInterestedActorDestroyed is declared in "..\Engine\Classes\IInterestedActorDestroyed.uc"
class ENGINE_API	IIInterestedActorDestroyed	: public UObject
{
public:
	  void OnOtherActorDestroyed(class AActor* ActorBeingDestroyed)
	  {
        IIInterestedActorDestroyed_OnOtherActorDestroyed_Parms Parms;
		   Parms.ActorBeingDestroyed=ActorBeingDestroyed;
        ProcessFunction(FindFunctionChecked(ENGINE_OnOtherActorDestroyed),&Parms);
	  }
	   DECLARE_CLASS(IIInterestedActorDestroyed,UObject,0|CLASS_Interface,Engine)
	   NO_DEFAULT_CONSTRUCTOR(IIInterestedActorDestroyed)
};

// Class	IIInterestedPawnDied is declared in "..\Engine\Classes\IInterestedPawnDied.uc"
class ENGINE_API	IIInterestedPawnDied	: public UObject
{
public:
	  void OnOtherPawnDied(class APawn* DeadPawn)
	  {
        IIInterestedPawnDied_OnOtherPawnDied_Parms Parms;
		   Parms.DeadPawn=DeadPawn;
        ProcessFunction(FindFunctionChecked(ENGINE_OnOtherPawnDied),&Parms);
	  }
	   DECLARE_CLASS(IIInterestedPawnDied,UObject,0|CLASS_Interface,Engine)
	   NO_DEFAULT_CONSTRUCTOR(IIInterestedPawnDied)
};

// Class	UInteractions is declared in "..\Engine\Classes\Interactions.uc"
class ENGINE_API	UInteractions	: public UObject
{
public:
	   DECLARE_CLASS(UInteractions,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UInteractions)
};

// Class	UInteraction is declared in "..\Engine\Classes\Interaction.uc"
class ENGINE_API	UInteraction	: public UInteractions
{
public:
    BITFIELD bActive:1;
    BITFIELD bVisible:1;
    BITFIELD bRequiresTick:1;
    BITFIELD bNativeEvents:1;
    class UPlayer* ViewportOwner;
    class UInteractionMaster* Master;
	   DECLARE_FUNCTION(execScreenToWorld);
	   DECLARE_FUNCTION(execWorldToScreen);
	   DECLARE_FUNCTION(execConsoleCommand);
	   DECLARE_FUNCTION(execInitialize);
	  void	eventInitialized()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_Initialized),NULL);
	  }
	   DECLARE_CLASS(UInteraction,UInteractions,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UInteraction)
};

// Class	UBaseGUIController is declared in "..\Engine\Classes\BaseGUIController.uc"
class ENGINE_API	UBaseGUIController	: public UInteraction
{
public:
    class UMaterial* DefaultPens[3];
    BITFIELD bIsConsole:1;
    BITFIELD bHackDoNotRenderGUIPages:1;
    TArrayNoInit<FPlayerIDSpoke> VOIPSpeakingPlayerIDs;
    FScriptDelegate __OnAdminReply__Delegate;
	  void	eventAddPlayerIDSpoke(INT PlayerID, FLOAT SpeakTime)
	  {
        UBaseGUIController_eventAddPlayerIDSpoke_Parms Parms;
		   Parms.PlayerID=PlayerID;
		   Parms.SpeakTime=SpeakTime;
        ProcessEvent(FindFunctionChecked(ENGINE_AddPlayerIDSpoke),&Parms);
	  }
	  void	eventInitializeController()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_InitializeController),NULL);
	  }
	  void	eventCloseAll()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_CloseAll),NULL);
	  }
	  BITFIELD	eventCloseMenu()
	  {
        UBaseGUIController_eventCloseMenu_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CloseMenu),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventReplaceMenu(const FString& NewMenuName, const FString& MenuNameOverride, const FString& Param1, const FString& Param2, INT Param3)
	  {
        UBaseGUIController_eventReplaceMenu_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.NewMenuName=NewMenuName;
		   Parms.MenuNameOverride=MenuNameOverride;
		   Parms.Param1=Param1;
		   Parms.Param2=Param2;
		   Parms.Param3=Param3;
        ProcessEvent(FindFunctionChecked(ENGINE_ReplaceMenu),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventAutoLoadMenus()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_AutoLoadMenus),NULL);
	  }
	  BITFIELD	eventOpenMenu(const FString& NewMenuName, const FString& MenuNameOverride, const FString& Param1, const FString& Param2, INT Param3)
	  {
        UBaseGUIController_eventOpenMenu_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.NewMenuName=NewMenuName;
		   Parms.MenuNameOverride=MenuNameOverride;
		   Parms.Param1=Param1;
		   Parms.Param2=Param2;
		   Parms.Param3=Param3;
        ProcessEvent(FindFunctionChecked(ENGINE_OpenMenu),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventSetProgress(const FString& Message1, const FString& Message2)
	  {
        UBaseGUIController_eventSetProgress_Parms Parms;
		   Parms.Message1=Message1;
		   Parms.Message2=Message2;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgress),&Parms);
	  }
	  void	eventPostLevelChange()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostLevelChange),NULL);
	  }
	  void	eventPreLevelChange()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PreLevelChange),NULL);
	  }
	  void	delegateOnAdminReply(const FString& Reply)
	  {
        UBaseGUIController_eventOnAdminReply_Parms Parms;
		   Parms.Reply=Reply;
		   ProcessDelegate(ENGINE_OnAdminReply,&__OnAdminReply__Delegate,&Parms);
	  }
	   DECLARE_CLASS(UBaseGUIController,UInteraction,0,Engine)
		virtual void InitializeController();
};

// Class	UInteractionMaster is declared in "..\Engine\Classes\InteractionMaster.uc"
class ENGINE_API	UInteractionMaster	: public UInteractions
{
public:
    class UClient* Client;
    class UInteraction* BaseMenu;
    class UInteraction* Console;
    TArrayNoInit<class UInteraction*> GlobalInteractions;
    BITFIELD bRequireRawJoystick:1;
	   DECLARE_FUNCTION(execGetKeyFromBinding);
	   DECLARE_FUNCTION(execTravel);
	  void	eventProcess_Message(const FString& msg, FLOAT MsgLife, TArray<class UInteraction*> InteractionArray)
	  {
        UInteractionMaster_eventProcess_Message_Parms Parms;
		   Parms.msg=msg;
		   Parms.MsgLife=MsgLife;
		   Parms.InteractionArray=InteractionArray;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_Message),&Parms);
	  }
	  void	eventProcess_Tick(TArray<class UInteraction*> InteractionArray, FLOAT DeltaTime)
	  {
        UInteractionMaster_eventProcess_Tick_Parms Parms;
		   Parms.InteractionArray=InteractionArray;
		   Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_Tick),&Parms);
	  }
	  void	eventProcess_PostRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
	  {
        UInteractionMaster_eventProcess_PostRender_Parms Parms;
		   Parms.InteractionArray=InteractionArray;
		   Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_PostRender),&Parms);
	  }
	  void	eventProcess_PreRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
	  {
        UInteractionMaster_eventProcess_PreRender_Parms Parms;
		   Parms.InteractionArray=InteractionArray;
		   Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_PreRender),&Parms);
	  }
	  BITFIELD	eventProcess_KeyEvent(TArray<class UInteraction*> InteractionArray, BYTE& Key, BYTE& Action, FLOAT Delta)
	  {
        UInteractionMaster_eventProcess_KeyEvent_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.InteractionArray=InteractionArray;
		   Parms.Key=Key;
		   Parms.Action=Action;
		   Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_KeyEvent),&Parms);
		   Key=Parms.Key;
		   Action=Parms.Action;
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventProcess_KeyType(TArray<class UInteraction*> InteractionArray, BYTE& Key, const FString& Unicode)
	  {
        UInteractionMaster_eventProcess_KeyType_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.InteractionArray=InteractionArray;
		   Parms.Key=Key;
		   Parms.Unicode=Unicode;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_KeyType),&Parms);
		   Key=Parms.Key;
		   return Parms.ReturnValue;
	  }
	  void	eventSetFocusTo(class UInteraction* Inter, class UPlayer* ViewportOwner)
	  {
        UInteractionMaster_eventSetFocusTo_Parms Parms;
		   Parms.Inter=Inter;
		   Parms.ViewportOwner=ViewportOwner;
        ProcessEvent(FindFunctionChecked(ENGINE_SetFocusTo),&Parms);
	  }
	  void	eventRemoveInteraction(class UInteraction* RemoveMe)
	  {
        UInteractionMaster_eventRemoveInteraction_Parms Parms;
		   Parms.RemoveMe=RemoveMe;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveInteraction),&Parms);
	  }
	  class UInteraction*	eventAddInteraction(const FString& InteractionName, class UPlayer* AttachTo)
	  {
        UInteractionMaster_eventAddInteraction_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.InteractionName=InteractionName;
		   Parms.AttachTo=AttachTo;
        ProcessEvent(FindFunctionChecked(ENGINE_AddInteraction),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(UInteractionMaster,UInteractions,0|CLASS_Transient,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UInteractionMaster)
};

// Class	ULevelSummary is declared in "..\Engine\Classes\LevelSummary.uc"
class ENGINE_API	ULevelSummary	: public UObject
{
public:
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit LevelEnterText;
    class UMaterial* Screenshot;
    FStringNoInit Description;
    TArrayNoInit<BYTE> SupportedModes;
    INT IdealPlayerCountMin;
    INT IdealPlayerCountMax;
	   DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ULevelSummary)
};

// Class	UCombiner is declared in "..\Engine\Classes\Combiner.uc"
class ENGINE_API	UCombiner	: public UMaterial
{
public:
    BYTE CombineOperation;
    BYTE AlphaOperation;
    class UMaterial* Material1;
    class UMaterial* Material2;
    class UMaterial* Mask;
    BITFIELD InvertMask:1;
    BITFIELD Modulate2X:1;
    BITFIELD Modulate4X:1;
	   DECLARE_CLASS(UCombiner,UMaterial,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UCombiner)
};

// Class	UModifier is declared in "..\Engine\Classes\Modifier.uc"
class ENGINE_API	UModifier	: public UMaterial
{
public:
    class UMaterial* Material;
	   DECLARE_CLASS(UModifier,UMaterial,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UModifier)
};

// Class	UColorModifier is declared in "..\Engine\Classes\ColorModifier.uc"
class ENGINE_API	UColorModifier	: public UModifier
{
public:
    FColor Color;
    BITFIELD RenderTwoSided:1;
    BITFIELD AlphaBlend:1;
	   DECLARE_CLASS(UColorModifier,UModifier,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UColorModifier)
};

// Class	UFinalBlend is declared in "..\Engine\Classes\FinalBlend.uc"
class ENGINE_API	UFinalBlend	: public UModifier
{
public:
    BYTE FrameBufferBlending;
    BITFIELD ZWrite:1;
    BITFIELD ZTest:1;
    BITFIELD AlphaTest:1;
    BITFIELD TwoSided:1;
    BYTE AlphaRef;
	   DECLARE_CLASS(UFinalBlend,UModifier,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UFinalBlend)
};

// Class	UMaterialSequence is declared in "..\Engine\Classes\MaterialSequence.uc"
class ENGINE_API	UMaterialSequence	: public UModifier
{
public:
    TArrayNoInit<FMaterialSequenceItem> SequenceItems;
    BYTE TriggerAction;
    BITFIELD Loop:1;
    BITFIELD Paused:1;
    FLOAT CurrentTime;
    FLOAT LastTime;
    FLOAT TotalTime;
	   DECLARE_CLASS(UMaterialSequence,UModifier,0,Engine)
	virtual void PostEditChange();
	virtual UBOOL CheckCircularReferences( TArray<class UMaterial*>& History );
	virtual void PreSetMaterial(FLOAT TimeSeconds);
	virtual void Serialize(FArchive& Ar);
#if IG_SHARED // ckline: support glow in material sequences
    virtual UBOOL IsGlowMaterial()
    {
	    return (SequenceItems.Num() && SequenceItems(0).Material) ? SequenceItems(0).Material->IsGlowMaterial() : 0;
    }
    virtual UBOOL IsBumpMapped()
    {
	    return (SequenceItems.Num() && SequenceItems(0).Material) ? SequenceItems(0).Material->IsBumpMapped() : 0;
    }
#endif
};

// Class	UMaterialSwitch is declared in "..\Engine\Classes\MaterialSwitch.uc"
class ENGINE_API	UMaterialSwitch	: public UModifier
{
public:
    INT Current;
    TArrayNoInit<class UMaterial*> Materials;
	   DECLARE_CLASS(UMaterialSwitch,UModifier,0,Engine)
	virtual void PostEditChange();
	virtual UBOOL CheckCircularReferences( TArray<class UMaterial*>& History );
};

// Class	UOpacityModifier is declared in "..\Engine\Classes\OpacityModifier.uc"
class ENGINE_API	UOpacityModifier	: public UModifier
{
public:
    class UMaterial* Opacity;
    BITFIELD bOverrideTexModifier:1;
	   DECLARE_CLASS(UOpacityModifier,UModifier,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UOpacityModifier)
};

// Class	UTexModifier is declared in "..\Engine\Classes\TexModifier.uc"
class ENGINE_API	UTexModifier	: public UModifier
{
public:
    BYTE TexCoordSource;
    BYTE TexCoordCount;
    BITFIELD TexCoordProjected:1;
	   DECLARE_CLASS(UTexModifier,UModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds) { return NULL; }

	// Material interface.
	virtual INT MaterialUSize();
	virtual INT MaterialVSize();
	virtual BYTE RequiredUVStreams();
	virtual UBOOL GetValidated();
	virtual void SetValidated( UBOOL InValidated );
};

// Class	UTexCoordSource is declared in "..\Engine\Classes\TexCoordSource.uc"
class ENGINE_API	UTexCoordSource	: public UTexModifier
{
public:
    INT SourceChannel;
	   DECLARE_CLASS(UTexCoordSource,UTexModifier,0,Engine)
	void PostEditChange();
};

// Class	UTexEnvMap is declared in "..\Engine\Classes\TexEnvMap.uc"
class ENGINE_API	UTexEnvMap	: public UTexModifier
{
public:
    BYTE EnvMapType;
	   DECLARE_CLASS(UTexEnvMap,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

// Class	UTexMatrix is declared in "..\Engine\Classes\TexMatrix.uc"
class ENGINE_API	UTexMatrix	: public UTexModifier
{
public:
    FMatrix Matrix;
	   DECLARE_CLASS(UTexMatrix,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds) { return &Matrix; }
};

// Class	UTexOscillator is declared in "..\Engine\Classes\TexOscillator.uc"
class ENGINE_API	UTexOscillator	: public UTexModifier
{
public:
    FLOAT UOscillationRate;
    FLOAT VOscillationRate;
    FLOAT UOscillationPhase;
    FLOAT VOscillationPhase;
    FLOAT UOscillationAmplitude;
    FLOAT VOscillationAmplitude;
    BYTE UOscillationType;
    BYTE VOscillationType;
    FLOAT UOffset;
    FLOAT VOffset;
    FMatrix M;
    FLOAT LastSu;
    FLOAT LastSv;
    FLOAT CurrentUJitter;
    FLOAT CurrentVJitter;
	   DECLARE_CLASS(UTexOscillator,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
	// UObject interface
	virtual void PostEditChange();
};

// Class	UTexOscillatorTriggered is declared in "..\Engine\Classes\TexOscillatorTriggered.uc"
class ENGINE_API	UTexOscillatorTriggered	: public UTexOscillator
{
public:
    BYTE RetriggerAction;
    FLOAT StopAfterPeriod;
    FLOAT TriggeredTime;
    BITFIELD Reverse:1;
    BITFIELD Triggered:1;
	   DECLARE_CLASS(UTexOscillatorTriggered,UTexOscillator,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

// Class	UTexPanner is declared in "..\Engine\Classes\TexPanner.uc"
class ENGINE_API	UTexPanner	: public UTexModifier
{
public:
    FRotator PanDirection;
    FLOAT PanRate;
    FMatrix M;
	   DECLARE_CLASS(UTexPanner,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

// Class	UTexPannerTriggered is declared in "..\Engine\Classes\TexPannerTriggered.uc"
class ENGINE_API	UTexPannerTriggered	: public UTexPanner
{
public:
    BYTE RetriggerAction;
    FLOAT StopAfterPeriod;
    FLOAT TriggeredTime;
    BITFIELD Reverse:1;
    BITFIELD Triggered:1;
	   DECLARE_CLASS(UTexPannerTriggered,UTexPanner,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

// Class	UTexRotator is declared in "..\Engine\Classes\TexRotator.uc"
class ENGINE_API	UTexRotator	: public UTexModifier
{
public:
    FMatrix M;
    BYTE TexRotationType;
    FRotator Rotation;
    BITFIELD ConstantRotation:1;
    FLOAT UOffset;
    FLOAT VOffset;
    FRotator OscillationRate;
    FRotator OscillationAmplitude;
    FRotator OscillationPhase;
	   DECLARE_CLASS(UTexRotator,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
	void PostLoad()
	{
		Super::PostLoad();
		//!!OLDVER
		if( ConstantRotation )
		{
			ConstantRotation = 0;
			TexRotationType = TR_ConstantlyRotating;
		}
	}
};

// Class	UTexScaler is declared in "..\Engine\Classes\TexScaler.uc"
class ENGINE_API	UTexScaler	: public UTexModifier
{
public:
    FMatrix M;
    FLOAT UScale;
    FLOAT VScale;
    FLOAT UOffset;
    FLOAT VOffset;
	   DECLARE_CLASS(UTexScaler,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

// Class	UScriptedTexture is declared in "..\Engine\Classes\ScriptedTexture.uc"
class ENGINE_API	UScriptedTexture	: public UBitmapMaterial
{
public:
    INT RenderTarget;
    class UViewport* RenderViewport;
    class AActor* Client;
    BITFIELD bNotifyClientBeforeRendering:1;
    INT Revision;
    INT OldRevision;
	   DECLARE_FUNCTION(execDrawPortal);
	   DECLARE_FUNCTION(execDrawTile);
	   DECLARE_FUNCTION(execTextSize);
	   DECLARE_FUNCTION(execDrawText);
	   DECLARE_FUNCTION(execSetSize);
	   DECLARE_CLASS(UScriptedTexture,UBitmapMaterial,0,Engine)
	void Render(FRenderInterface* RI);

	virtual UBitmapMaterial* Get(FTime Time,UViewport* Viewport);
	virtual FBaseTexture* GetRenderInterface();
	virtual void Destroy();
	virtual void PostEditChange();
    
	// IG_SHARED note: we have moved code out of execSetSize() and into its own function in UnScriptedTexture.cpp
    void SetSize(INT Width, INT Height);
};

// Class	UShadowBitmapMaterial is declared in "..\Engine\Classes\ShadowBitmapMaterial.uc"
class ENGINE_API	UShadowBitmapMaterial	: public UBitmapMaterial
{
public:
    INT TextureInterfaces[2];
    class AActor* ShadowActor;
    FVector LightDirection;
    FLOAT LightDistance;
    FLOAT LightFOV;
    BITFIELD Dirty:1;
    BITFIELD Invalid:1;
    BITFIELD bDebugShadow:1;
    BITFIELD bBlobShadow:1;
    FLOAT CullDistance;
    BYTE ShadowDarkness;
    class UBitmapMaterial* BlobShadow;
	   DECLARE_FUNCTION(execSetResolution);
	   DECLARE_FUNCTION(execGetShadowLocation);
	   DECLARE_CLASS(UShadowBitmapMaterial,UBitmapMaterial,0,Engine)
	virtual void Destroy();

	virtual FBaseTexture* GetRenderInterface();
	virtual UBitmapMaterial* Get(FTime Time,UViewport* Viewport);
#if IG_SHARED	// rowan: GetShadowLocation, needed for shadow projector culling
	FVector	GetShadowLocation();
#endif

#if IG_DYNAMIC_SHADOW_DETAIL	// rowan: native change shadow resolution
	void SetResolution(INT Resolution);
#endif
};

// Class	UMovieTexture is declared in "..\Engine\Classes\MovieTexture.uc"
class ENGINE_API	UMovieTexture	: public UTexture
{
public:
    class UMovie* Movie;
    FStringNoInit MovieFilename;
    INT FrameRate;
	   DECLARE_FUNCTION(execInitializeMovie);
	   DECLARE_CLASS(UMovieTexture,UTexture,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMovieTexture)
};

// Class	UConstantMaterial is declared in "..\Engine\Classes\ConstantMaterial.uc"
class ENGINE_API	UConstantMaterial	: public URenderedMaterial
{
public:
	   DECLARE_CLASS(UConstantMaterial,URenderedMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds) { return FColor(0,0,0,0); }
};

// Class	UConstantColor is declared in "..\Engine\Classes\ConstantColor.uc"
class ENGINE_API	UConstantColor	: public UConstantMaterial
{
public:
    FColor Color;
	   DECLARE_CLASS(UConstantColor,UConstantMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds) { return Color; }
};

// Class	UFadeColor is declared in "..\Engine\Classes\FadeColor.uc"
class ENGINE_API	UFadeColor	: public UConstantMaterial
{
public:
    FColor Color1;
    FColor Color2;
    FLOAT FadePeriod;
    FLOAT FadePhase;
    BYTE ColorFadeType;
	   DECLARE_CLASS(UFadeColor,UConstantMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds);
};

// Class	UParticleMaterial is declared in "..\Engine\Classes\ParticleMaterial.uc"
class ENGINE_API	UParticleMaterial	: public URenderedMaterial
{
public:
    INT ParticleBlending;
    INT BlendBetweenSubdivisions;
    INT RenderTwoSided;
    INT UseTFactor;
    class UBitmapMaterial* BitmapMaterial;
    INT AlphaTest;
    INT AlphaRef;
    INT ZTest;
    INT ZWrite;
    INT Wireframe;
    BITFIELD AcceptsProjectors:1;
    INT NumProjectors;
    FParticleProjectorInfo Projectors[8];
	   DECLARE_CLASS(UParticleMaterial,URenderedMaterial,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UParticleMaterial)
};

// Class	UProjectorMaterial is declared in "..\Engine\Classes\ProjectorMaterial.uc"
class ENGINE_API	UProjectorMaterial	: public URenderedMaterial
{
public:
    class UBitmapMaterial* Gradient;
    class UMaterial* Projected;
    class UMaterial* BaseMaterial;
    BYTE BaseMaterialBlending;
    BYTE FrameBufferBlending;
    FMatrix Matrix;
    FMatrix GradientMatrix;
    BITFIELD bProjected:1;
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bGradient:1;
    BITFIELD bProjectOnAlpha:1;
    BITFIELD bProjectOnBackfaces:1;
    BITFIELD bStaticProjector:1;
    BITFIELD bTwoSided:1;
	   DECLARE_CLASS(UProjectorMaterial,URenderedMaterial,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UProjectorMaterial)
};

// Class	UShader is declared in "..\Engine\Classes\Shader.uc"
class ENGINE_API	UShader	: public URenderedMaterial
{
public:
    class UMaterial* Diffuse;
    class UMaterial* Opacity;
    class UMaterial* NormalMap;
    class UCubemap* PerPixelReflection;
    class UMaterial* PerPixelReflectionMask;
    BYTE PerPixelSpecular;
    BYTE PerPixelSpecularType;
    BYTE PerPixelSpecularBrightness;
    class UMaterial* Specular;
    class UMaterial* SpecularityMask;
    class UMaterial* SelfIllumination;
    class UMaterial* SelfIlluminationMask;
    BYTE GlowBrightness;
    class UMaterial* GlowMapOverride;
    class UMaterial* GlowMaskOverride;
    class UMaterial* Detail;
    FLOAT DetailScale;
    BYTE OutputBlending;
    BITFIELD bAllowSelfIlluminationLOD:1;
    BITFIELD TwoSided:1;
    BITFIELD Wireframe:1;
    BITFIELD ModulateStaticLighting2X:1;
    BITFIELD PerformLightingOnSpecularPass:1;
	   DECLARE_CLASS(UShader,URenderedMaterial,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UShader)
};

// Class	UTerrainMaterial is declared in "..\Engine\Classes\TerrainMaterial.uc"
class ENGINE_API	UTerrainMaterial	: public URenderedMaterial
{
public:
    TArrayNoInit<FTerrainMaterialLayer> Layers;
    class UTexture* MacroTexture;
    FMatrix MacroTextureTransform;
    BITFIELD ForceFogOverride:1;
    BYTE RenderMethod;
    BITFIELD FirstPass:1;
	   DECLARE_CLASS(UTerrainMaterial,URenderedMaterial,0,Engine)
	virtual UMaterial* CheckFallback();
	virtual UBOOL HasFallback();
};

// Class	UVertexColor is declared in "..\Engine\Classes\VertexColor.uc"
class ENGINE_API	UVertexColor	: public URenderedMaterial
{
public:
	   DECLARE_CLASS(UVertexColor,URenderedMaterial,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UVertexColor)
};

// Class	UMeshObject is declared in "..\Engine\Classes\MeshObject.uc"
class ENGINE_API	UMeshObject	: public UObject
{
public:
	   DECLARE_CLASS(UMeshObject,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMeshObject)
};

// Class	UMessage is declared in "..\Engine\Classes\Messaging\Message.uc"
class ENGINE_API	UMessage	: public UObject
{
public:
    class UClass* specificTo;
	   DECLARE_FUNCTION(execAllocate);
	   DECLARE_CLASS(UMessage,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMessage)
};

// Class	UMessagePostRender is declared in "..\Engine\Classes\Messaging\MessagePostRender.uc"
class ENGINE_API	UMessagePostRender	: public UMessage
{
public:
    class UCanvas* Canvas;
	   DECLARE_CLASS(UMessagePostRender,UMessage,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMessagePostRender)
};

// Class	UMessagePreRender is declared in "..\Engine\Classes\Messaging\MessagePreRender.uc"
class ENGINE_API	UMessagePreRender	: public UMessage
{
public:
    class UCanvas* Canvas;
	   DECLARE_CLASS(UMessagePreRender,UMessage,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMessagePreRender)
};

// Class	UMessageDispatcher is declared in "..\Engine\Classes\Messaging\MessageDispatcher.uc"
class ENGINE_API	UMessageDispatcher	: public UObject
{
public:
	   DECLARE_FUNCTION(execdeleteMessage);
	   DECLARE_FUNCTION(execdispatch);
	   DECLARE_FUNCTION(execregisterReceiver);
	   DECLARE_CLASS(UMessageDispatcher,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMessageDispatcher)
};

// Class	UNavigationPointList is declared in "..\Engine\Classes\NavigationPointList.uc"
class ENGINE_API	UNavigationPointList	: public UObject
{
public:
    TArrayNoInit<class ANavigationPoint*> NavPointList;
	   DECLARE_FUNCTION(execContains);
	   DECLARE_FUNCTION(execGetEntryAt);
	   DECLARE_FUNCTION(execGetSize);
	   DECLARE_FUNCTION(execGetIndexOf);
	   DECLARE_FUNCTION(execEmpty);
	   DECLARE_FUNCTION(execRemove);
	   DECLARE_FUNCTION(execAdd);
	  class ANavigationPoint*	eventGetRandomEntry()
	  {
        UNavigationPointList_eventGetRandomEntry_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetRandomEntry),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(UNavigationPointList,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UNavigationPointList)
};

// Class	UParticleEmitter is declared in "..\Engine\Classes\ParticleEmitter.uc"
class ENGINE_API	UParticleEmitter	: public UObject
{
public:
    FVector Acceleration;
    BITFIELD UseCollision:1;
    FVector ExtentMultiplier;
    FRangeVector DampingFactorRange;
    BITFIELD UseCollisionPlanes:1;
    TArrayNoInit<FPlane> CollisionPlanes;
    BITFIELD UseMaxCollisions:1;
    FRange MaxCollisions;
    INT SpawnFromOtherEmitter;
    INT SpawnAmount;
    FRangeVector SpawnedVelocityScaleRange;
    BITFIELD UseSpawnedVelocityScale:1;
    BITFIELD UseColorScale:1;
    TArrayNoInit<FParticleColorScale> ColorScale;
    FLOAT ColorScaleRepeats;
    FRangeVector ColorMultiplierRange;
    FPlane FadeOutFactor;
    FLOAT FadeOutStartTime;
    BITFIELD FadeOut:1;
    FPlane FadeInFactor;
    FLOAT FadeInEndTime;
    BITFIELD FadeIn:1;
    BITFIELD UseActorForces:1;
    BYTE CoordinateSystem;
    INT MaxParticles;
    BITFIELD ResetAfterChange:1;
    BYTE EffectAxis;
    BITFIELD RespawnDeadParticles:1;
    BITFIELD AutoDestroy:1;
    BITFIELD AutoReset:1;
    BITFIELD Disabled:1;
    BITFIELD DisableFogging:1;
    FRange AutoResetTimeRange;
    FStringNoInit Name;
    FVector StartLocationOffset;
    FRangeVector StartLocationRange;
    INT AddLocationFromOtherEmitter;
    BYTE StartLocationShape;
    FRange SphereRadiusRange;
    FRangeVector StartLocationPolarRange;
    FRange StartMassRange;
    class UStaticMesh* MeshSpawningStaticMesh;
    BYTE MeshSpawning;
    BITFIELD VelocityFromMesh:1;
    FRangeVector VelocityScaleRange;
    FRangeVector MeshScaleRange;
    BITFIELD UniformMeshScale:1;
    BITFIELD UniformVelocityScale:1;
    BITFIELD UseColorFromMesh:1;
    BITFIELD SpawnOnlyInDirectionOfNormal:1;
    FVector MeshNormal;
    FRange MeshNormalThresholdRange;
    INT AlphaRef;
    BITFIELD AlphaTest:1;
    BITFIELD AcceptsProjectors:1;
    BITFIELD ZTest:1;
    BITFIELD ZWrite:1;
    BITFIELD UseRevolution:1;
    FRangeVector RevolutionCenterOffsetRange;
    FRangeVector RevolutionsPerSecondRange;
    BITFIELD UseRevolutionScale:1;
    TArrayNoInit<FParticleRevolutionScale> RevolutionScale;
    FLOAT RevolutionScaleRepeats;
    BYTE UseRotationFrom;
    BITFIELD SpinParticles:1;
    FRotator RotationOffset;
    FVector SpinCCWorCW;
    FRangeVector SpinsPerSecondRange;
    FRangeVector StartSpinRange;
    BITFIELD DampRotation:1;
    FRangeVector RotationDampingFactorRange;
    FVector RotationNormal;
    BITFIELD UseSizeScale:1;
    BITFIELD UseRegularSizeScale:1;
    TArrayNoInit<FParticleTimeScale> SizeScale;
    FLOAT SizeScaleRepeats;
    FRangeVector StartSizeRange;
    BITFIELD UniformSize:1;
    BYTE UseSkeletalLocationAs;
    class AActor* SkeletalMeshActor;
    FVector SkeletalScale;
    FRange RelativeBoneIndexRange;
    TArrayNoInit<FParticleSound> Sounds;
    BYTE SpawningSound;
    FRange SpawningSoundIndex;
    FRange SpawningSoundProbability;
    BYTE CollisionSound;
    FRange CollisionSoundIndex;
    FRange CollisionSoundProbability;
    FLOAT ParticlesPerSecond;
    FLOAT InitialParticlesPerSecond;
    BITFIELD AutomaticInitialSpawning:1;
    BITFIELD ForceMinimumOneFrameLifetime:1;
    BYTE DrawStyle;
    class UTexture* Texture;
    INT TextureUSubdivisions;
    INT TextureVSubdivisions;
    BITFIELD BlendBetweenSubdivisions:1;
    BITFIELD UseSubdivisionScale:1;
    TArrayNoInit<FLOAT> SubdivisionScale;
    INT SubdivisionStart;
    INT SubdivisionEnd;
    BITFIELD UseRandomSubdivision:1;
    FLOAT SecondsBeforeInactive;
    FLOAT MinSquaredVelocity;
    FRange InitialTimeRange;
    FRange LifetimeRange;
    FRange InitialDelayRange;
    BITFIELD TriggerDisabled:1;
    BITFIELD ResetOnTrigger:1;
    FRange SpawnOnTriggerRange;
    FLOAT SpawnOnTriggerPPS;
    FRangeVector StartVelocityRange;
    FRange StartVelocityRadialRange;
    FVector MaxAbsVelocity;
    FRangeVector VelocityLossRange;
    INT AddVelocityFromOtherEmitter;
    FRangeVector AddVelocityMultiplierRange;
    BYTE GetVelocityDirectionFrom;
    BITFIELD UseVelocityScale:1;
    BITFIELD InheritOwnersVelocity:1;
    TArrayNoInit<FParticleVelocityScale> VelocityScale;
    FLOAT VelocityScaleRepeats;
    FLOAT WarmupTicksPerSecond;
    FLOAT RelativeWarmupTime;
    class AEmitter* Owner;
    BITFIELD Initialized:1;
    BITFIELD Inactive:1;
    FLOAT InactiveTime;
    TArrayNoInit<FParticle> Particles;
    INT ParticleIndex;
    INT ActiveParticles;
    FLOAT PPSFraction;
    FBox BoundingBox;
    FVector RealExtentMultiplier;
    BITFIELD RealDisableFogging:1;
    BITFIELD AllParticlesDead:1;
    BITFIELD WarmedUp:1;
    INT OtherIndex;
    FLOAT InitialDelay;
    FVector GlobalOffset;
    FLOAT TimeTillReset;
    INT PS2Data;
    INT MaxActiveParticles;
    INT CurrentCollisionSoundIndex;
    INT CurrentSpawningSoundIndex;
    INT CurrentMeshSpawningIndex;
    FLOAT MaxSizeScale;
    INT KillPending;
    INT DeferredParticles;
    FVector RealMeshNormal;
    TArrayNoInit<FVector> MeshVertsAndNormals;
    INT CurrentSpawnOnTrigger;
    INT RenderableParticles;
    FRangeVector RealVelocityLossRange;
	   DECLARE_FUNCTION(execResetParticles);
	   DECLARE_FUNCTION(execTrigger);
	   DECLARE_FUNCTION(execSpawnParticle);
	   DECLARE_CLASS(UParticleEmitter,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UParticleEmitter)
};

// Class	UBeamEmitter is declared in "..\Engine\Classes\BeamEmitter.uc"
class ENGINE_API	UBeamEmitter	: public UParticleEmitter
{
public:
    FRange BeamDistanceRange;
    TArrayNoInit<FParticleBeamEndPoint> BeamEndPoints;
    BYTE DetermineEndPointBy;
    FLOAT BeamTextureUScale;
    FLOAT BeamTextureVScale;
    INT RotatingSheets;
    BITFIELD TriggerEndpoint:1;
    FRangeVector LowFrequencyNoiseRange;
    INT LowFrequencyPoints;
    FRangeVector HighFrequencyNoiseRange;
    INT HighFrequencyPoints;
    TArrayNoInit<FParticleBeamScale> LFScaleFactors;
    TArrayNoInit<FParticleBeamScale> HFScaleFactors;
    FLOAT LFScaleRepeats;
    FLOAT HFScaleRepeats;
    BITFIELD UseHighFrequencyScale:1;
    BITFIELD UseLowFrequencyScale:1;
    BITFIELD NoiseDeterminesEndPoint:1;
    FRangeVector DynamicHFNoiseRange;
    FRange DynamicHFNoisePointsRange;
    FRange DynamicTimeBetweenNoiseRange;
    BITFIELD UseBranching:1;
    FRange BranchProbability;
    FRange BranchHFPointsRange;
    INT BranchEmitter;
    FRange BranchSpawnAmountRange;
    BITFIELD LinkupLifetime:1;
    INT SheetsUsed;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    FLOAT BeamValueSum;
    TArrayNoInit<FParticleBeamData> HFPoints;
    TArrayNoInit<FVector> LFPoints;
    TArrayNoInit<class AActor*> HitActors;
    FLOAT TimeSinceLastDynamicNoise;
	   DECLARE_CLASS(UBeamEmitter,UParticleEmitter,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UBeamEmitter)
};

// Class	UMeshEmitter is declared in "..\Engine\Classes\MeshEmitter.uc"
class ENGINE_API	UMeshEmitter	: public UParticleEmitter
{
public:
    class UStaticMesh* StaticMesh;
    BITFIELD UseMeshBlendMode:1;
    BITFIELD RenderTwoSided:1;
    BITFIELD UseParticleColor:1;
    FVector MeshExtent;
	   DECLARE_CLASS(UMeshEmitter,UParticleEmitter,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMeshEmitter)
};

// Class	USparkEmitter is declared in "..\Engine\Classes\SparkEmitter.uc"
class ENGINE_API	USparkEmitter	: public UParticleEmitter
{
public:
    FRange LineSegmentsRange;
    FRange TimeBeforeVisibleRange;
    FRange TimeBetweenSegmentsRange;
    TArrayNoInit<FParticleSparkData> SparkData;
    class UVertexBuffer* VertexBuffer;
    class UIndexBuffer* IndexBuffer;
    INT NumSegments;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
	   DECLARE_CLASS(USparkEmitter,UParticleEmitter,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(USparkEmitter)
};

// Class	USpriteEmitter is declared in "..\Engine\Classes\SpriteEmitter.uc"
class ENGINE_API	USpriteEmitter	: public UParticleEmitter
{
public:
    BYTE UseDirectionAs;
    FVector ProjectionNormal;
    FVector RealProjectionNormal;
	   DECLARE_CLASS(USpriteEmitter,UParticleEmitter,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(USpriteEmitter)
};

// Class	UTrailEmitter is declared in "..\Engine\Classes\TrailEmitter.uc"
class ENGINE_API	UTrailEmitter	: public UParticleEmitter
{
public:
    INT MaxPointsPerTrail;
    FLOAT DistanceThreshold;
    BITFIELD UseCrossedSheets:1;
    INT MaxTrailTwistAngle;
    TArrayNoInit<FParticleTrailData> TrailData;
    TArrayNoInit<FParticleTrailInfo> TrailInfo;
    class UVertexBuffer* VertexBuffer;
    class UIndexBuffer* IndexBuffer;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
	   DECLARE_CLASS(UTrailEmitter,UParticleEmitter,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UTrailEmitter)
};

// Class	UPlayerInput is declared in "..\Engine\Classes\PlayerInput.uc"
class ENGINE_API	UPlayerInput	: public UObject
{
public:
    BITFIELD bInvertMouse:1;
    BITFIELD bWasForward:1;
    BITFIELD bWasBack:1;
    BITFIELD bWasLeft:1;
    BITFIELD bWasRight:1;
    BITFIELD bEdgeForward:1;
    BITFIELD bEdgeBack:1;
    BITFIELD bEdgeLeft:1;
    BITFIELD bEdgeRight:1;
    BITFIELD bAdjustSampling:1;
    BYTE MouseSmoothingMode;
    FLOAT MouseSmoothingStrength;
    FLOAT MouseSensitivity;
    FLOAT MouseSamplingTime;
    FLOAT MouseAccelThreshold;
    FLOAT SmoothedMouse[2];
    FLOAT ZeroTime[2];
    FLOAT SamplingTime[2];
    FLOAT MaybeTime[2];
    FLOAT OldSamples[4];
    INT MouseSamples[2];
    FLOAT DoubleClickTimer;
    FLOAT DoubleClickTime;
	  void	eventPlayerInput(FLOAT DeltaTime)
	  {
        UPlayerInput_eventPlayerInput_Parms Parms;
		   Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerInput),&Parms);
	  }
	   DECLARE_CLASS(UPlayerInput,UObject,0|CLASS_Transient|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UPlayerInput)
};

// Class	UReachSpec is declared in "..\Engine\Classes\ReachSpec.uc"
class ENGINE_API	UReachSpec	: public UObject
{
public:
    INT Distance;
    class ANavigationPoint* Start;
    class ANavigationPoint* End;
    INT CollisionRadius;
    INT CollisionHeight;
    INT reachFlags;
    INT MaxLandingVelocity;
    BYTE bPruned;
    BITFIELD bForced:1;
    TArrayNoInit<FDoorBlockedInfo> DoorBlockedList;
	   DECLARE_CLASS(UReachSpec,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UReachSpec)
};

// Class	UTyrion_ActionBase is declared in "..\Engine\Classes\TyrionInterface\Tyrion_ActionBase.uc"
class ENGINE_API	UTyrion_ActionBase	: public URefCount
{
public:
	   DECLARE_CLASS(UTyrion_ActionBase,URefCount,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UTyrion_ActionBase)
};

// Class	UTyrion_GoalBase is declared in "..\Engine\Classes\TyrionInterface\Tyrion_GoalBase.uc"
class ENGINE_API	UTyrion_GoalBase	: public URefCount
{
public:
	   DECLARE_CLASS(UTyrion_GoalBase,URefCount,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UTyrion_GoalBase)
};

// Class	UTyrion_ResourceBase is declared in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
class ENGINE_API	UTyrion_ResourceBase	: public URefCount
{
public:
    TArrayNoInit<class UTyrion_GoalBase*> goals;
    TArrayNoInit<class UTyrion_ActionBase*> abilities;
    BITFIELD bMatchGoals:1;
    BITFIELD bUnInitialized:1;
    BITFIELD bGoalsReset:1;
	   DECLARE_FUNCTION(execTick);
	  BITFIELD	eventisActive()
	  {
        UTyrion_ResourceBase_eventisActive_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_isActive),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventresetGoals()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_resetGoals),NULL);
	  }
	  void	eventdeleteRemovedActions()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_deleteRemovedActions),NULL);
	  }
	  void	eventInit()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
	  }
	   DECLARE_CLASS(UTyrion_ResourceBase,URefCount,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UTyrion_ResourceBase)
};

// Class	URepo is declared in "..\Engine\Classes\Repo.uc"
class ENGINE_API	URepo	: public UObject
{
public:
    class ALevelInfo* Level;
    class UBaseGUIController* GUIController;
    BITFIELD InitAsListenServer:1;
    BITFIELD InitAsDedicatedServer:1;
    BITFIELD InitWithoutIntroMenu:1;
    FStringNoInit CommandLineMap;
    FStringNoInit CommandLineGameMode;
    FStringNoInit SplashSceneMapName;
    FLOAT MPTimeOut;
    FLOAT MomentumImpartedOnPenetrationFraction;
    FLOAT MomentumToDamageConversionFactor;
	  BITFIELD	eventShouldShowSubtitles()
	  {
        URepo_eventShouldShowSubtitles_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldShowSubtitles),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventPostGameEngineInit()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostGameEngineInit),NULL);
	  }
	  void	eventPostBeginPlay()
	  {
		  if(IsProbing(NAME_PostBeginPlay)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
		  }
	  }
	  void	eventPreBeginPlay()
	  {
		  if(IsProbing(NAME_PreBeginPlay)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
		  }
	  }
	  void	eventTick(FLOAT DeltaSeconds)
	  {
        URepo_eventTick_Parms Parms;
		  if(IsProbing(NAME_Tick)) {
		   Parms.DeltaSeconds=DeltaSeconds;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
		  }
	  }
	  void	eventOnDisconnected()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_OnDisconnected),NULL);
	  }
	  void	eventPostLevelChange(class UPlayer* thePlayer, const FString& MapName)
	  {
        URepo_eventPostLevelChange_Parms Parms;
		   Parms.thePlayer=thePlayer;
		   Parms.MapName=MapName;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLevelChange),&Parms);
	  }
	  void	eventPreLevelChange(class UPlayer* thePlayer, const FString& MapName)
	  {
        URepo_eventPreLevelChange_Parms Parms;
		   Parms.thePlayer=thePlayer;
		   Parms.MapName=MapName;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLevelChange),&Parms);
	  }
	   DECLARE_CLASS(URepo,UObject,0|CLASS_Transient|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(URepo)
};

// Class	USpeechManager is declared in "..\Engine\Classes\SpeechRecognition\SpeechManager.uc"
class ENGINE_API	USpeechManager	: public UObject
{
public:
    TArrayNoInit<FClientInterest> ClientInterests;
    TArrayNoInit<FClientInterest> AudioLevelClientInterests;
    BITFIELD Enabled:1;
    BITFIELD Active:1;
    BITFIELD Initialized:1;
    class UViewport* Viewport;
	   DECLARE_FUNCTION(execDeactivateAudioLevelNotify);
	   DECLARE_FUNCTION(execActivateAudioLevelNotify);
	   DECLARE_FUNCTION(execStopRecognition);
	   DECLARE_FUNCTION(execStartRecognition);
	   DECLARE_FUNCTION(execIsInitialized);
	  void	eventOnAudioLevelEvent(INT Value)
	  {
        USpeechManager_eventOnAudioLevelEvent_Parms Parms;
		   Parms.Value=Value;
        ProcessEvent(FindFunctionChecked(ENGINE_OnAudioLevelEvent),&Parms);
	  }
	  void	eventOnFalseRecognition()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_OnFalseRecognition),NULL);
	  }
	  void	eventOnCommandRecognized(FName Rule, TArray<FName> Value, BYTE Confidence)
	  {
        USpeechManager_eventOnCommandRecognized_Parms Parms;
		   Parms.Rule=Rule;
		   Parms.Value=Value;
		   Parms.Confidence=Confidence;
        ProcessEvent(FindFunctionChecked(ENGINE_OnCommandRecognized),&Parms);
	  }
	  void	eventOnPhraseStart()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_OnPhraseStart),NULL);
	  }
	   DECLARE_CLASS(USpeechManager,UObject,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(USpeechManager)
};

#endif

AUTOGENERATE_FUNCTION(AActor,-1,execGetRenderBoundingBoxCenter);
AUTOGENERATE_FUNCTION(AActor,-1,execCopyMaterialsToSkins);
AUTOGENERATE_FUNCTION(AActor,-1,execGetCurrentMaterial);
AUTOGENERATE_FUNCTION(AActor,-1,execGetFireLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetLookLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetAimLocation);
AUTOGENERATE_FUNCTION(AActor,552,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,551,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,550,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,549,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,321,execCollidingActors);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,313,execDynamicActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,-1,execMoveCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,547,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,545,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,539,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,-1,execSuggestFallVelocity);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,568,execForceFeedbackSupported);
AUTOGENERATE_FUNCTION(AActor,567,execStopFeedbackEffect);
AUTOGENERATE_FUNCTION(AActor,566,execPlayFeedbackEffect);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execDemoPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayOwnedSound);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execSimulateSoundOnDedicatedServer);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,-1,execGetLastTracedActor);
AUTOGENERATE_FUNCTION(AActor,-1,execGetLastTracedBone);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,-1,execStopAllMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execStopMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execUnClock);
AUTOGENERATE_FUNCTION(AActor,-1,execClock);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokReturnSkeletalActorToAnimationSystem);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokCollisionGroupChange);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSlowSetCollisionEnabled);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokGetState);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetGameTickForce);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetBlocking);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokActivate);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokImpartCOMImpulse);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokGetLastTracedBone);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetAngularDamping);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetLinearDamping);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetLinearVelocityAll);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetAngularVelocity);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetLinearVelocity);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokGetAngularVelocity);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokGetLinearVelocity);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokImpartForce);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokImpartImpulse);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokIsActive);
AUTOGENERATE_FUNCTION(AActor,-1,execOnlyAffectPawns);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,-1,execDebugUnclock);
AUTOGENERATE_FUNCTION(AActor,-1,execDebugClock);
AUTOGENERATE_FUNCTION(AActor,-1,execDrawDebugLine);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRenderBoundingSphere);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimIsInGroup);
AUTOGENERATE_FUNCTION(AActor,-1,execGetAnimParams);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneDirection);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneScale);
AUTOGENERATE_FUNCTION(AActor,-1,execLockRootMotion);
AUTOGENERATE_FUNCTION(AActor,-1,execUpdateAttachmentLocations);
AUTOGENERATE_FUNCTION(AActor,-1,execDetachFromBone);
AUTOGENERATE_FUNCTION(AActor,-1,execAttachToBone);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootRotationDelta);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootLocationDelta);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneCoords);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimGetChannelAlpha);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimBlendToAlpha);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimBlendParams);
AUTOGENERATE_FUNCTION(AActor,-1,execBoneRefresh);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkMesh);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkSkelAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNotifyChannel);
AUTOGENERATE_FUNCTION(AActor,-1,execEnableChannelNotify);
AUTOGENERATE_FUNCTION(AActor,-1,execCurrentLIPSincAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execIsPlayingLIPSincAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execHasLIPSincAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execStopLIPSincAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayLIPSincAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execSetTweenMode);
AUTOGENERATE_FUNCTION(AActor,-1,execGetAnimLength);
AUTOGENERATE_FUNCTION(AActor,-1,execIsTweening);
AUTOGENERATE_FUNCTION(AActor,-1,execGetAnimName);
AUTOGENERATE_FUNCTION(AActor,-1,execSetAnimFrame);
AUTOGENERATE_FUNCTION(AActor,-1,execFreezeAnimAt);
AUTOGENERATE_FUNCTION(AActor,-1,execStopAnimating);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execLoopAnimAdditive);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayAnimAdditive);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execGetMeshName);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,-1,execSetRelativeLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetRelativeRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execCanSetLocation);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawType);
AUTOGENERATE_FUNCTION(AActor,-1,execSetStaticMesh);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawScale3D);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawScale);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,-1,execConstruct_ActorNameVectorRotator);
AUTOGENERATE_FUNCTION(AActor,-1,execConstruct_Void);
AUTOGENERATE_FUNCTION(AActor,-1,execAllocate);
AUTOGENERATE_FUNCTION(AActor,-1,execstaticActorLabel);
AUTOGENERATE_FUNCTION(AActor,-1,execactorLabel);
AUTOGENERATE_FUNCTION(AActor,-1,execIsOverlapping);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(AActor,-1,execAddDebugMessage);
AUTOGENERATE_FUNCTION(AController,-1,execGetDistanceToSound);
AUTOGENERATE_FUNCTION(AController,-1,execInLatentExecution);
AUTOGENERATE_FUNCTION(AController,534,execPickAnyTarget);
AUTOGENERATE_FUNCTION(AController,530,execRemoveController);
AUTOGENERATE_FUNCTION(AController,529,execAddController);
AUTOGENERATE_FUNCTION(AController,527,execWaitForLanding);
AUTOGENERATE_FUNCTION(AController,526,execPickWallAdjust);
AUTOGENERATE_FUNCTION(AController,523,execEAdjustJump);
AUTOGENERATE_FUNCTION(AController,533,execCanSee);
AUTOGENERATE_FUNCTION(AController,514,execLineOfSightTo);
AUTOGENERATE_FUNCTION(AController,508,execFinishRotation);
AUTOGENERATE_FUNCTION(ADoor,-1,execIsEmptyDoorway);
AUTOGENERATE_FUNCTION(ADoor,-1,execIsWedged);
AUTOGENERATE_FUNCTION(ADoor,-1,execIsLocked);
AUTOGENERATE_FUNCTION(ADoor,-1,execIsBroken);
AUTOGENERATE_FUNCTION(ADoor,-1,execIsOpening);
AUTOGENERATE_FUNCTION(ADoor,-1,execIsOpen);
AUTOGENERATE_FUNCTION(ADoor,-1,execIsClosing);
AUTOGENERATE_FUNCTION(ADoor,-1,execIsClosed);
AUTOGENERATE_FUNCTION(ADoor,-1,execIsOpeningRight);
AUTOGENERATE_FUNCTION(ADoor,-1,execIsOpeningLeft);
AUTOGENERATE_FUNCTION(ADoor,-1,execIsOpenRight);
AUTOGENERATE_FUNCTION(ADoor,-1,execIsOpenLeft);
AUTOGENERATE_FUNCTION(AEmitter,-1,execKill);
AUTOGENERATE_FUNCTION(AFileLog,-1,execLogf);
AUTOGENERATE_FUNCTION(AFileLog,-1,execCloseLog);
AUTOGENERATE_FUNCTION(AFileLog,-1,execOpenLog);
AUTOGENERATE_FUNCTION(AFiredWeapon,-1,execIsFlashlightProjectionVisible);
AUTOGENERATE_FUNCTION(AFiredWeapon,-1,execIsFlashlightInitialized);
AUTOGENERATE_FUNCTION(AFiredWeapon,-1,execIsFlashlightOn);
AUTOGENERATE_FUNCTION(AFiredWeapon,-1,execGetBaseAimError);
AUTOGENERATE_FUNCTION(AFiredWeapon,-1,execApplyRandomOffsetToRotation);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execFindOpenSpot);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execConnectStats);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execQueryPatch);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execIsHostCDKeyValid);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSendServerStateChanged);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execCleanUpGameSpy);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execAuthenticateProfile);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execRegisterUniqueNick);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execDisconnectUserAccount);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSendStatResponseIfNeeded);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execConnectUserAccount);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execCheckUserAccount);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execCreateUserAccount);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSendStatSnapshot);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsGetPlayerIndex);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execAccumulatePlayerStatInt);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execAccumulateServerStatInt);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSetPlayerStatInt);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSetServerStatInt);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSetPlayerStatStr);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSetServerStatStr);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsRemovePlayer);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsNewPlayer);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execServerSendStatChallenge);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsGetStatResponse);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsGetPID);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsHasPIDAndResponse);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsNewGameStarted);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execGetNextServer);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execGetServerPort);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execGetServerIpAddress);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execCancelUpdate);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execUpdateServer);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execLANUpdateServerList);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execUpdateServerList);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSendGameSpyGameModeChange);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execGetPlayerObject);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execGetLevelInfo);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execInitGameSpyClient);
AUTOGENERATE_FUNCTION(AGameStats,-1,execGetMapFileName);
AUTOGENERATE_FUNCTION(AGameStats,-1,execGetStatsIdentifier);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DCone);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DCylinder);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DCircle);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DLine);
AUTOGENERATE_FUNCTION(AHandheldEquipment,-1,execGetThirdPersonModel);
AUTOGENERATE_FUNCTION(AHandheldEquipment,-1,execGetFirstPersonModel);
AUTOGENERATE_FUNCTION(AHandheldEquipment,-1,execInFirstPersonView);
AUTOGENERATE_FUNCTION(AHavokConstraint,-1,execComputeLocalValues);
AUTOGENERATE_FUNCTION(AHavokConstraint,-1,execActivateAttachedBodies);
AUTOGENERATE_FUNCTION(AHavokConstraint,-1,execUpdateConstraintDetails);
AUTOGENERATE_FUNCTION(AHavokConstraint,-1,execRecreateConstraint);
AUTOGENERATE_FUNCTION(UInteraction,-1,execScreenToWorld);
AUTOGENERATE_FUNCTION(UInteraction,-1,execWorldToScreen);
AUTOGENERATE_FUNCTION(UInteraction,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(UInteraction,-1,execInitialize);
AUTOGENERATE_FUNCTION(UInteractionMaster,-1,execGetKeyFromBinding);
AUTOGENERATE_FUNCTION(UInteractionMaster,-1,execTravel);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalPlayerController);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execUnRegisterNotifyActorDestroyed);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execRegisterNotifyActorDestroyed);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execUnRegisterNotifyPawnDied);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execRegisterNotifyPawnDied);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execIsDemoBuild);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetEngine);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execIsTheEntryLevel);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execIsEntry);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execDetailChange);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execHavokGetNextFreeSystemLayer);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execHavokSetCollisionLayerEnabled);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetGameSpyManager);
AUTOGENERATE_FUNCTION(UMessage,-1,execAllocate);
AUTOGENERATE_FUNCTION(UMessageDispatcher,-1,execdeleteMessage);
AUTOGENERATE_FUNCTION(UMessageDispatcher,-1,execdispatch);
AUTOGENERATE_FUNCTION(UMessageDispatcher,-1,execregisterReceiver);
AUTOGENERATE_FUNCTION(AMirror,-1,execInitialize);
AUTOGENERATE_FUNCTION(AMirror,-1,execSetMirrorsEnabled);
AUTOGENERATE_FUNCTION(AMirrorCamera,-1,execCreateNewScriptedTexture);
AUTOGENERATE_FUNCTION(AMirrorCamera,-1,execInitialize);
AUTOGENERATE_FUNCTION(UMovieTexture,-1,execInitializeMovie);
AUTOGENERATE_FUNCTION(ANavigationPoint,-1,execGetRoomName);
AUTOGENERATE_FUNCTION(ANavigationPoint,-1,execInitOcclusionMap);
AUTOGENERATE_FUNCTION(UNavigationPointList,-1,execContains);
AUTOGENERATE_FUNCTION(UNavigationPointList,-1,execGetEntryAt);
AUTOGENERATE_FUNCTION(UNavigationPointList,-1,execGetSize);
AUTOGENERATE_FUNCTION(UNavigationPointList,-1,execGetIndexOf);
AUTOGENERATE_FUNCTION(UNavigationPointList,-1,execEmpty);
AUTOGENERATE_FUNCTION(UNavigationPointList,-1,execRemove);
AUTOGENERATE_FUNCTION(UNavigationPointList,-1,execAdd);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execResetParticles);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execTrigger);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execSpawnParticle);
AUTOGENERATE_FUNCTION(APawn,-1,execFindAnchor);
AUTOGENERATE_FUNCTION(APawn,-1,execGetActiveItem);
AUTOGENERATE_FUNCTION(APawn,-1,execIsCompliant);
AUTOGENERATE_FUNCTION(APawn,-1,execIsAThreat);
AUTOGENERATE_FUNCTION(APawn,-1,execIsLowerBodyInjured);
AUTOGENERATE_FUNCTION(APawn,-1,execIsInjured);
AUTOGENERATE_FUNCTION(APawn,-1,execIsIncapacitated);
AUTOGENERATE_FUNCTION(APawn,-1,execIsConscious);
AUTOGENERATE_FUNCTION(APawn,-1,execIsDead);
AUTOGENERATE_FUNCTION(APawn,-1,execNotifyPawnDeathListeners);
AUTOGENERATE_FUNCTION(APawn,-1,execGetAdditionalBaseAimError);
AUTOGENERATE_FUNCTION(APawn,-1,execGetPathfindingDistanceToPoint);
AUTOGENERATE_FUNCTION(APawn,-1,execGetPathfindingDistanceToActor);
AUTOGENERATE_FUNCTION(APawn,-1,execGetRoomName);
AUTOGENERATE_FUNCTION(APawn,-1,execIsInRoom);
AUTOGENERATE_FUNCTION(APawn,-1,execGetYawEdgeAlpha);
AUTOGENERATE_FUNCTION(APawn,-1,execAddViewablePawn);
AUTOGENERATE_FUNCTION(APawn,-1,execEyePosition);
AUTOGENERATE_FUNCTION(APawn,-1,execCanLean);
AUTOGENERATE_FUNCTION(APawn,-1,execGetLeanYawRanges);
AUTOGENERATE_FUNCTION(APawn,-1,execUnLean);
AUTOGENERATE_FUNCTION(APawn,-1,execLean);
AUTOGENERATE_FUNCTION(APawn,-1,execLineOfSightTo);
AUTOGENERATE_FUNCTION(APawn,-1,execForceCrouchThisTick);
AUTOGENERATE_FUNCTION(APawn,-1,execReachedLocation);
AUTOGENERATE_FUNCTION(APawn,-1,execReachedDestination);
AUTOGENERATE_FUNCTION(APawn,-1,execClearRouteCache);
AUTOGENERATE_FUNCTION(APawn,-1,execIsDoorBlockedForPawn);
AUTOGENERATE_FUNCTION(APawn,-1,execFitsAtLocation);
AUTOGENERATE_FUNCTION(APawn,-1,execIsLocationReachable);
AUTOGENERATE_FUNCTION(APawn,-1,execIsActorReachable);
AUTOGENERATE_FUNCTION(APawn,-1,execCanSee);
AUTOGENERATE_FUNCTION(APawn,-1,execRemovePawn);
AUTOGENERATE_FUNCTION(APawn,-1,execAddPawn);
AUTOGENERATE_FUNCTION(UPerlinNoise,-1,execReinitialize);
AUTOGENERATE_FUNCTION(UPerlinNoise,-1,execNoise3);
AUTOGENERATE_FUNCTION(UPerlinNoise,-1,execNoise2);
AUTOGENERATE_FUNCTION(UPerlinNoise,-1,execNoise1);
AUTOGENERATE_FUNCTION(APlayerController,-1,execSuppressName);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetLookAroundSpeed);
AUTOGENERATE_FUNCTION(APlayerController,-1,execChangeVoiceChatter);
AUTOGENERATE_FUNCTION(APlayerController,-1,execLeaveVoiceChat);
AUTOGENERATE_FUNCTION(APlayerController,-1,execFlushInput);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientHearSound);
AUTOGENERATE_FUNCTION(APlayerController,524,execFindStairRotation);
AUTOGENERATE_FUNCTION(APlayerController,-1,execServerValidationResponse);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientValidate);
AUTOGENERATE_FUNCTION(APlayerController,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerController,546,execUpdateURL);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execSetViewTarget);
AUTOGENERATE_FUNCTION(APlayerController,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetServerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetPlayerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerController,-1,execSetNetSpeed);
AUTOGENERATE_FUNCTION(AProjector,-1,execUpdateMatrix);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachActor);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachActor);
AUTOGENERATE_FUNCTION(AProjector,-1,execAbandonProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachProjector);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execDrawPortal);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execDrawTile);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execTextSize);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execDrawText);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execSetSize);
AUTOGENERATE_FUNCTION(ASecurity,-1,execNativePerform);
AUTOGENERATE_FUNCTION(UShadowBitmapMaterial,-1,execSetResolution);
AUTOGENERATE_FUNCTION(UShadowBitmapMaterial,-1,execGetShadowLocation);
AUTOGENERATE_FUNCTION(AShadowProjector,-1,execUpdateShadow);
AUTOGENERATE_FUNCTION(AShadowProjector,-1,execUpdateDetailSetting);
AUTOGENERATE_FUNCTION(USpeechManager,-1,execDeactivateAudioLevelNotify);
AUTOGENERATE_FUNCTION(USpeechManager,-1,execActivateAudioLevelNotify);
AUTOGENERATE_FUNCTION(USpeechManager,-1,execStopRecognition);
AUTOGENERATE_FUNCTION(USpeechManager,-1,execStartRecognition);
AUTOGENERATE_FUNCTION(USpeechManager,-1,execIsInitialized);
AUTOGENERATE_FUNCTION(UTyrion_ResourceBase,-1,execTick);
AUTOGENERATE_FUNCTION(ATyrion_Setup,-1,execcopyParameters);
AUTOGENERATE_FUNCTION(ATyrion_Setup,-1,execmakeSafeOuter);
AUTOGENERATE_FUNCTION(AVolume,-1,execEncompasses);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,315,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,314,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack	(pop)
#endif

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(AAIRepository)
VERIFY_CLASS_SIZE_NODIE(AActor)
VERIFY_CLASS_SIZE_NODIE(AAmmunition)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_DestroyEffect)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_Effect)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_LIPSinc)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_Script)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_Scripted)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_Sound)
VERIFY_CLASS_SIZE_NODIE(AAntiPortalActor)
VERIFY_CLASS_SIZE_NODIE(AAwarenessPoint)
VERIFY_CLASS_SIZE_NODIE(UBaseGUIController)
VERIFY_CLASS_SIZE_NODIE(UBeamEmitter)
VERIFY_CLASS_SIZE_NODIE(ABlockingVolume)
VERIFY_CLASS_SIZE_NODIE(ABlockingVolumePawnsOnly)
VERIFY_CLASS_SIZE_NODIE(ABrush)
VERIFY_CLASS_SIZE_NODIE(ACamera)
VERIFY_CLASS_SIZE_NODIE(UCheatManager)
VERIFY_CLASS_SIZE_NODIE(AClipMarker)
VERIFY_CLASS_SIZE_NODIE(UColorModifier)
VERIFY_CLASS_SIZE_NODIE(UCombiner)
VERIFY_CLASS_SIZE_NODIE(UConstantColor)
VERIFY_CLASS_SIZE_NODIE(UConstantMaterial)
VERIFY_CLASS_SIZE_NODIE(AController)
VERIFY_CLASS_SIZE_NODIE(ACoverPlane)
VERIFY_CLASS_SIZE_NODIE(ADecoVolumeObject)
VERIFY_CLASS_SIZE_NODIE(ADecoration)
VERIFY_CLASS_SIZE_NODIE(ADecorationList)
VERIFY_CLASS_SIZE_NODIE(ADefaultPhysicsVolume)
VERIFY_CLASS_SIZE_NODIE(ADoor)
VERIFY_CLASS_SIZE_NODIE(AEmitter)
VERIFY_CLASS_SIZE_NODIE(AEquipment)
VERIFY_CLASS_SIZE_NODIE(UFadeColor)
VERIFY_CLASS_SIZE_NODIE(AFileLog)
VERIFY_CLASS_SIZE_NODIE(UFinalBlend)
VERIFY_CLASS_SIZE_NODIE(AFiredWeapon)
VERIFY_CLASS_SIZE_NODIE(AFluidSurfaceOscillator)
VERIFY_CLASS_SIZE_NODIE(UFluidSurfaceParamaters)
VERIFY_CLASS_SIZE_NODIE(AFluidVolume)
VERIFY_CLASS_SIZE_NODIE(AGameInfo)
VERIFY_CLASS_SIZE_NODIE(AGameReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(UGameSpyManager)
VERIFY_CLASS_SIZE_NODIE(AGameStats)
VERIFY_CLASS_SIZE_NODIE(AGenericExternalCamera)
VERIFY_CLASS_SIZE_NODIE(AHUD)
VERIFY_CLASS_SIZE_NODIE(AHandheldEquipment)
VERIFY_CLASS_SIZE_NODIE(AHandheldEquipmentModel)
VERIFY_CLASS_SIZE_NODIE(AHands)
VERIFY_CLASS_SIZE_NODIE(AHavok6DOFConstraint)
VERIFY_CLASS_SIZE_NODIE(AHavokActor)
VERIFY_CLASS_SIZE_NODIE(AHavokBSConstraint)
VERIFY_CLASS_SIZE_NODIE(AHavokConeLimitConstraint)
VERIFY_CLASS_SIZE_NODIE(AHavokConstraint)
VERIFY_CLASS_SIZE_NODIE(AHavokHingeConstraint)
VERIFY_CLASS_SIZE_NODIE(UHavokObject)
VERIFY_CLASS_SIZE_NODIE(AHavokPrismaticConstraint)
VERIFY_CLASS_SIZE_NODIE(UHavokRigidBody)
VERIFY_CLASS_SIZE_NODIE(UHavokSkeletalSystem)
VERIFY_CLASS_SIZE_NODIE(AHavokWeakOrientationConstraint)
VERIFY_CLASS_SIZE_NODIE(UI3DL2Listener)
VERIFY_CLASS_SIZE_NODIE(IICanBeArrested)
VERIFY_CLASS_SIZE_NODIE(IICanBeUsed)
VERIFY_CLASS_SIZE_NODIE(IIControllableViewport)
VERIFY_CLASS_SIZE_NODIE(IIEffectObserver)
VERIFY_CLASS_SIZE_NODIE(UIGEffectsSystemBase)
VERIFY_CLASS_SIZE_NODIE(IIInterestedActorDestroyed)
VERIFY_CLASS_SIZE_NODIE(IIInterestedPawnDied)
VERIFY_CLASS_SIZE_NODIE(AInfo)
VERIFY_CLASS_SIZE_NODIE(UInteraction)
VERIFY_CLASS_SIZE_NODIE(UInteractionMaster)
VERIFY_CLASS_SIZE_NODIE(UInteractions)
VERIFY_CLASS_SIZE_NODIE(AInternetInfo)
VERIFY_CLASS_SIZE_NODIE(AInventory)
VERIFY_CLASS_SIZE_NODIE(AKActor)
VERIFY_CLASS_SIZE_NODIE(AKeypoint)
VERIFY_CLASS_SIZE_NODIE(ALevelInfo)
VERIFY_CLASS_SIZE_NODIE(ULevelSummary)
VERIFY_CLASS_SIZE_NODIE(ALiftCenter)
VERIFY_CLASS_SIZE_NODIE(ALiftExit)
VERIFY_CLASS_SIZE_NODIE(ALight)
VERIFY_CLASS_SIZE_NODIE(ALineOfSightTrigger)
VERIFY_CLASS_SIZE_NODIE(AMassiveStaticMesh)
VERIFY_CLASS_SIZE_NODIE(UMaterialSequence)
VERIFY_CLASS_SIZE_NODIE(UMaterialSwitch)
VERIFY_CLASS_SIZE_NODIE(UMeshEmitter)
VERIFY_CLASS_SIZE_NODIE(UMeshObject)
VERIFY_CLASS_SIZE_NODIE(UMessage)
VERIFY_CLASS_SIZE_NODIE(UMessageDispatcher)
VERIFY_CLASS_SIZE_NODIE(UMessagePostRender)
VERIFY_CLASS_SIZE_NODIE(UMessagePreRender)
VERIFY_CLASS_SIZE_NODIE(AMirror)
VERIFY_CLASS_SIZE_NODIE(AMirrorCamera)
VERIFY_CLASS_SIZE_NODIE(UModifier)
VERIFY_CLASS_SIZE_NODIE(AMover)
VERIFY_CLASS_SIZE_NODIE(UMovieTexture)
VERIFY_CLASS_SIZE_NODIE(AMutator)
VERIFY_CLASS_SIZE_NODIE(ANavigationPoint)
VERIFY_CLASS_SIZE_NODIE(UNavigationPointList)
VERIFY_CLASS_SIZE_NODIE(ANote)
VERIFY_CLASS_SIZE_NODIE(UOpacityModifier)
VERIFY_CLASS_SIZE_NODIE(UParticleEmitter)
VERIFY_CLASS_SIZE_NODIE(UParticleMaterial)
VERIFY_CLASS_SIZE_NODIE(APathNode)
VERIFY_CLASS_SIZE_NODIE(APawn)
VERIFY_CLASS_SIZE_NODIE(UPerlinNoise)
VERIFY_CLASS_SIZE_NODIE(APhysicsVolume)
VERIFY_CLASS_SIZE_NODIE(APlayerController)
VERIFY_CLASS_SIZE_NODIE(UPlayerInput)
VERIFY_CLASS_SIZE_NODIE(APlayerReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(APlayerStart)
VERIFY_CLASS_SIZE_NODIE(APolyMarker)
VERIFY_CLASS_SIZE_NODIE(AProjectile)
VERIFY_CLASS_SIZE_NODIE(AProjector)
VERIFY_CLASS_SIZE_NODIE(UProjectorMaterial)
VERIFY_CLASS_SIZE_NODIE(AProtectiveEquipment)
VERIFY_CLASS_SIZE_NODIE(UReachSpec)
VERIFY_CLASS_SIZE_NODIE(AReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(URepo)
VERIFY_CLASS_SIZE_NODIE(AScout)
VERIFY_CLASS_SIZE_NODIE(AScoutController)
VERIFY_CLASS_SIZE_NODIE(UScriptedTexture)
VERIFY_CLASS_SIZE_NODIE(ASecurity)
VERIFY_CLASS_SIZE_NODIE(UShader)
VERIFY_CLASS_SIZE_NODIE(UShadowBitmapMaterial)
VERIFY_CLASS_SIZE_NODIE(AShadowProjector)
VERIFY_CLASS_SIZE_NODIE(ASkyZoneInfo)
VERIFY_CLASS_SIZE_NODIE(ASmallNavigationPoint)
VERIFY_CLASS_SIZE_NODIE(USparkEmitter)
VERIFY_CLASS_SIZE_NODIE(ASpawnableEmitter)
VERIFY_CLASS_SIZE_NODIE(ASpawnerBase)
VERIFY_CLASS_SIZE_NODIE(USpeechManager)
VERIFY_CLASS_SIZE_NODIE(USpriteEmitter)
VERIFY_CLASS_SIZE_NODIE(AStaticMeshActor)
VERIFY_CLASS_SIZE_NODIE(ASwatProjectile)
VERIFY_CLASS_SIZE_NODIE(ATeamInfo)
VERIFY_CLASS_SIZE_NODIE(ATeleporter)
VERIFY_CLASS_SIZE_NODIE(UTerrainMaterial)
VERIFY_CLASS_SIZE_NODIE(UTexCoordSource)
VERIFY_CLASS_SIZE_NODIE(UTexEnvMap)
VERIFY_CLASS_SIZE_NODIE(UTexMatrix)
VERIFY_CLASS_SIZE_NODIE(UTexModifier)
VERIFY_CLASS_SIZE_NODIE(UTexOscillator)
VERIFY_CLASS_SIZE_NODIE(UTexOscillatorTriggered)
VERIFY_CLASS_SIZE_NODIE(UTexPanner)
VERIFY_CLASS_SIZE_NODIE(UTexPannerTriggered)
VERIFY_CLASS_SIZE_NODIE(UTexRotator)
VERIFY_CLASS_SIZE_NODIE(UTexScaler)
VERIFY_CLASS_SIZE_NODIE(ATimer)
VERIFY_CLASS_SIZE_NODIE(UTrailEmitter)
VERIFY_CLASS_SIZE_NODIE(ATrigger)
VERIFY_CLASS_SIZE_NODIE(ATriggers)
VERIFY_CLASS_SIZE_NODIE(UTyrion_ActionBase)
VERIFY_CLASS_SIZE_NODIE(UTyrion_GoalBase)
VERIFY_CLASS_SIZE_NODIE(UTyrion_ResourceBase)
VERIFY_CLASS_SIZE_NODIE(ATyrion_Setup)
VERIFY_CLASS_SIZE_NODIE(UVertexColor)
VERIFY_CLASS_SIZE_NODIE(AVoiceChatReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(AVoiceChatRoom)
VERIFY_CLASS_SIZE_NODIE(AVolume)
VERIFY_CLASS_SIZE_NODIE(AWarpZoneInfo)
VERIFY_CLASS_SIZE_NODIE(AWarpZoneMarker)
VERIFY_CLASS_SIZE_NODIE(AWeapon)
VERIFY_CLASS_SIZE_NODIE(AZoneInfo)
VERIFY_CLASS_SIZE_NODIE(AxWeatherEffect)
#endif // VERIFY_CLASS_SIZES
